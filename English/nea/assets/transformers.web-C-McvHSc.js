(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(n){if(n.ep)return;n.ep=!0;const o=t(n);fetch(n.href,o)}})();const Zi=new Map,bn=[],Rv=(e,r,t)=>{if(r&&typeof r.init=="function"&&typeof r.createInferenceSessionHandler=="function"){const s=Zi.get(e);if(s===void 0)Zi.set(e,{backend:r,priority:t});else{if(s.priority>t)return;if(s.priority===t&&s.backend!==r)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){const n=bn.indexOf(e);n!==-1&&bn.splice(n,1);for(let o=0;o<bn.length;o++)if(Zi.get(bn[o]).priority<=t){bn.splice(o,0,e);return}bn.push(e)}return}throw new TypeError("not a valid backend")},jv=async e=>{const r=Zi.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{const t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(s){return t||(r.error=`${s}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},Nv=async e=>{const r=e.executionProviders||[],t=r.map(l=>typeof l=="string"?l:l.name),s=t.length===0?bn:t;let n;const o=[],a=new Set;for(const l of s){const c=await jv(l);typeof c=="string"?o.push({name:l,err:c}):(n||(n=c),n===c&&a.add(l))}if(!n)throw new Error(`no available backend found. ERR: ${o.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(const{name:l,err:c}of o)t.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${c}`);const i=r.filter(l=>a.has(typeof l=="string"?l:l.name));return[n,new Proxy(e,{get:(l,c)=>c==="executionProviders"?i:Reflect.get(l,c)})]},Vv="1.21.0";let b_="warning";const xs={wasm:{},webgl:{},webgpu:{},versions:{common:Vv},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);b_=e}},get logLevel(){return b_}};Object.defineProperty(xs,"logLevel",{enumerable:!0});const Uv=xs,Wv=(e,r)=>{const t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];const s=t.getContext("2d");if(s!=null){let n,o;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);const a=r?.format!==void 0?r.format:"RGB",i=r?.norm;let l,c;i===void 0||i.mean===void 0?l=[255,255,255,255]:typeof i.mean=="number"?l=[i.mean,i.mean,i.mean,i.mean]:(l=[i.mean[0],i.mean[1],i.mean[2],0],i.mean[3]!==void 0&&(l[3]=i.mean[3])),i===void 0||i.bias===void 0?c=[0,0,0,0]:typeof i.bias=="number"?c=[i.bias,i.bias,i.bias,i.bias]:(c=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(c[3]=i.bias[3]));const p=o*n;let d=0,u=p,f=p*2,_=-1;a==="RGBA"?(d=0,u=p,f=p*2,_=p*3):a==="RGB"?(d=0,u=p,f=p*2):a==="RBG"&&(d=0,f=p,u=p*2);for(let v=0;v<o;v++)for(let I=0;I<n;I++){const M=(e.data[d++]-c[0])*l[0],y=(e.data[u++]-c[1])*l[1],$=(e.data[f++]-c[2])*l[2],x=_===-1?255:(e.data[_++]-c[3])*l[3];s.fillStyle="rgba("+M+","+y+","+$+","+x+")",s.fillRect(I,v,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Gv=(e,r)=>{const t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let s;if(t!=null){let n,o,a;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],a=e.dims[3]):(n=e.dims[3],o=e.dims[2],a=e.dims[1]);const i=r!==void 0&&r.format!==void 0?r.format:"RGB",l=r?.norm;let c,p;l===void 0||l.mean===void 0?c=[255,255,255,255]:typeof l.mean=="number"?c=[l.mean,l.mean,l.mean,l.mean]:(c=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(c[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));const d=o*n;if(r!==void 0&&(r.format!==void 0&&a===4&&r.format!=="RGBA"||a===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const u=4;let f=0,_=1,v=2,I=3,M=0,y=d,$=d*2,x=-1;i==="RGBA"?(M=0,y=d,$=d*2,x=d*3):i==="RGB"?(M=0,y=d,$=d*2):i==="RBG"&&(M=0,$=d,y=d*2),s=t.createImageData(n,o);for(let T=0;T<o*n;f+=u,_+=u,v+=u,I+=u,T++)s.data[f]=(e.data[M++]-p[0])*c[0],s.data[_]=(e.data[y++]-p[1])*c[1],s.data[v]=(e.data[$++]-p[2])*c[2],s.data[I]=x===-1?255:(e.data[x++]-p[3])*c[3]}else throw new Error("Can not access image data");return s},Al=(e,r)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(r.height===void 0||r.width===void 0)throw new Error("Image height and width must be defined");if(r.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:t,width:s}=r,n=r.norm??{mean:255,bias:0};let o,a;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?a=[n.bias,n.bias,n.bias,n.bias]:a=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];const i=r.format!==void 0?r.format:"RGBA",l=r.tensorFormat!==void 0&&r.tensorFormat!==void 0?r.tensorFormat:"RGB",c=t*s,p=l==="RGBA"?new Float32Array(c*4):new Float32Array(c*3);let d=4,u=0,f=1,_=2,v=3,I=0,M=c,y=c*2,$=-1;i==="RGB"&&(d=3,u=0,f=1,_=2,v=-1),l==="RGBA"?$=c*3:l==="RBG"?(I=0,y=c,M=c*2):l==="BGR"&&(y=0,M=c,I=c*2);for(let T=0;T<c;T++,u+=d,_+=d,f+=d,v+=d)p[I++]=(e[u]+a[0])/o[0],p[M++]=(e[f]+a[1])/o[1],p[y++]=(e[_]+a[2])/o[2],$!==-1&&v!==-1&&(p[$++]=(e[v]+a[3])/o[3]);return l==="RGBA"?new ls("float32",p,[1,4,t,s]):new ls("float32",p,[1,3,t,s])},Kv=async(e,r)=>{const t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string";let a,i=r??{};const l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},c=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){const p=l();p.width=e.width,p.height=e.height;const d=c(p);if(d!=null){let u=e.height,f=e.width;if(r!==void 0&&r.resizedHeight!==void 0&&r.resizedWidth!==void 0&&(u=r.resizedHeight,f=r.resizedWidth),r!==void 0){if(i=r,r.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");i.tensorFormat="RGBA",i.height=u,i.width=f}else i.tensorFormat="RGBA",i.height=u,i.width=f;d.drawImage(e,0,0),a=d.getImageData(0,0,f,u).data}else throw new Error("Can not access image data")}else if(s){let p,d;if(r!==void 0&&r.resizedWidth!==void 0&&r.resizedHeight!==void 0?(p=r.resizedHeight,d=r.resizedWidth):(p=e.height,d=e.width),r!==void 0&&(i=r),i.format="RGBA",i.height=p,i.width=d,r!==void 0){const u=l();u.width=d,u.height=p;const f=c(u);if(f!=null)f.putImageData(e,0,0),a=f.getImageData(0,0,d,p).data;else throw new Error("Can not access image data")}else a=e.data}else if(n){if(r===void 0)throw new Error("Please provide image config with format for Imagebitmap");const p=l();p.width=e.width,p.height=e.height;const d=c(p);if(d!=null){const u=e.height,f=e.width;return d.drawImage(e,0,0,f,u),a=d.getImageData(0,0,f,u).data,i.height=u,i.width=f,Al(a,i)}else throw new Error("Can not access image data")}else{if(o)return new Promise((p,d)=>{const u=l(),f=c(u);if(!e||!f)return d();const _=new Image;_.crossOrigin="Anonymous",_.src=e,_.onload=()=>{u.width=_.width,u.height=_.height,f.drawImage(_,0,0,u.width,u.height);const v=f.getImageData(0,0,u.width,u.height);i.height=u.height,i.width=u.width,p(Al(v.data,i))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Al(a,i);throw new Error("Input data provided is not supported - aborted tensor creation")},Hv=(e,r)=>{const{width:t,height:s,download:n,dispose:o}=r,a=[1,s,t,4];return new ls({location:"texture",type:"float32",texture:e,dims:a,download:n,dispose:o})},qv=(e,r)=>{const{dataType:t,dims:s,download:n,dispose:o}=r;return new ls({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:s,download:n,dispose:o})},Qv=(e,r)=>{const{dataType:t,dims:s,download:n,dispose:o}=r;return new ls({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:s,download:n,dispose:o})},Xv=(e,r,t)=>new ls({location:"cpu-pinned",type:e,data:r,dims:t??[r.length]}),Yn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),ea=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let y_=!1;const Jv=()=>{if(!y_){y_=!0;const e=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,s=typeof t<"u"&&t.from;e&&(Yn.set("int64",BigInt64Array),ea.set(BigInt64Array,"int64")),r&&(Yn.set("uint64",BigUint64Array),ea.set(BigUint64Array,"uint64")),s?(Yn.set("float16",t),ea.set(t,"float16")):Yn.set("float16",Uint16Array)}},Yv=e=>{let r=1;for(let t=0;t<e.length;t++){const s=e[t];if(typeof s!="number"||!Number.isSafeInteger(s))throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);if(s<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);r*=s}return r},Zv=(e,r)=>{switch(e.location){case"cpu":return new ls(e.type,e.data,r);case"cpu-pinned":return new ls({location:"cpu-pinned",data:e.data,type:e.type,dims:r});case"texture":return new ls({location:"texture",texture:e.texture,type:e.type,dims:r});case"gpu-buffer":return new ls({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:r});case"ml-tensor":return new ls({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}};let ls=class{constructor(r,t,s){Jv();let n,o;if(typeof r=="object"&&"location"in r)switch(this.dataLocation=r.location,n=r.type,o=r.dims,r.location){case"cpu-pinned":{const i=Yn.get(n);if(!i)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(r.data instanceof i))throw new TypeError(`buffer should be of type ${i.name}`);this.cpuData=r.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=r.texture,this.downloader=r.download,this.disposer=r.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=r.gpuBuffer,this.downloader=r.download,this.disposer=r.dispose;break}case"ml-tensor":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint64"&&n!=="int8"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=r.mlTensor,this.downloader=r.download,this.disposer=r.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,l;if(typeof r=="string")if(n=r,l=s,r==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");i=t}else{const c=Yn.get(r);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${r}.`);if(Array.isArray(t)){if(r==="float16"&&c===Uint16Array||r==="uint4"||r==="int4")throw new TypeError(`Creating a ${r} tensor from number array is not supported. Please use ${c.name} as data.`);r==="uint64"||r==="int64"?i=c.from(t,BigInt):i=c.from(t)}else if(t instanceof c)i=t;else if(t instanceof Uint8ClampedArray)if(r==="uint8")i=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(r==="float16"&&t instanceof Uint16Array&&c!==Uint16Array)i=new globalThis.Float16Array(t.buffer,t.byteOffset,t.length);else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(l=t,Array.isArray(r)){if(r.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const c=typeof r[0];if(c==="string")n="string",i=r;else if(c==="boolean")n="bool",i=Uint8Array.from(r);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else if(r instanceof Uint8ClampedArray)n="uint8",i=Uint8Array.from(r);else{const c=ea.get(r.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${r.constructor}.`);n=c,i=r}if(l===void 0)l=[i.length];else if(!Array.isArray(l))throw new TypeError("A tensor's dims must be a number array");o=l,this.cpuData=i,this.dataLocation="cpu"}const a=Yv(o);if(this.cpuData&&a!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(a/2)===this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=a}static async fromImage(r,t){return Kv(r,t)}static fromTexture(r,t){return Hv(r,t)}static fromGpuBuffer(r,t){return qv(r,t)}static fromMLTensor(r,t){return Qv(r,t)}static fromPinnedBuffer(r,t,s){return Xv(r,t,s)}toDataURL(r){return Wv(this,r)}toImageData(r){return Gv(this,r)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(r){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,r&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(r){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Zv(this,r)}};const Xn=ls,rM=(e,r)=>{(typeof xs.trace>"u"?!xs.wasm.trace:!xs.trace)||console.timeStamp(`${e}::ORT::${r}`)},sM=(e,r)=>{const t=new Error().stack?.split(/\r\n|\r|\n/g)||[];let s=!1;for(let n=0;n<t.length;n++){if(s&&!t[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;r&&(o+=`::${r}`),rM("CPU",o);return}t[n].includes("TRACE_FUNC")&&(s=!0)}},Fc=e=>{(typeof xs.trace>"u"?!xs.wasm.trace:!xs.trace)||sM("BEGIN",e)},Oc=e=>{(typeof xs.trace>"u"?!xs.wasm.trace:!xs.trace)||sM("END",e)};let ex=class nM{constructor(r){this.handler=r}async run(r,t,s){Fc();const n={};let o={};if(typeof r!="object"||r===null||r instanceof Xn||Array.isArray(r))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof Xn)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(const c of t){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let c=!1;const p=Object.getOwnPropertyNames(t);for(const d of this.outputNames)if(p.indexOf(d)!==-1){const u=t[d];(u===null||u instanceof Xn)&&(c=!0,a=!1,n[d]=u)}if(c){if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else o=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const c of this.inputNames)if(typeof r[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(a)for(const c of this.outputNames)n[c]=null;const i=await this.handler.run(r,n,o),l={};for(const c in i)if(Object.hasOwnProperty.call(i,c)){const p=i[c];p instanceof Xn?l[c]=p:l[c]=new Xn(p.type,p.data,p.dims)}return Oc(),l}async release(){return this.handler.dispose()}static async create(r,t,s,n){Fc();let o,a={};if(typeof r=="string"){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer){const p=r;let d=0,u=r.byteLength;if(typeof t=="object"&&t!==null)a=t;else if(typeof t=="number"){if(d=t,!Number.isSafeInteger(d))throw new RangeError("'byteOffset' must be an integer.");if(d<0||d>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(u=r.byteLength-d,typeof s=="number"){if(u=s,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||d+u>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-d}].`);if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof s<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(p,d,u)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[i,l]=await Nv(a),c=await i.createInferenceSessionHandler(o,l);return Oc(),new nM(c)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}};const tx=ex,rx=Object.freeze(Object.defineProperty({__proto__:null,InferenceSession:tx,TRACE:rM,TRACE_FUNC_BEGIN:Fc,TRACE_FUNC_END:Oc,Tensor:Xn,env:Uv,registerBackend:Rv},Symbol.toStringTag,{value:"Module"}));/*!
 * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var Jc=Object.defineProperty,sx=Object.getOwnPropertyDescriptor,nx=Object.getOwnPropertyNames,ox=Object.prototype.hasOwnProperty,ix=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,t)=>(typeof require<"u"?require:r)[t]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),Re=(e,r)=>()=>(e&&(r=e(e=0)),r),ro=(e,r)=>{for(var t in r)Jc(e,t,{get:r[t],enumerable:!0})},ax=(e,r,t,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of nx(r))!ox.call(e,n)&&n!==t&&Jc(e,n,{get:()=>r[n],enumerable:!(s=sx(r,n))||s.enumerable});return e},qo=e=>ax(Jc({},"__esModule",{value:!0}),e),Fo,Ys,xn,v_,oM,iM=Re(()=>{Fo=new Map,Ys=[],xn=(e,r,t)=>{if(r&&typeof r.init=="function"&&typeof r.createInferenceSessionHandler=="function"){let s=Fo.get(e);if(s===void 0)Fo.set(e,{backend:r,priority:t});else{if(s.priority>t)return;if(s.priority===t&&s.backend!==r)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){let n=Ys.indexOf(e);n!==-1&&Ys.splice(n,1);for(let o=0;o<Ys.length;o++)if(Fo.get(Ys[o]).priority<=t){Ys.splice(o,0,e);return}Ys.push(e)}return}throw new TypeError("not a valid backend")},v_=async e=>{let r=Fo.get(e);if(!r)return"backend not found.";if(r.initialized)return r.backend;if(r.aborted)return r.error;{let t=!!r.initPromise;try{return t||(r.initPromise=r.backend.init(e)),await r.initPromise,r.initialized=!0,r.backend}catch(s){return t||(r.error=`${s}`,r.aborted=!0),r.error}finally{delete r.initPromise}}},oM=async e=>{let r=e.executionProviders||[],t=r.map(l=>typeof l=="string"?l:l.name),s=t.length===0?Ys:t,n,o=[],a=new Set;for(let l of s){let c=await v_(l);typeof c=="string"?o.push({name:l,err:c}):(n||(n=c),n===c&&a.add(l))}if(!n)throw new Error(`no available backend found. ERR: ${o.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(let{name:l,err:c}of o)t.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${c}`);let i=r.filter(l=>a.has(typeof l=="string"?l:l.name));return[n,new Proxy(e,{get:(l,c)=>c==="executionProviders"?i:Reflect.get(l,c)})]}}),lx=Re(()=>{iM()}),aM,cx=Re(()=>{aM="1.22.0-dev.20250409-89f8206ba4"}),Fl,as,lM=Re(()=>{cx(),Fl="warning",as={wasm:{},webgl:{},webgpu:{},versions:{common:aM},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Fl=e}},get logLevel(){return Fl}},Object.defineProperty(as,"logLevel",{enumerable:!0})}),Xt,ux=Re(()=>{lM(),Xt=as}),cM,uM,dx=Re(()=>{cM=(e,r)=>{let t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];let s=t.getContext("2d");if(s!=null){let n,o;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);let a=r?.format!==void 0?r.format:"RGB",i=r?.norm,l,c;i===void 0||i.mean===void 0?l=[255,255,255,255]:typeof i.mean=="number"?l=[i.mean,i.mean,i.mean,i.mean]:(l=[i.mean[0],i.mean[1],i.mean[2],0],i.mean[3]!==void 0&&(l[3]=i.mean[3])),i===void 0||i.bias===void 0?c=[0,0,0,0]:typeof i.bias=="number"?c=[i.bias,i.bias,i.bias,i.bias]:(c=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(c[3]=i.bias[3]));let p=o*n,d=0,u=p,f=p*2,_=-1;a==="RGBA"?(d=0,u=p,f=p*2,_=p*3):a==="RGB"?(d=0,u=p,f=p*2):a==="RBG"&&(d=0,f=p,u=p*2);for(let v=0;v<o;v++)for(let I=0;I<n;I++){let M=(e.data[d++]-c[0])*l[0],y=(e.data[u++]-c[1])*l[1],$=(e.data[f++]-c[2])*l[2],x=_===-1?255:(e.data[_++]-c[3])*l[3];s.fillStyle="rgba("+M+","+y+","+$+","+x+")",s.fillRect(I,v,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},uM=(e,r)=>{let t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),s;if(t!=null){let n,o,a;r?.tensorLayout!==void 0&&r.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],a=e.dims[3]):(n=e.dims[3],o=e.dims[2],a=e.dims[1]);let i=r!==void 0&&r.format!==void 0?r.format:"RGB",l=r?.norm,c,p;l===void 0||l.mean===void 0?c=[255,255,255,255]:typeof l.mean=="number"?c=[l.mean,l.mean,l.mean,l.mean]:(c=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(c[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));let d=o*n;if(r!==void 0&&(r.format!==void 0&&a===4&&r.format!=="RGBA"||a===3&&r.format!=="RGB"&&r.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let u=4,f=0,_=1,v=2,I=3,M=0,y=d,$=d*2,x=-1;i==="RGBA"?(M=0,y=d,$=d*2,x=d*3):i==="RGB"?(M=0,y=d,$=d*2):i==="RBG"&&(M=0,$=d,y=d*2),s=t.createImageData(n,o);for(let T=0;T<o*n;f+=u,_+=u,v+=u,I+=u,T++)s.data[f]=(e.data[M++]-p[0])*c[0],s.data[_]=(e.data[y++]-p[1])*c[1],s.data[v]=(e.data[$++]-p[2])*c[2],s.data[I]=x===-1?255:(e.data[x++]-p[3])*c[3]}else throw new Error("Can not access image data");return s}}),Ri,dM,pM,mM,hM,_M,px=Re(()=>{Yc(),Ri=(e,r)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(r.height===void 0||r.width===void 0)throw new Error("Image height and width must be defined");if(r.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:t,width:s}=r,n=r.norm??{mean:255,bias:0},o,a;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?a=[n.bias,n.bias,n.bias,n.bias]:a=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let i=r.format!==void 0?r.format:"RGBA",l=r.tensorFormat!==void 0&&r.tensorFormat!==void 0?r.tensorFormat:"RGB",c=t*s,p=l==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),d=4,u=0,f=1,_=2,v=3,I=0,M=c,y=c*2,$=-1;i==="RGB"&&(d=3,u=0,f=1,_=2,v=-1),l==="RGBA"?$=c*3:l==="RBG"?(I=0,y=c,M=c*2):l==="BGR"&&(y=0,M=c,I=c*2);for(let x=0;x<c;x++,u+=d,_+=d,f+=d,v+=d)p[I++]=(e[u]+a[0])/o[0],p[M++]=(e[f]+a[1])/o[1],p[y++]=(e[_]+a[2])/o[2],$!==-1&&v!==-1&&(p[$++]=(e[v]+a[3])/o[3]);return l==="RGBA"?new ts("float32",p,[1,4,t,s]):new ts("float32",p,[1,3,t,s])},dM=async(e,r)=>{let t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,s=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string",a,i=r??{},l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},c=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){let p=l();p.width=e.width,p.height=e.height;let d=c(p);if(d!=null){let u=e.height,f=e.width;if(r!==void 0&&r.resizedHeight!==void 0&&r.resizedWidth!==void 0&&(u=r.resizedHeight,f=r.resizedWidth),r!==void 0){if(i=r,r.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");i.tensorFormat="RGBA",i.height=u,i.width=f}else i.tensorFormat="RGBA",i.height=u,i.width=f;d.drawImage(e,0,0),a=d.getImageData(0,0,f,u).data}else throw new Error("Can not access image data")}else if(s){let p,d;if(r!==void 0&&r.resizedWidth!==void 0&&r.resizedHeight!==void 0?(p=r.resizedHeight,d=r.resizedWidth):(p=e.height,d=e.width),r!==void 0&&(i=r),i.format="RGBA",i.height=p,i.width=d,r!==void 0){let u=l();u.width=d,u.height=p;let f=c(u);if(f!=null)f.putImageData(e,0,0),a=f.getImageData(0,0,d,p).data;else throw new Error("Can not access image data")}else a=e.data}else if(n){if(r===void 0)throw new Error("Please provide image config with format for Imagebitmap");let p=l();p.width=e.width,p.height=e.height;let d=c(p);if(d!=null){let u=e.height,f=e.width;return d.drawImage(e,0,0,f,u),a=d.getImageData(0,0,f,u).data,i.height=u,i.width=f,Ri(a,i)}else throw new Error("Can not access image data")}else{if(o)return new Promise((p,d)=>{let u=l(),f=c(u);if(!e||!f)return d();let _=new Image;_.crossOrigin="Anonymous",_.src=e,_.onload=()=>{u.width=_.width,u.height=_.height,f.drawImage(_,0,0,u.width,u.height);let v=f.getImageData(0,0,u.width,u.height);i.height=u.height,i.width=u.width,p(Ri(v.data,i))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Ri(a,i);throw new Error("Input data provided is not supported - aborted tensor creation")},pM=(e,r)=>{let{width:t,height:s,download:n,dispose:o}=r,a=[1,s,t,4];return new ts({location:"texture",type:"float32",texture:e,dims:a,download:n,dispose:o})},mM=(e,r)=>{let{dataType:t,dims:s,download:n,dispose:o}=r;return new ts({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:s,download:n,dispose:o})},hM=(e,r)=>{let{dataType:t,dims:s,download:n,dispose:o}=r;return new ts({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:s,download:n,dispose:o})},_M=(e,r,t)=>new ts({location:"cpu-pinned",type:e,data:r,dims:t??[r.length]})}),yn,Uo,Ol,fM,mx=Re(()=>{yn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Uo=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Ol=!1,fM=()=>{if(!Ol){Ol=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,r=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,s=typeof t<"u"&&t.from;e&&(yn.set("int64",BigInt64Array),Uo.set(BigInt64Array,"int64")),r&&(yn.set("uint64",BigUint64Array),Uo.set(BigUint64Array,"uint64")),s?(yn.set("float16",t),Uo.set(t,"float16")):yn.set("float16",Uint16Array)}}}),gM,wM,hx=Re(()=>{Yc(),gM=e=>{let r=1;for(let t=0;t<e.length;t++){let s=e[t];if(typeof s!="number"||!Number.isSafeInteger(s))throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);if(s<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);r*=s}return r},wM=(e,r)=>{switch(e.location){case"cpu":return new ts(e.type,e.data,r);case"cpu-pinned":return new ts({location:"cpu-pinned",data:e.data,type:e.type,dims:r});case"texture":return new ts({location:"texture",texture:e.texture,type:e.type,dims:r});case"gpu-buffer":return new ts({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:r});case"ml-tensor":return new ts({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:r});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),ts,Yc=Re(()=>{dx(),px(),mx(),hx(),ts=class{constructor(e,r,t){fM();let s,n;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,s=e.type,n=e.dims,e.location){case"cpu-pinned":{let a=yn.get(s);if(!a)throw new TypeError(`unsupported type "${s}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(s!=="float32")throw new TypeError(`unsupported type "${s}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(s!=="float32"&&s!=="float16"&&s!=="int32"&&s!=="int64"&&s!=="uint32"&&s!=="uint8"&&s!=="bool"&&s!=="uint4"&&s!=="int4")throw new TypeError(`unsupported type "${s}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(s!=="float32"&&s!=="float16"&&s!=="int32"&&s!=="int64"&&s!=="uint32"&&s!=="uint64"&&s!=="int8"&&s!=="uint8"&&s!=="bool"&&s!=="uint4"&&s!=="int4")throw new TypeError(`unsupported type "${s}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,i;if(typeof e=="string")if(s=e,i=t,e==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");a=r}else{let l=yn.get(e);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(r)){if(e==="float16"&&l===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${l.name} as data.`);e==="uint64"||e==="int64"?a=l.from(r,BigInt):a=l.from(r)}else if(r instanceof l)a=r;else if(r instanceof Uint8ClampedArray)if(e==="uint8")a=Uint8Array.from(r);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(e==="float16"&&r instanceof Uint16Array&&l!==Uint16Array)a=new globalThis.Float16Array(r.buffer,r.byteOffset,r.length);else throw new TypeError(`A ${s} tensor's data must be type of ${l}`)}else if(i=r,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let l=typeof e[0];if(l==="string")s="string",a=e;else if(l==="boolean")s="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else if(e instanceof Uint8ClampedArray)s="uint8",a=Uint8Array.from(e);else{let l=Uo.get(e.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);s=l,a=e}if(i===void 0)i=[a.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");n=i,this.cpuData=a,this.dataLocation="cpu"}let o=gM(n);if(this.cpuData&&o!==this.cpuData.length&&!((s==="uint4"||s==="int4")&&Math.ceil(o/2)===this.cpuData.length))throw new Error(`Tensor's size(${o}) does not match data length(${this.cpuData.length}).`);this.type=s,this.dims=n,this.size=o}static async fromImage(e,r){return dM(e,r)}static fromTexture(e,r){return pM(e,r)}static fromGpuBuffer(e,r){return mM(e,r)}static fromMLTensor(e,r){return hM(e,r)}static fromPinnedBuffer(e,r,t){return _M(e,r,t)}toDataURL(e){return cM(this,e)}toImageData(e){return uM(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,e&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return wM(this,e)}}}),vs,MM=Re(()=>{Yc(),vs=ts}),Qo,Dl,Ts,cs,bM=Re(()=>{lM(),Qo=(e,r)=>{(typeof as.trace>"u"?!as.wasm.trace:!as.trace)||console.timeStamp(`${e}::ORT::${r}`)},Dl=(e,r)=>{let t=new Error().stack?.split(/\r\n|\r|\n/g)||[],s=!1;for(let n=0;n<t.length;n++){if(s&&!t[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${t[n].trim().split(" ")[1]}`;r&&(o+=`::${r}`),Qo("CPU",o);return}t[n].includes("TRACE_FUNC")&&(s=!0)}},Ts=e=>{(typeof as.trace>"u"?!as.wasm.trace:!as.trace)||Dl("BEGIN",e)},cs=e=>{(typeof as.trace>"u"?!as.wasm.trace:!as.trace)||Dl("END",e)}}),yM,_x=Re(()=>{iM(),MM(),bM(),yM=class vM{constructor(r){this.handler=r}async run(r,t,s){Ts();let n={},o={};if(typeof r!="object"||r===null||r instanceof vs||Array.isArray(r))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof vs)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let c of t){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,p=Object.getOwnPropertyNames(t);for(let d of this.outputNames)if(p.indexOf(d)!==-1){let u=t[d];(u===null||u instanceof vs)&&(c=!0,a=!1,n[d]=u)}if(c){if(typeof s=="object"&&s!==null)o=s;else if(typeof s<"u")throw new TypeError("'options' must be an object.")}else o=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof r[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(a)for(let c of this.outputNames)n[c]=null;let i=await this.handler.run(r,n,o),l={};for(let c in i)if(Object.hasOwnProperty.call(i,c)){let p=i[c];p instanceof vs?l[c]=p:l[c]=new vs(p.type,p.data,p.dims)}return cs(),l}async release(){return this.handler.dispose()}static async create(r,t,s,n){Ts();let o,a={};if(typeof r=="string"){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof Uint8Array){if(o=r,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(r instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&r instanceof SharedArrayBuffer){let p=r,d=0,u=r.byteLength;if(typeof t=="object"&&t!==null)a=t;else if(typeof t=="number"){if(d=t,!Number.isSafeInteger(d))throw new RangeError("'byteOffset' must be an integer.");if(d<0||d>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(u=r.byteLength-d,typeof s=="number"){if(u=s,!Number.isSafeInteger(u))throw new RangeError("'byteLength' must be an integer.");if(u<=0||d+u>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-d}].`);if(typeof n=="object"&&n!==null)a=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof s<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(p,d,u)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[i,l]=await oM(a),c=await i.createInferenceSessionHandler(o,l);return cs(),new vM(c)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),Zc,fx=Re(()=>{_x(),Zc=yM}),gx=Re(()=>{}),wx=Re(()=>{}),Mx=Re(()=>{}),bx=Re(()=>{}),xM={};ro(xM,{InferenceSession:()=>Zc,TRACE:()=>Qo,TRACE_FUNC_BEGIN:()=>Ts,TRACE_FUNC_END:()=>cs,Tensor:()=>vs,env:()=>Xt,registerBackend:()=>xn});var Es=Re(()=>{lx(),ux(),fx(),MM(),gx(),wx(),bM(),Mx(),bx()}),eu=Re(()=>{}),TM={};ro(TM,{default:()=>EM});var Ll,zl,EM,yx=Re(()=>{k0(),Cn(),tu(),Ll="ort-wasm-proxy-worker",zl=globalThis.self?.name===Ll,zl&&(self.onmessage=e=>{let{type:r,in:t}=e.data;try{switch(r){case"init-wasm":ru(t.wasm).then(()=>{bu(t).then(()=>{postMessage({type:r})},s=>{postMessage({type:r,err:s})})},s=>{postMessage({type:r,err:s})});break;case"init-ep":{let{epName:s,env:n}=t;yu(n,s).then(()=>{postMessage({type:r})},o=>{postMessage({type:r,err:o})});break}case"copy-from":{let{buffer:s}=t,n=ca(s);postMessage({type:r,out:n});break}case"create":{let{model:s,options:n}=t;vu(s,n).then(o=>{postMessage({type:r,out:o})},o=>{postMessage({type:r,err:o})});break}case"release":xu(t),postMessage({type:r});break;case"run":{let{sessionId:s,inputIndices:n,inputs:o,outputIndices:a,options:i}=t;Tu(s,n,o,a,new Array(a.length).fill(null),i).then(l=>{l.some(c=>c[3]!=="cpu")?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:l},Pu([...o,...l]))},l=>{postMessage({type:r,err:l})});break}case"end-profiling":Eu(t),postMessage({type:r});break;default:}}catch(s){postMessage({type:r,err:s})}}),EM=zl?null:e=>new Worker(e??es,{type:"module",name:Ll})}),PM={};ro(PM,{default:()=>CM});var Bl,Rl,CM,x_,vx=Re(()=>{Rl=(Bl=import.meta.url,async function(e={}){var r,t,s=e,n=new Promise((m,P)=>{r=m,t=P}),o=typeof window=="object",a=typeof WorkerGlobalScope<"u",i=a&&self.name?.startsWith("em-pthread");s.mountExternalData=(m,P)=>{m.startsWith("./")&&(m=m.substring(2)),(s.Eb||(s.Eb=new Map)).set(m,P)},s.unmountExternalData=()=>{delete s.Eb};var l=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,pc:!0}).buffer.constructor;let c=m=>async(...P)=>{try{if(s.Fb)throw Error("Session already started");let A=s.Fb={dc:P[0],errors:[]},L=await m(...P);if(s.Fb!==A)throw Error("Session mismatch");s.Jb?.flush();let U=A.errors;if(0<U.length){let ae=await Promise.all(U);if(ae=ae.filter(Te=>Te),0<ae.length)throw Error(ae.join(`
`))}return L}finally{s.Fb=null}};s.jsepInit=(m,P)=>{if(m==="webgpu"){[s.Jb,s.Ub,s.Yb,s.Kb,s.Xb,s.jb,s.Zb,s.ac,s.Vb,s.Wb,s.$b]=P;let A=s.Jb;s.jsepRegisterBuffer=(L,U,ae,Te)=>A.registerBuffer(L,U,ae,Te),s.jsepGetBuffer=L=>A.getBuffer(L),s.jsepCreateDownloader=(L,U,ae)=>A.createDownloader(L,U,ae),s.jsepOnCreateSession=L=>{A.onCreateSession(L)},s.jsepOnReleaseSession=L=>{A.onReleaseSession(L)},s.jsepOnRunStart=L=>A.onRunStart(L),s.bc=(L,U)=>{A.upload(L,U)}}else if(m==="webnn"){let A=P[0];[s.nc,s.Nb,s.webnnEnsureTensor,s.Ob,s.webnnDownloadTensor]=P.slice(1),s.webnnReleaseTensorId=s.Nb,s.webnnUploadTensor=s.Ob,s.webnnOnRunStart=L=>A.onRunStart(L),s.webnnOnRunEnd=A.onRunEnd.bind(A),s.webnnRegisterMLContext=(L,U)=>{A.registerMLContext(L,U)},s.webnnOnReleaseSession=L=>{A.onReleaseSession(L)},s.webnnCreateMLTensorDownloader=(L,U)=>A.createMLTensorDownloader(L,U),s.webnnRegisterMLTensor=(L,U,ae,Te)=>A.registerMLTensor(L,U,ae,Te),s.webnnCreateMLContext=L=>A.createMLContext(L),s.webnnRegisterMLConstant=(L,U,ae,Te,De,Ge)=>A.registerMLConstant(L,U,ae,Te,De,s.Eb,Ge),s.webnnRegisterGraphInput=A.registerGraphInput.bind(A),s.webnnIsGraphInput=A.isGraphInput.bind(A),s.webnnCreateTemporaryTensor=A.createTemporaryTensor.bind(A),s.webnnIsInt64Supported=A.isInt64Supported.bind(A)}};let p=()=>{let m=(P,A,L)=>(...U)=>{let ae=Vt,Te=A?.();U=P(...U);let De=A?.();return Te!==De&&(P=De,L(Te),A=L=null),Vt!=ae?new Promise((Ge,ot)=>{dr={resolve:Ge,reject:ot}}):U};(()=>{for(let P of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])s[P]=m(s[P],()=>s[P],A=>s[P]=A)})(),c!==void 0&&(s._OrtRun=c(s._OrtRun),s._OrtRunWithBinding=c(s._OrtRunWithBinding)),p=void 0};s.asyncInit=()=>{p?.()};var d,u,f=Object.assign({},s),_=(m,P)=>{throw P},v="";(o||a)&&(a?v=self.location.href:typeof document<"u"&&document.currentScript&&(v=document.currentScript.src),Bl&&(v=Bl),v=v.startsWith("blob:")?"":v.slice(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1),a&&(u=m=>{var P=new XMLHttpRequest;return P.open("GET",m,!1),P.responseType="arraybuffer",P.send(null),new Uint8Array(P.response)}),d=async m=>{if(le(m))return new Promise((A,L)=>{var U=new XMLHttpRequest;U.open("GET",m,!0),U.responseType="arraybuffer",U.onload=()=>{U.status==200||U.status==0&&U.response?A(U.response):L(U.status)},U.onerror=L,U.send(null)});var P=await fetch(m,{credentials:"same-origin"});if(P.ok)return P.arrayBuffer();throw Error(P.status+" : "+P.url)});var I=console.log.bind(console),M=console.error.bind(console),y=I,$=M;Object.assign(s,f),f=null;var x,T,E,b,S,D,O,H,G,z,Z,Q,Y,re=s.wasmBinary,te=!1,le=m=>m.startsWith("file://");function ue(){return x.buffer!=b.buffer&&ve(),b}function B(){return x.buffer!=b.buffer&&ve(),S}function F(){return x.buffer!=b.buffer&&ve(),D}function K(){return x.buffer!=b.buffer&&ve(),O}function j(){return x.buffer!=b.buffer&&ve(),H}function ie(){return x.buffer!=b.buffer&&ve(),G}function ke(){return x.buffer!=b.buffer&&ve(),z}function be(){return x.buffer!=b.buffer&&ve(),Y}if(i){let m=function(P){try{var A=P.data,L=A.Bb;if(L==="load"){let U=[];self.onmessage=ae=>U.push(ae),self.startWorker=()=>{postMessage({Bb:"loaded"});for(let ae of U)m(ae);self.onmessage=m};for(let ae of A.Rb)s[ae]&&!s[ae].proxy||(s[ae]=(...Te)=>{postMessage({Bb:"callHandler",Qb:ae,args:Te})},ae=="print"&&(y=s[ae]),ae=="printErr"&&($=s[ae]));x=A.kc,ve(),Fe(A.lc)}else if(L==="run"){sr(A.Ab),Ln(A.Ab,0,0,1,0,0),Gr(),ee(A.Ab),Ke||(yo(),Ke=!0);try{Ir(A.fc,A.Hb)}catch(U){if(U!="unwind")throw U}}else A.target!=="setimmediate"&&(L==="checkMailbox"?Ke&&se():L&&($(`worker: received unknown command ${L}`),$(A)))}catch(U){throw vo(),U}};var Fe,Ke=!1;$=function(...P){P=P.join(" "),console.error(P)},self.alert=function(...P){postMessage({Bb:"alert",text:P.join(" "),ic:dn()})},self.onunhandledrejection=P=>{throw P.reason||P},self.onmessage=m}function ve(){var m=x.buffer;s.HEAP8=b=new Int8Array(m),s.HEAP16=D=new Int16Array(m),s.HEAPU8=S=new Uint8Array(m),s.HEAPU16=O=new Uint16Array(m),s.HEAP32=H=new Int32Array(m),s.HEAPU32=G=new Uint32Array(m),s.HEAPF32=z=new Float32Array(m),s.HEAPF64=Y=new Float64Array(m),s.HEAP64=Z=new BigInt64Array(m),s.HEAPU64=Q=new BigUint64Array(m)}function q(){i?startWorker(s):ut.Ca()}i||(x=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),ve());var N,de=0,xe=null;function $e(){if(--de==0&&xe){var m=xe;xe=null,m()}}function ye(m){throw $(m="Aborted("+m+")"),te=!0,m=new WebAssembly.RuntimeError(m+". Build with -sASSERTIONS for more info."),t(m),m}function fe(){return{a:{L:Ae,Aa:ge,b:Ws,$:Qr,A:Tt,pa:Cs,X:V,Z:J,qa:ne,na:me,ga:Se,ma:tt,J:lt,Y:We,V:St,oa:$t,W:er,va:Kr,E:ds,Q:Ss,O:$s,D:Rr,u:Le,r:Be,P:st,z:$n,R:ce,ja:k,T:he,aa:qe,M:Qe,F:Je,ia:ee,sa:Ue,t:tr,Ba:_r,w:ms,o:os,l:pr,c:Hr,n:Vr,j:Jo,v:Yo,p:Zo,f:ei,s:Ks,m:ti,e:ri,k:si,i:ni,g:oi,d:Hs,da:ii,ea:ai,fa:ao,ba:lo,ca:co,N:kn,xa:ci,ua,h:po,C:Fn,G:ui,ta:uo,x:di,ra:pi,U:mi,q:li,y:hi,K:_i,S:fi,za:On,ya:ho,ka:_o,la:gi,_:Ye,B:fo,I:wi,ha:go,H:Mo,a:x,wa:Ze}}}var Ee={829644:(m,P,A,L,U)=>{if(s===void 0||!s.Eb)return 1;if((m=Ut(Number(m>>>0))).startsWith("./")&&(m=m.substring(2)),!(m=s.Eb.get(m)))return 2;if(P=Number(P>>>0),A=Number(A>>>0),L=Number(L>>>0),P+A>m.byteLength)return 3;try{let ae=m.subarray(P,P+A);switch(U){case 0:B().set(ae,L>>>0);break;case 1:s.mc?s.mc(L,ae):s.bc(L,ae);break;default:return 4}return 0}catch{return 4}},830468:(m,P,A)=>{s.Ob(m,B().subarray(P>>>0,P+A>>>0))},830532:()=>s.nc(),830574:m=>{s.Nb(m)},830611:()=>{s.Vb()},830642:()=>{s.Wb()},830671:()=>{s.$b()},830696:m=>s.Ub(m),830729:m=>s.Yb(m),830761:(m,P,A)=>{s.Kb(Number(m),Number(P),Number(A),!0)},830824:(m,P,A)=>{s.Kb(Number(m),Number(P),Number(A))},830881:()=>typeof wasmOffsetConverter<"u",830938:m=>{s.jb("Abs",m,void 0)},830989:m=>{s.jb("Neg",m,void 0)},831040:m=>{s.jb("Floor",m,void 0)},831093:m=>{s.jb("Ceil",m,void 0)},831145:m=>{s.jb("Reciprocal",m,void 0)},831203:m=>{s.jb("Sqrt",m,void 0)},831255:m=>{s.jb("Exp",m,void 0)},831306:m=>{s.jb("Erf",m,void 0)},831357:m=>{s.jb("Sigmoid",m,void 0)},831412:(m,P,A)=>{s.jb("HardSigmoid",m,{alpha:P,beta:A})},831491:m=>{s.jb("Log",m,void 0)},831542:m=>{s.jb("Sin",m,void 0)},831593:m=>{s.jb("Cos",m,void 0)},831644:m=>{s.jb("Tan",m,void 0)},831695:m=>{s.jb("Asin",m,void 0)},831747:m=>{s.jb("Acos",m,void 0)},831799:m=>{s.jb("Atan",m,void 0)},831851:m=>{s.jb("Sinh",m,void 0)},831903:m=>{s.jb("Cosh",m,void 0)},831955:m=>{s.jb("Asinh",m,void 0)},832008:m=>{s.jb("Acosh",m,void 0)},832061:m=>{s.jb("Atanh",m,void 0)},832114:m=>{s.jb("Tanh",m,void 0)},832166:m=>{s.jb("Not",m,void 0)},832217:(m,P,A)=>{s.jb("Clip",m,{min:P,max:A})},832286:m=>{s.jb("Clip",m,void 0)},832338:(m,P)=>{s.jb("Elu",m,{alpha:P})},832396:m=>{s.jb("Gelu",m,void 0)},832448:m=>{s.jb("Relu",m,void 0)},832500:(m,P)=>{s.jb("LeakyRelu",m,{alpha:P})},832564:(m,P)=>{s.jb("ThresholdedRelu",m,{alpha:P})},832634:(m,P)=>{s.jb("Cast",m,{to:P})},832692:m=>{s.jb("Add",m,void 0)},832743:m=>{s.jb("Sub",m,void 0)},832794:m=>{s.jb("Mul",m,void 0)},832845:m=>{s.jb("Div",m,void 0)},832896:m=>{s.jb("Pow",m,void 0)},832947:m=>{s.jb("Equal",m,void 0)},833e3:m=>{s.jb("Greater",m,void 0)},833055:m=>{s.jb("GreaterOrEqual",m,void 0)},833117:m=>{s.jb("Less",m,void 0)},833169:m=>{s.jb("LessOrEqual",m,void 0)},833228:(m,P,A,L,U)=>{s.jb("ReduceMean",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},833403:(m,P,A,L,U)=>{s.jb("ReduceMax",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},833577:(m,P,A,L,U)=>{s.jb("ReduceMin",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},833751:(m,P,A,L,U)=>{s.jb("ReduceProd",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},833926:(m,P,A,L,U)=>{s.jb("ReduceSum",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},834100:(m,P,A,L,U)=>{s.jb("ReduceL1",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},834273:(m,P,A,L,U)=>{s.jb("ReduceL2",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},834446:(m,P,A,L,U)=>{s.jb("ReduceLogSum",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},834623:(m,P,A,L,U)=>{s.jb("ReduceSumSquare",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},834803:(m,P,A,L,U)=>{s.jb("ReduceLogSumExp",m,{keepDims:!!P,noopWithEmptyAxes:!!A,axes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},834983:m=>{s.jb("Where",m,void 0)},835036:(m,P,A)=>{s.jb("Transpose",m,{perm:P?Array.from(j().subarray(Number(P)>>>0,Number(A)>>>0)):[]})},835160:(m,P,A,L)=>{s.jb("DepthToSpace",m,{blocksize:P,mode:Ut(A),format:L?"NHWC":"NCHW"})},835293:(m,P,A,L)=>{s.jb("DepthToSpace",m,{blocksize:P,mode:Ut(A),format:L?"NHWC":"NCHW"})},835426:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr,Rs)=>{s.jb("ConvTranspose",m,{format:Ge?"NHWC":"NCHW",autoPad:P,dilations:[A],group:L,kernelShape:[U],pads:[ae,Te],strides:[De],wIsConst:()=>!!ue()[ot>>>0],outputPadding:gt?Array.from(j().subarray(Number(gt)>>>0,Number(At)>>>0)):[],outputShape:Lt?Array.from(j().subarray(Number(Lt)>>>0,Number(Tr)>>>0)):[],activation:Ut(Rs)})},835859:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr)=>{s.jb("ConvTranspose",m,{format:De?"NHWC":"NCHW",autoPad:P,dilations:Array.from(j().subarray(Number(A)>>>0,2+(Number(A)>>>0)>>>0)),group:L,kernelShape:Array.from(j().subarray(Number(U)>>>0,2+(Number(U)>>>0)>>>0)),pads:Array.from(j().subarray(Number(ae)>>>0,4+(Number(ae)>>>0)>>>0)),strides:Array.from(j().subarray(Number(Te)>>>0,2+(Number(Te)>>>0)>>>0)),wIsConst:()=>!!ue()[Ge>>>0],outputPadding:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],outputShape:At?Array.from(j().subarray(Number(At)>>>0,Number(Lt)>>>0)):[],activation:Ut(Tr)})},836520:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr,Rs)=>{s.jb("ConvTranspose",m,{format:Ge?"NHWC":"NCHW",autoPad:P,dilations:[A],group:L,kernelShape:[U],pads:[ae,Te],strides:[De],wIsConst:()=>!!ue()[ot>>>0],outputPadding:gt?Array.from(j().subarray(Number(gt)>>>0,Number(At)>>>0)):[],outputShape:Lt?Array.from(j().subarray(Number(Lt)>>>0,Number(Tr)>>>0)):[],activation:Ut(Rs)})},836953:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr)=>{s.jb("ConvTranspose",m,{format:De?"NHWC":"NCHW",autoPad:P,dilations:Array.from(j().subarray(Number(A)>>>0,2+(Number(A)>>>0)>>>0)),group:L,kernelShape:Array.from(j().subarray(Number(U)>>>0,2+(Number(U)>>>0)>>>0)),pads:Array.from(j().subarray(Number(ae)>>>0,4+(Number(ae)>>>0)>>>0)),strides:Array.from(j().subarray(Number(Te)>>>0,2+(Number(Te)>>>0)>>>0)),wIsConst:()=>!!ue()[Ge>>>0],outputPadding:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],outputShape:At?Array.from(j().subarray(Number(At)>>>0,Number(Lt)>>>0)):[],activation:Ut(Tr)})},837614:(m,P)=>{s.jb("GlobalAveragePool",m,{format:P?"NHWC":"NCHW"})},837705:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr)=>{s.jb("AveragePool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:U,dilations:ae?Array.from(j().subarray(Number(ae)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(Ge)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Lt)>>>0)):[]})},838184:(m,P)=>{s.jb("GlobalAveragePool",m,{format:P?"NHWC":"NCHW"})},838275:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr)=>{s.jb("AveragePool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:U,dilations:ae?Array.from(j().subarray(Number(ae)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(Ge)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Lt)>>>0)):[]})},838754:(m,P)=>{s.jb("GlobalMaxPool",m,{format:P?"NHWC":"NCHW"})},838841:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr)=>{s.jb("MaxPool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:U,dilations:ae?Array.from(j().subarray(Number(ae)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(Ge)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Lt)>>>0)):[]})},839316:(m,P)=>{s.jb("GlobalMaxPool",m,{format:P?"NHWC":"NCHW"})},839403:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr)=>{s.jb("MaxPool",m,{format:Tr?"NHWC":"NCHW",auto_pad:P,ceil_mode:A,count_include_pad:L,storage_order:U,dilations:ae?Array.from(j().subarray(Number(ae)>>>0,Number(Te)>>>0)):[],kernel_shape:De?Array.from(j().subarray(Number(De)>>>0,Number(Ge)>>>0)):[],pads:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],strides:At?Array.from(j().subarray(Number(At)>>>0,Number(Lt)>>>0)):[]})},839878:(m,P,A,L,U)=>{s.jb("Gemm",m,{alpha:P,beta:A,transA:L,transB:U})},839982:m=>{s.jb("MatMul",m,void 0)},840036:(m,P,A,L)=>{s.jb("ArgMax",m,{keepDims:!!P,selectLastIndex:!!A,axis:L})},840144:(m,P,A,L)=>{s.jb("ArgMin",m,{keepDims:!!P,selectLastIndex:!!A,axis:L})},840252:(m,P)=>{s.jb("Softmax",m,{axis:P})},840315:(m,P)=>{s.jb("Concat",m,{axis:P})},840375:(m,P,A,L,U)=>{s.jb("Split",m,{axis:P,numOutputs:A,splitSizes:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},840531:m=>{s.jb("Expand",m,void 0)},840585:(m,P)=>{s.jb("Gather",m,{axis:Number(P)})},840656:(m,P)=>{s.jb("GatherElements",m,{axis:Number(P)})},840735:(m,P)=>{s.jb("GatherND",m,{batch_dims:Number(P)})},840814:(m,P,A,L,U,ae,Te,De,Ge,ot,gt)=>{s.jb("Resize",m,{antialias:P,axes:A?Array.from(j().subarray(Number(A)>>>0,Number(L)>>>0)):[],coordinateTransformMode:Ut(U),cubicCoeffA:ae,excludeOutside:Te,extrapolationValue:De,keepAspectRatioPolicy:Ut(Ge),mode:Ut(ot),nearestMode:Ut(gt)})},841176:(m,P,A,L,U,ae,Te)=>{s.jb("Slice",m,{starts:P?Array.from(j().subarray(Number(P)>>>0,Number(A)>>>0)):[],ends:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[],axes:ae?Array.from(j().subarray(Number(ae)>>>0,Number(Te)>>>0)):[]})},841440:m=>{s.jb("Tile",m,void 0)},841492:(m,P,A)=>{s.jb("InstanceNormalization",m,{epsilon:P,format:A?"NHWC":"NCHW"})},841606:(m,P,A)=>{s.jb("InstanceNormalization",m,{epsilon:P,format:A?"NHWC":"NCHW"})},841720:m=>{s.jb("Range",m,void 0)},841773:(m,P)=>{s.jb("Einsum",m,{equation:Ut(P)})},841854:(m,P,A,L,U)=>{s.jb("Pad",m,{mode:P,value:A,pads:L?Array.from(j().subarray(Number(L)>>>0,Number(U)>>>0)):[]})},841997:(m,P,A,L,U,ae)=>{s.jb("BatchNormalization",m,{epsilon:P,momentum:A,spatial:!!U,trainingMode:!!L,format:ae?"NHWC":"NCHW"})},842166:(m,P,A,L,U,ae)=>{s.jb("BatchNormalization",m,{epsilon:P,momentum:A,spatial:!!U,trainingMode:!!L,format:ae?"NHWC":"NCHW"})},842335:(m,P,A)=>{s.jb("CumSum",m,{exclusive:Number(P),reverse:Number(A)})},842432:(m,P,A)=>{s.jb("DequantizeLinear",m,{axis:P,blockSize:A})},842522:(m,P,A,L,U)=>{s.jb("GridSample",m,{align_corners:P,mode:Ut(A),padding_mode:Ut(L),format:U?"NHWC":"NCHW"})},842692:(m,P,A,L,U)=>{s.jb("GridSample",m,{align_corners:P,mode:Ut(A),padding_mode:Ut(L),format:U?"NHWC":"NCHW"})},842862:(m,P)=>{s.jb("ScatterND",m,{reduction:Ut(P)})},842947:(m,P,A,L,U,ae,Te,De,Ge)=>{s.jb("Attention",m,{numHeads:P,isUnidirectional:A,maskFilterValue:L,scale:U,doRotary:ae,qkvHiddenSizes:Te?Array.from(j().subarray(Number(De)>>>0,Number(De)+Te>>>0)):[],pastPresentShareBuffer:!!Ge})},843219:m=>{s.jb("BiasAdd",m,void 0)},843274:m=>{s.jb("BiasSplitGelu",m,void 0)},843335:m=>{s.jb("FastGelu",m,void 0)},843391:(m,P,A,L,U,ae,Te,De,Ge,ot,gt,At,Lt,Tr,Rs,$o)=>{s.jb("Conv",m,{format:At?"NHWC":"NCHW",auto_pad:P,dilations:A?Array.from(j().subarray(Number(A)>>>0,Number(L)>>>0)):[],group:U,kernel_shape:ae?Array.from(j().subarray(Number(ae)>>>0,Number(Te)>>>0)):[],pads:De?Array.from(j().subarray(Number(De)>>>0,Number(Ge)>>>0)):[],strides:ot?Array.from(j().subarray(Number(ot)>>>0,Number(gt)>>>0)):[],w_is_const:()=>!!ue()[Number(Lt)>>>0],activation:Ut(Tr),activation_params:Rs?Array.from(ke().subarray(Number(Rs)>>>0,Number($o)>>>0)):[]})},843975:m=>{s.jb("Gelu",m,void 0)},844027:(m,P,A,L,U,ae,Te,De,Ge)=>{s.jb("GroupQueryAttention",m,{numHeads:P,kvNumHeads:A,scale:L,softcap:U,doRotary:ae,rotaryInterleaved:Te,smoothSoftmax:De,localWindowSize:Ge})},844244:(m,P,A,L)=>{s.jb("LayerNormalization",m,{axis:P,epsilon:A,simplified:!!L})},844355:(m,P,A,L)=>{s.jb("LayerNormalization",m,{axis:P,epsilon:A,simplified:!!L})},844466:(m,P,A,L,U,ae)=>{s.jb("MatMulNBits",m,{k:P,n:A,accuracyLevel:L,bits:U,blockSize:ae})},844593:(m,P,A,L,U,ae)=>{s.jb("MultiHeadAttention",m,{numHeads:P,isUnidirectional:A,maskFilterValue:L,scale:U,doRotary:ae})},844752:(m,P)=>{s.jb("QuickGelu",m,{alpha:P})},844816:(m,P,A,L,U)=>{s.jb("RotaryEmbedding",m,{interleaved:!!P,numHeads:A,rotaryEmbeddingDim:L,scale:U})},844955:(m,P,A)=>{s.jb("SkipLayerNormalization",m,{epsilon:P,simplified:!!A})},845057:(m,P,A)=>{s.jb("SkipLayerNormalization",m,{epsilon:P,simplified:!!A})},845159:(m,P,A,L)=>{s.jb("GatherBlockQuantized",m,{gatherAxis:P,quantizeAxis:A,blockSize:L})},845280:m=>{s.Zb(m)},845314:(m,P)=>s.ac(Number(m),Number(P),s.Fb.dc,s.Fb.errors)};function ge(m,P,A){return Yr(async()=>{await s.Xb(Number(m),Number(P),Number(A))})}function Ae(){return typeof wasmOffsetConverter<"u"}class Oe{name="ExitStatus";constructor(P){this.message=`Program terminated with exit(${P})`,this.status=P}}var He=m=>{m.terminate(),m.onmessage=()=>{}},Me=[],rt=m=>{et.length==0&&(Lr(),Dr(et[0]));var P=et.pop();if(!P)return 6;Ct.push(P),ht[m.Ab]=P,P.Ab=m.Ab;var A={Bb:"run",fc:m.ec,Hb:m.Hb,Ab:m.Ab};return P.postMessage(A,m.Mb),0},Ne=0,je=(m,P,...A)=>{for(var L=2*A.length,U=Nn(),ae=jn(8*L),Te=ae>>>3,De=0;De<A.length;De++){var Ge=A[De];typeof Ge=="bigint"?(Z[Te+2*De]=1n,Z[Te+2*De+1]=Ge):(Z[Te+2*De]=0n,be()[Te+2*De+1>>>0]=Ge)}return m=zn(m,0,L,ae,P),Qs(U),m};function Ze(m){if(i)return je(0,1,m);if(E=m,!(0<Ne)){for(var P of Ct)He(P);for(P of et)He(P);et=[],Ct=[],ht={},te=!0}_(0,new Oe(m))}function Xe(m){if(i)return je(1,0,m);Ye(m)}var Ye=m=>{if(E=m,i)throw Xe(m),"unwind";Ze(m)},et=[],Ct=[],It=[],ht={},br=m=>{var P=m.Ab;delete ht[P],et.push(m),Ct.splice(Ct.indexOf(m),1),m.Ab=0,xo(P)};function Gr(){It.forEach(m=>m())}var Dr=m=>new Promise(P=>{m.onmessage=U=>{var ae=(U=U.data).Bb;if(U.Gb&&U.Gb!=dn()){var Te=ht[U.Gb];Te?Te.postMessage(U,U.Mb):$(`Internal error! Worker sent a message "${ae}" to target pthread ${U.Gb}, but that thread no longer exists!`)}else ae==="checkMailbox"?se():ae==="spawnThread"?rt(U):ae==="cleanupThread"?br(ht[U.hc]):ae==="loaded"?(m.loaded=!0,P(m)):ae==="alert"?alert(`Thread ${U.ic}: ${U.text}`):U.target==="setimmediate"?m.postMessage(U):ae==="callHandler"?s[U.Qb](...U.args):ae&&$(`worker sent an unknown command ${ae}`)},m.onerror=U=>{throw $(`worker sent an error! ${U.filename}:${U.lineno}: ${U.message}`),U};var A,L=[];for(A of[])s.propertyIsEnumerable(A)&&L.push(A);m.postMessage({Bb:"load",Rb:L,kc:x,lc:T})});function Lr(){var m=new Worker((()=>{let P=URL;return import.meta.url>"file:"&&import.meta.url<"file;"?new P("ort.bundle.min.mjs",import.meta.url):new URL(import.meta.url)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});et.push(m)}var sr=m=>{ve();var P=ie()[m+52>>>2>>>0];m=ie()[m+56>>>2>>>0],Eo(P,P-m),Qs(P)},Ir=(m,P)=>{Ne=0,m=Vn(m,P),0<Ne?E=m:Bn(m)};class Us{constructor(P){this.Ib=P-24}}function Ws(m,P,A){var L=new Us(m>>>=0);throw P>>>=0,A>>>=0,ie()[L.Ib+16>>>2>>>0]=0,ie()[L.Ib+4>>>2>>>0]=P,ie()[L.Ib+8>>>2>>>0]=A,m}function Os(m,P,A,L){return i?je(2,1,m,P,A,L):Qr(m,P,A,L)}function Qr(m,P,A,L){if(m>>>=0,A>>>=0,L>>>=0,l===void 0)return 6;var U=[];return i&&U.length===0?Os(m,P>>>=0,A,L):(m={ec:A,Ab:m,Hb:L,Mb:U},i?(m.Bb="spawnThread",postMessage(m,U),0):rt(m))}var pt=typeof TextDecoder<"u"?new TextDecoder:void 0,Ps=(m,P=0,A=NaN)=>{var L=(P>>>=0)+A;for(A=P;m[A]&&!(A>=L);)++A;if(16<A-P&&m.buffer&&pt)return pt.decode(m.buffer instanceof ArrayBuffer?m.subarray(P,A):m.slice(P,A));for(L="";P<A;){var U=m[P++];if(128&U){var ae=63&m[P++];if((224&U)==192)L+=String.fromCharCode((31&U)<<6|ae);else{var Te=63&m[P++];65536>(U=(240&U)==224?(15&U)<<12|ae<<6|Te:(7&U)<<18|ae<<12|Te<<6|63&m[P++])?L+=String.fromCharCode(U):(U-=65536,L+=String.fromCharCode(55296|U>>10,56320|1023&U))}}else L+=String.fromCharCode(U)}return L},Ut=(m,P)=>(m>>>=0)?Ps(B(),m,P):"";function Tt(m,P,A){return i?je(3,1,m,P,A):0}function Cs(m,P){if(i)return je(4,1,m,P)}var C=m=>{for(var P=0,A=0;A<m.length;++A){var L=m.charCodeAt(A);127>=L?P++:2047>=L?P+=2:55296<=L&&57343>=L?(P+=4,++A):P+=3}return P},X=(m,P,A)=>{var L=B();if(P>>>=0,0<A){var U=P;A=P+A-1;for(var ae=0;ae<m.length;++ae){var Te=m.charCodeAt(ae);if(55296<=Te&&57343>=Te&&(Te=65536+((1023&Te)<<10)|1023&m.charCodeAt(++ae)),127>=Te){if(P>=A)break;L[P++>>>0]=Te}else{if(2047>=Te){if(P+1>=A)break;L[P++>>>0]=192|Te>>6}else{if(65535>=Te){if(P+2>=A)break;L[P++>>>0]=224|Te>>12}else{if(P+3>=A)break;L[P++>>>0]=240|Te>>18,L[P++>>>0]=128|Te>>12&63}L[P++>>>0]=128|Te>>6&63}L[P++>>>0]=128|63&Te}}L[P>>>0]=0,m=P-U}else m=0;return m};function V(m,P){if(i)return je(5,1,m,P)}function J(m,P,A){if(i)return je(6,1,m,P,A)}function ne(m,P,A){return i?je(7,1,m,P,A):0}function me(m,P){if(i)return je(8,1,m,P)}function Se(m,P,A){if(i)return je(9,1,m,P,A)}function tt(m,P,A,L){if(i)return je(10,1,m,P,A,L)}function lt(m,P,A,L){if(i)return je(11,1,m,P,A,L)}function We(m,P,A,L){if(i)return je(12,1,m,P,A,L)}function St(m){if(i)return je(13,1,m)}function $t(m,P){if(i)return je(14,1,m,P)}function er(m,P,A){if(i)return je(15,1,m,P,A)}var Wt,cr,Kr=()=>ye(""),Ht=m=>{for(var P="";B()[m>>>0];)P+=Wt[B()[m++>>>0]];return P},hr={},zr={};function Ar(m,P,A={}){return(function(L,U,ae={}){var Te=U.name;if(!L)throw new cr(`type "${Te}" must have a positive integer typeid pointer`);if(zr.hasOwnProperty(L)){if(ae.Sb)return;throw new cr(`Cannot register type '${Te}' twice`)}zr[L]=U,hr.hasOwnProperty(L)&&(U=hr[L],delete hr[L],U.forEach(De=>De()))})(m,P,A)}var us=(m,P,A)=>{switch(P){case 1:return A?L=>ue()[L>>>0]:L=>B()[L>>>0];case 2:return A?L=>F()[L>>>1>>>0]:L=>K()[L>>>1>>>0];case 4:return A?L=>j()[L>>>2>>>0]:L=>ie()[L>>>2>>>0];case 8:return A?L=>Z[L>>>3]:L=>Q[L>>>3];default:throw new TypeError(`invalid integer width (${P}): ${m}`)}};function ds(m,P,A){A>>>=0,Ar(m>>>=0,{name:P=Ht(P>>>0),fromWireType:L=>L,toWireType:function(L,U){if(typeof U!="bigint"&&typeof U!="number")throw U=U===null?"null":(L=typeof U)=="object"||L==="array"||L==="function"?U.toString():""+U,new TypeError(`Cannot convert "${U}" to ${this.name}`);return typeof U=="number"&&(U=BigInt(U)),U},Cb:Br,readValueFromPointer:us(P,A,P.indexOf("u")==-1),Db:null})}var Br=8;function Ss(m,P,A,L){Ar(m>>>=0,{name:P=Ht(P>>>0),fromWireType:function(U){return!!U},toWireType:function(U,ae){return ae?A:L},Cb:Br,readValueFromPointer:function(U){return this.fromWireType(B()[U>>>0])},Db:null})}var Nr=[],yr=[];function Hr(m){9<(m>>>=0)&&--yr[m+1]==0&&(yr[m]=void 0,Nr.push(m))}var ur=m=>{if(!m)throw new cr("Cannot use deleted val. handle = "+m);return yr[m]},vr=m=>{switch(m){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let P=Nr.pop()||yr.length;return yr[P]=m,yr[P+1]=1,P}};function ss(m){return this.fromWireType(ie()[m>>>2>>>0])}var Xr={name:"emscripten::val",fromWireType:m=>{var P=ur(m);return Hr(m),P},toWireType:(m,P)=>vr(P),Cb:Br,readValueFromPointer:ss,Db:null};function $s(m){return Ar(m>>>0,Xr)}var Ds=(m,P)=>{switch(P){case 4:return function(A){return this.fromWireType(ke()[A>>>2>>>0])};case 8:return function(A){return this.fromWireType(be()[A>>>3>>>0])};default:throw new TypeError(`invalid float width (${P}): ${m}`)}};function Rr(m,P,A){A>>>=0,Ar(m>>>=0,{name:P=Ht(P>>>0),fromWireType:L=>L,toWireType:(L,U)=>U,Cb:Br,readValueFromPointer:Ds(P,A),Db:null})}function Le(m,P,A,L,U){if(m>>>=0,A>>>=0,P=Ht(P>>>0),U===-1&&(U=4294967295),U=De=>De,L===0){var ae=32-8*A;U=De=>De<<ae>>>ae}var Te=P.includes("unsigned")?function(De,Ge){return Ge>>>0}:function(De,Ge){return Ge};Ar(m,{name:P,fromWireType:U,toWireType:Te,Cb:Br,readValueFromPointer:us(P,A,L!==0),Db:null})}function Be(m,P,A){function L(ae){var Te=ie()[ae>>>2>>>0];return ae=ie()[ae+4>>>2>>>0],new U(ue().buffer,ae,Te)}var U=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][P];Ar(m>>>=0,{name:A=Ht(A>>>0),fromWireType:L,Cb:Br,readValueFromPointer:L},{Sb:!0})}function st(m,P){Ar(m>>>=0,{name:P=Ht(P>>>0),fromWireType:function(A){for(var L,U=ie()[A>>>2>>>0],ae=A+4,Te=ae,De=0;De<=U;++De){var Ge=ae+De;De!=U&&B()[Ge>>>0]!=0||(Te=Ut(Te,Ge-Te),L===void 0?L=Te:(L+="\0",L+=Te),Te=Ge+1)}return Zr(A),L},toWireType:function(A,L){L instanceof ArrayBuffer&&(L=new Uint8Array(L));var U=typeof L=="string";if(!(U||L instanceof Uint8Array||L instanceof Uint8ClampedArray||L instanceof Int8Array))throw new cr("Cannot pass non-string to std::string");var ae=U?C(L):L.length,Te=qs(4+ae+1),De=Te+4;if(ie()[Te>>>2>>>0]=ae,U)X(L,De,ae+1);else if(U)for(U=0;U<ae;++U){var Ge=L.charCodeAt(U);if(255<Ge)throw Zr(Te),new cr("String has UTF-16 code units that do not fit in 8 bits");B()[De+U>>>0]=Ge}else for(U=0;U<ae;++U)B()[De+U>>>0]=L[U];return A!==null&&A.push(Zr,Te),Te},Cb:Br,readValueFromPointer:ss,Db(A){Zr(A)}})}var qt=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Ls=(m,P)=>{for(var A=m>>1,L=A+P/2;!(A>=L)&&K()[A>>>0];)++A;if(32<(A<<=1)-m&&qt)return qt.decode(B().slice(m,A));for(A="",L=0;!(L>=P/2);++L){var U=F()[m+2*L>>>1>>>0];if(U==0)break;A+=String.fromCharCode(U)}return A},ks=(m,P,A)=>{if(A??=2147483647,2>A)return 0;var L=P;A=(A-=2)<2*m.length?A/2:m.length;for(var U=0;U<A;++U){var ae=m.charCodeAt(U);F()[P>>>1>>>0]=ae,P+=2}return F()[P>>>1>>>0]=0,P-L},Jr=m=>2*m.length,sn=(m,P)=>{for(var A=0,L="";!(A>=P/4);){var U=j()[m+4*A>>>2>>>0];if(U==0)break;++A,65536<=U?(U-=65536,L+=String.fromCharCode(55296|U>>10,56320|1023&U)):L+=String.fromCharCode(U)}return L},nn=(m,P,A)=>{if(P>>>=0,A??=2147483647,4>A)return 0;var L=P;A=L+A-4;for(var U=0;U<m.length;++U){var ae=m.charCodeAt(U);if(55296<=ae&&57343>=ae&&(ae=65536+((1023&ae)<<10)|1023&m.charCodeAt(++U)),j()[P>>>2>>>0]=ae,(P+=4)+4>A)break}return j()[P>>>2>>>0]=0,P-L},on=m=>{for(var P=0,A=0;A<m.length;++A){var L=m.charCodeAt(A);55296<=L&&57343>=L&&++A,P+=4}return P};function $n(m,P,A){if(m>>>=0,P>>>=0,A=Ht(A>>>=0),P===2)var L=Ls,U=ks,ae=Jr,Te=De=>K()[De>>>1>>>0];else P===4&&(L=sn,U=nn,ae=on,Te=De=>ie()[De>>>2>>>0]);Ar(m,{name:A,fromWireType:De=>{for(var Ge,ot=ie()[De>>>2>>>0],gt=De+4,At=0;At<=ot;++At){var Lt=De+4+At*P;At!=ot&&Te(Lt)!=0||(gt=L(gt,Lt-gt),Ge===void 0?Ge=gt:(Ge+="\0",Ge+=gt),gt=Lt+P)}return Zr(De),Ge},toWireType:(De,Ge)=>{if(typeof Ge!="string")throw new cr(`Cannot pass non-string to C++ string type ${A}`);var ot=ae(Ge),gt=qs(4+ot+P);return ie()[gt>>>2>>>0]=ot/P,U(Ge,gt+4,ot+P),De!==null&&De.push(Zr,gt),gt},Cb:Br,readValueFromPointer:ss,Db(De){Zr(De)}})}function ce(m,P){Ar(m>>>=0,{Tb:!0,name:P=Ht(P>>>0),Cb:0,fromWireType:()=>{},toWireType:()=>{}})}function k(m){Ln(m>>>0,!a,1,!o,131072,!1),Gr()}var W=m=>{if(!te)try{if(m(),!(0<Ne))try{i?Bn(E):Ye(E)}catch(P){P instanceof Oe||P=="unwind"||_(0,P)}}catch(P){P instanceof Oe||P=="unwind"||_(0,P)}};function ee(m){m>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(j(),m>>>2,m).value.then(se),m+=128,Atomics.store(j(),m>>>2,1))}var se=()=>{var m=dn();m&&(ee(m),W(To))};function he(m,P){(m>>>=0)==P>>>0?setTimeout(se):i?postMessage({Gb:m,Bb:"checkMailbox"}):(m=ht[m])&&m.postMessage({Bb:"checkMailbox"})}var Pe=[];function qe(m,P,A,L,U){for(P>>>=0,L/=2,Pe.length=L,A=U>>>0>>>3,U=0;U<L;U++)Pe[U]=Z[A+2*U]?Z[A+2*U+1]:be()[A+2*U+1>>>0];return(P?Ee[P]:Mi[m])(...Pe)}var Qe=()=>{Ne=0};function Je(m){m>>>=0,i?postMessage({Bb:"cleanupThread",hc:m}):br(ht[m])}function Ue(m){}var Et=(m,P)=>{var A=zr[m];if(A===void 0)throw m=un(m),A=Ht(m),Zr(m),new cr(`${P} has unknown type ${A}`);return A},bt=(m,P,A)=>{var L=[];return m=m.toWireType(L,A),L.length&&(ie()[P>>>2>>>0]=vr(L)),m};function tr(m,P,A){return P>>>=0,A>>>=0,m=ur(m>>>0),P=Et(P,"emval::as"),bt(P,A,m)}function _r(m,P){return P>>>=0,m=ur(m>>>0),(P=Et(P,"emval::as")).toWireType(null,m)}var Qt=m=>{try{m()}catch(P){ye(P)}},rr=0,Vt=null,qr=0,ns=[],xr={},ps={},Jt=0,dr=null,Cr=[];function Yr(m){return(function(P){if(!te){if(rr===0){var A=!1,L=!1;P((U=0)=>{if(!te&&(qr=U,A=!0,L)){rr=2,Qt(()=>Un(Vt)),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.resume(),U=!1;try{var ae=(function(){var Ge=j()[Vt+8>>>2>>>0];return Ge=ut[ps[Ge]],--Ne,Ge()})()}catch(Ge){ae=Ge,U=!0}var Te=!1;if(!Vt){var De=dr;De&&(dr=null,(U?De.reject:De.resolve)(ae),Te=!0)}if(U&&!Te)throw ae}}),L=!0,A||(rr=1,Vt=(function(){var U=qs(65548),ae=U+12;ie()[U>>>2>>>0]=ae,ie()[U+4>>>2>>>0]=ae+65536,ae=ns[0];var Te=xr[ae];return Te===void 0&&(Te=Jt++,xr[ae]=Te,ps[Te]=ae),ae=Te,j()[U+8>>>2>>>0]=ae,U})(),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.pause(),Qt(()=>Po(Vt)))}else rr===2?(rr=0,Qt(So),Zr(Vt),Vt=null,Cr.forEach(W)):ye(`invalid state: ${rr}`);return qr}})(P=>{m().then(P)})}function ms(m){return m>>>=0,Yr(async()=>{var P=await ur(m);return vr(P)})}var fr=[];function os(m,P,A,L){return A>>>=0,L>>>=0,(m=fr[m>>>0])(null,P=ur(P>>>0),A,L)}var gr={},Yt=m=>{var P=gr[m];return P===void 0?Ht(m):P};function pr(m,P,A,L,U){return A>>>=0,L>>>=0,U>>>=0,(m=fr[m>>>0])(P=ur(P>>>0),P[A=Yt(A)],L,U)}var nr=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Vr(m){return(m>>>=0)==0?vr(nr()):(m=Yt(m),vr(nr()[m]))}var Gs=m=>{var P=fr.length;return fr.push(m),P},Is=(m,P)=>{for(var A=Array(m),L=0;L<m;++L)A[L]=Et(ie()[P+4*L>>>2>>>0],"parameter "+L);return A},so=(m,P)=>Object.defineProperty(P,"name",{value:m});function Jo(m,P,A){var L=(P=Is(m,P>>>0)).shift();m--;var U=`return function (obj, func, destructorsRef, args) {
`,ae=0,Te=[];A===0&&Te.push("obj");for(var De=["retType"],Ge=[L],ot=0;ot<m;++ot)Te.push("arg"+ot),De.push("argType"+ot),Ge.push(P[ot]),U+=`  var arg${ot} = argType${ot}.readValueFromPointer(args${ae?"+"+ae:""});
`,ae+=P[ot].Cb;return U+=`  var rv = ${A===1?"new func":"func.call"}(${Te.join(", ")});
`,L.Tb||(De.push("emval_returnValue"),Ge.push(bt),U+=`  return emval_returnValue(retType, destructorsRef, rv);
`),De.push(U+`};
`),m=(function(gt){var At=Function;if(!(At instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof At} which is not a function`);var Lt=so(At.name||"unknownFunctionName",function(){});return Lt.prototype=At.prototype,Lt=new Lt,(gt=At.apply(Lt,gt))instanceof Object?gt:Lt})(De)(...Ge),A=`methodCaller<(${P.map(gt=>gt.name).join(", ")}) => ${L.name}>`,Gs(so(A,m))}function Yo(m){return m=Yt(m>>>0),vr(s[m])}function Zo(m,P){return P>>>=0,m=ur(m>>>0),P=ur(P),vr(m[P])}function ei(m){9<(m>>>=0)&&(yr[m+1]+=1)}function Ks(){return vr([])}function ti(m){m=ur(m>>>0);for(var P=Array(m.length),A=0;A<m.length;A++)P[A]=m[A];return vr(P)}function ri(m){return vr(Yt(m>>>0))}function si(){return vr({})}function ni(m){for(var P=ur(m>>>=0);P.length;){var A=P.pop();P.pop()(A)}Hr(m)}function oi(m,P,A){P>>>=0,A>>>=0,m=ur(m>>>0),P=ur(P),A=ur(A),m[P]=A}function Hs(m,P){return P>>>=0,m=(m=Et(m>>>0,"_emval_take_value")).readValueFromPointer(P),vr(m)}function ii(m,P){m=-9007199254740992>m||9007199254740992<m?NaN:Number(m),P>>>=0,m=new Date(1e3*m),j()[P>>>2>>>0]=m.getUTCSeconds(),j()[P+4>>>2>>>0]=m.getUTCMinutes(),j()[P+8>>>2>>>0]=m.getUTCHours(),j()[P+12>>>2>>>0]=m.getUTCDate(),j()[P+16>>>2>>>0]=m.getUTCMonth(),j()[P+20>>>2>>>0]=m.getUTCFullYear()-1900,j()[P+24>>>2>>>0]=m.getUTCDay(),m=(m.getTime()-Date.UTC(m.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,j()[P+28>>>2>>>0]=m}var no=m=>m%4==0&&(m%100!=0||m%400==0),oo=[0,31,60,91,121,152,182,213,244,274,305,335],io=[0,31,59,90,120,151,181,212,243,273,304,334];function ai(m,P){m=-9007199254740992>m||9007199254740992<m?NaN:Number(m),P>>>=0,m=new Date(1e3*m),j()[P>>>2>>>0]=m.getSeconds(),j()[P+4>>>2>>>0]=m.getMinutes(),j()[P+8>>>2>>>0]=m.getHours(),j()[P+12>>>2>>>0]=m.getDate(),j()[P+16>>>2>>>0]=m.getMonth(),j()[P+20>>>2>>>0]=m.getFullYear()-1900,j()[P+24>>>2>>>0]=m.getDay();var A=(no(m.getFullYear())?oo:io)[m.getMonth()]+m.getDate()-1|0;j()[P+28>>>2>>>0]=A,j()[P+36>>>2>>>0]=-60*m.getTimezoneOffset(),A=new Date(m.getFullYear(),6,1).getTimezoneOffset();var L=new Date(m.getFullYear(),0,1).getTimezoneOffset();m=0|(A!=L&&m.getTimezoneOffset()==Math.min(L,A)),j()[P+32>>>2>>>0]=m}function ao(m){m>>>=0;var P=new Date(j()[m+20>>>2>>>0]+1900,j()[m+16>>>2>>>0],j()[m+12>>>2>>>0],j()[m+8>>>2>>>0],j()[m+4>>>2>>>0],j()[m>>>2>>>0],0),A=j()[m+32>>>2>>>0],L=P.getTimezoneOffset(),U=new Date(P.getFullYear(),6,1).getTimezoneOffset(),ae=new Date(P.getFullYear(),0,1).getTimezoneOffset(),Te=Math.min(ae,U);return 0>A?j()[m+32>>>2>>>0]=+(U!=ae&&Te==L):0<A!=(Te==L)&&(U=Math.max(ae,U),P.setTime(P.getTime()+6e4*((0<A?Te:U)-L))),j()[m+24>>>2>>>0]=P.getDay(),A=(no(P.getFullYear())?oo:io)[P.getMonth()]+P.getDate()-1|0,j()[m+28>>>2>>>0]=A,j()[m>>>2>>>0]=P.getSeconds(),j()[m+4>>>2>>>0]=P.getMinutes(),j()[m+8>>>2>>>0]=P.getHours(),j()[m+12>>>2>>>0]=P.getDate(),j()[m+16>>>2>>>0]=P.getMonth(),j()[m+20>>>2>>>0]=P.getYear(),m=P.getTime(),BigInt(isNaN(m)?-1:m/1e3)}function lo(m,P,A,L,U,ae,Te){return i?je(16,1,m,P,A,L,U,ae,Te):-52}function co(m,P,A,L,U,ae){if(i)return je(17,1,m,P,A,L,U,ae)}var zs={},li=()=>performance.timeOrigin+performance.now();function kn(m,P){if(i)return je(18,1,m,P);if(zs[m]&&(clearTimeout(zs[m].id),delete zs[m]),!P)return 0;var A=setTimeout(()=>{delete zs[m],W(()=>Rn(m,performance.timeOrigin+performance.now()))},P);return zs[m]={id:A,qc:P},0}function ci(m,P,A,L){m>>>=0,P>>>=0,A>>>=0,L>>>=0;var U=new Date().getFullYear(),ae=new Date(U,0,1).getTimezoneOffset();U=new Date(U,6,1).getTimezoneOffset();var Te=Math.max(ae,U);ie()[m>>>2>>>0]=60*Te,j()[P>>>2>>>0]=+(ae!=U),m=(P=De=>{var Ge=Math.abs(De);return`UTC${0<=De?"-":"+"}${String(Math.floor(Ge/60)).padStart(2,"0")}${String(Ge%60).padStart(2,"0")}`})(ae),P=P(U),U<ae?(X(m,A,17),X(P,L,17)):(X(m,L,17),X(P,A,17))}var uo=()=>Date.now();function ua(m,P,A){return 0<=m&&3>=m?(m===0?m=Date.now():m=performance.timeOrigin+performance.now(),Z[A>>>0>>>3]=BigInt(Math.round(1e6*m)),0):28}var In=[],An=(m,P)=>{In.length=0;for(var A;A=B()[m++>>>0];){var L=A!=105;P+=(L&=A!=112)&&P%8?4:0,In.push(A==112?ie()[P>>>2>>>0]:A==106?Z[P>>>3]:A==105?j()[P>>>2>>>0]:be()[P>>>3>>>0]),P+=L?8:4}return In};function po(m,P,A){return m>>>=0,P=An(P>>>0,A>>>0),Ee[m](...P)}function Fn(m,P,A){return m>>>=0,P=An(P>>>0,A>>>0),Ee[m](...P)}var ui=()=>{};function di(m,P){return $(Ut(m>>>0,P>>>0))}var pi=()=>{throw Ne+=1,"unwind"};function mi(){return 4294901760}var hi=()=>navigator.hardwareConcurrency;function _i(){return ye("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function fi(m){m>>>=0;var P=B().length;if(m<=P||4294901760<m)return!1;for(var A=1;4>=A;A*=2){var L=P*(1+.2/A);L=Math.min(L,m+100663296);e:{L=(Math.min(4294901760,65536*Math.ceil(Math.max(m,L)/65536))-x.buffer.byteLength+65535)/65536|0;try{x.grow(L),ve();var U=1;break e}catch{}U=void 0}if(U)return!0}return!1}var an=()=>(ye("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),Bs={},mo=m=>{m.forEach(P=>{an()})};function On(){var m=Error().stack.toString().split(`
`);return m[0]=="Error"&&m.shift(),mo(m),Bs.Lb=an(),Bs.cc=m,Bs.Lb}function ho(m,P,A){if(m>>>=0,P>>>=0,Bs.Lb==m)var L=Bs.cc;else(L=Error().stack.toString().split(`
`))[0]=="Error"&&L.shift(),mo(L);for(var U=3;L[U]&&an()!=m;)++U;for(m=0;m<A&&L[m+U];++m)j()[P+4*m>>>2>>>0]=an();return m}var Dn,ln={},As=()=>{if(!Dn){var m,P={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(m in ln)ln[m]===void 0?delete P[m]:P[m]=ln[m];var A=[];for(m in P)A.push(`${m}=${P[m]}`);Dn=A}return Dn};function _o(m,P){if(i)return je(19,1,m,P);m>>>=0,P>>>=0;var A=0;return As().forEach((L,U)=>{var ae=P+A;for(U=ie()[m+4*U>>>2>>>0]=ae,ae=0;ae<L.length;++ae)ue()[U++>>>0]=L.charCodeAt(ae);ue()[U>>>0]=0,A+=L.length+1}),0}function gi(m,P){if(i)return je(20,1,m,P);m>>>=0,P>>>=0;var A=As();ie()[m>>>2>>>0]=A.length;var L=0;return A.forEach(U=>L+=U.length+1),ie()[P>>>2>>>0]=L,0}function fo(m){return i?je(21,1,m):52}function wi(m,P,A,L){return i?je(22,1,m,P,A,L):52}function go(m,P,A,L){return i?je(23,1,m,P,A,L):70}var wo=[null,[],[]];function Mo(m,P,A,L){if(i)return je(24,1,m,P,A,L);P>>>=0,A>>>=0,L>>>=0;for(var U=0,ae=0;ae<A;ae++){var Te=ie()[P>>>2>>>0],De=ie()[P+4>>>2>>>0];P+=8;for(var Ge=0;Ge<De;Ge++){var ot=B()[Te+Ge>>>0],gt=wo[m];ot===0||ot===10?((m===1?y:$)(Ps(gt)),gt.length=0):gt.push(ot)}U+=De}return ie()[L>>>2>>>0]=U,0}i||(function(){for(var m=s.numThreads-1;m--;)Lr();Me.unshift(()=>{de++,(function(P){i?P():Promise.all(et.map(Dr)).then(P)})(()=>$e())})})();for(var bo=Array(256),cn=0;256>cn;++cn)bo[cn]=String.fromCharCode(cn);Wt=bo,cr=s.BindingError=class extends Error{constructor(m){super(m),this.name="BindingError"}},s.InternalError=class extends Error{constructor(m){super(m),this.name="InternalError"}},yr.push(0,1,void 0,1,null,1,!0,1,!1,1),s.count_emval_handles=()=>yr.length/2-5-Nr.length;var ut,Mi=[Ze,Xe,Os,Tt,Cs,V,J,ne,me,Se,tt,lt,We,St,$t,er,lo,co,kn,_o,gi,fo,wi,go,Mo];(async function(){function m(L,U){return ut=L.exports,ut=(function(){var ae=ut,Te={};for(let[De,Ge]of Object.entries(ae))Te[De]=typeof Ge=="function"?(...ot)=>{ns.push(De);try{return Ge(...ot)}finally{te||(ns.pop(),Vt&&rr===1&&ns.length===0&&(rr=0,Ne+=1,Qt(Co),typeof Fibers<"u"&&Fibers.rc()))}}:Ge;return Te})(),ut=(function(){var ae=ut,Te=Ge=>ot=>Ge(ot)>>>0,De=Ge=>()=>Ge()>>>0;return(ae=Object.assign({},ae)).Da=Te(ae.Da),ae.fb=De(ae.fb),ae.hb=Te(ae.hb),ae.tb=Te(ae.tb),ae.ub=De(ae.ub),ae.__cxa_get_exception_ptr=Te(ae.__cxa_get_exception_ptr),ae})(),It.push(ut.ib),T=U,$e(),ut}de++;var P=fe();if(s.instantiateWasm)return new Promise(L=>{s.instantiateWasm(P,(U,ae)=>{m(U,ae),L(U.exports)})});if(i)return new Promise(L=>{Fe=U=>{var ae=new WebAssembly.Instance(U,fe());L(m(ae,U))}});N??=s.locateFile?s.locateFile?s.locateFile("ort-wasm-simd-threaded.jsep.wasm",v):v+"ort-wasm-simd-threaded.jsep.wasm":new URL("/assets/ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href;try{var A=await(async function(L){var U=N;if(!re&&typeof WebAssembly.instantiateStreaming=="function"&&!le(U))try{var ae=fetch(U,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(ae,L)}catch(Te){$(`wasm streaming compile failed: ${Te}`),$("falling back to ArrayBuffer instantiation")}return(async function(Te,De){try{var Ge=await(async function(ot){if(!re)try{var gt=await d(ot);return new Uint8Array(gt)}catch{}if(ot==N&&re)ot=new Uint8Array(re);else{if(!u)throw"both async and sync fetching of the wasm failed";ot=u(ot)}return ot})(Te);return await WebAssembly.instantiate(Ge,De)}catch(ot){$(`failed to asynchronously prepare wasm: ${ot}`),ye(ot)}})(U,L)})(P);return m(A.instance,A.module)}catch(L){return t(L),Promise.reject(L)}})();var un=m=>(un=ut.Da)(m),yo=()=>(yo=ut.Ea)();s._OrtInit=(m,P)=>(s._OrtInit=ut.Fa)(m,P),s._OrtGetLastError=(m,P)=>(s._OrtGetLastError=ut.Ga)(m,P),s._OrtCreateSessionOptions=(m,P,A,L,U,ae,Te,De,Ge,ot)=>(s._OrtCreateSessionOptions=ut.Ha)(m,P,A,L,U,ae,Te,De,Ge,ot),s._OrtAppendExecutionProvider=(m,P,A,L,U)=>(s._OrtAppendExecutionProvider=ut.Ia)(m,P,A,L,U),s._OrtAddFreeDimensionOverride=(m,P,A)=>(s._OrtAddFreeDimensionOverride=ut.Ja)(m,P,A),s._OrtAddSessionConfigEntry=(m,P,A)=>(s._OrtAddSessionConfigEntry=ut.Ka)(m,P,A),s._OrtReleaseSessionOptions=m=>(s._OrtReleaseSessionOptions=ut.La)(m),s._OrtCreateSession=(m,P,A)=>(s._OrtCreateSession=ut.Ma)(m,P,A),s._OrtReleaseSession=m=>(s._OrtReleaseSession=ut.Na)(m),s._OrtGetInputOutputCount=(m,P,A)=>(s._OrtGetInputOutputCount=ut.Oa)(m,P,A),s._OrtGetInputOutputMetadata=(m,P,A,L)=>(s._OrtGetInputOutputMetadata=ut.Pa)(m,P,A,L),s._OrtFree=m=>(s._OrtFree=ut.Qa)(m),s._OrtCreateTensor=(m,P,A,L,U,ae)=>(s._OrtCreateTensor=ut.Ra)(m,P,A,L,U,ae),s._OrtGetTensorData=(m,P,A,L,U)=>(s._OrtGetTensorData=ut.Sa)(m,P,A,L,U),s._OrtReleaseTensor=m=>(s._OrtReleaseTensor=ut.Ta)(m),s._OrtCreateRunOptions=(m,P,A,L)=>(s._OrtCreateRunOptions=ut.Ua)(m,P,A,L),s._OrtAddRunConfigEntry=(m,P,A)=>(s._OrtAddRunConfigEntry=ut.Va)(m,P,A),s._OrtReleaseRunOptions=m=>(s._OrtReleaseRunOptions=ut.Wa)(m),s._OrtCreateBinding=m=>(s._OrtCreateBinding=ut.Xa)(m),s._OrtBindInput=(m,P,A)=>(s._OrtBindInput=ut.Ya)(m,P,A),s._OrtBindOutput=(m,P,A,L)=>(s._OrtBindOutput=ut.Za)(m,P,A,L),s._OrtClearBoundOutputs=m=>(s._OrtClearBoundOutputs=ut._a)(m),s._OrtReleaseBinding=m=>(s._OrtReleaseBinding=ut.$a)(m),s._OrtRunWithBinding=(m,P,A,L,U)=>(s._OrtRunWithBinding=ut.ab)(m,P,A,L,U),s._OrtRun=(m,P,A,L,U,ae,Te,De)=>(s._OrtRun=ut.bb)(m,P,A,L,U,ae,Te,De),s._OrtEndProfiling=m=>(s._OrtEndProfiling=ut.cb)(m),s._JsepOutput=(m,P,A)=>(s._JsepOutput=ut.db)(m,P,A),s._JsepGetNodeName=m=>(s._JsepGetNodeName=ut.eb)(m);var dn=()=>(dn=ut.fb)(),Zr=s._free=m=>(Zr=s._free=ut.gb)(m),qs=s._malloc=m=>(qs=s._malloc=ut.hb)(m),Ln=(m,P,A,L,U,ae)=>(Ln=ut.kb)(m,P,A,L,U,ae),vo=()=>(vo=ut.lb)(),zn=(m,P,A,L,U)=>(zn=ut.mb)(m,P,A,L,U),xo=m=>(xo=ut.nb)(m),Bn=m=>(Bn=ut.ob)(m),Rn=(m,P)=>(Rn=ut.pb)(m,P),To=()=>(To=ut.qb)(),Eo=(m,P)=>(Eo=ut.rb)(m,P),Qs=m=>(Qs=ut.sb)(m),jn=m=>(jn=ut.tb)(m),Nn=()=>(Nn=ut.ub)(),Vn=s.dynCall_ii=(m,P)=>(Vn=s.dynCall_ii=ut.vb)(m,P),Po=m=>(Po=ut.wb)(m),Co=()=>(Co=ut.xb)(),Un=m=>(Un=ut.yb)(m),So=()=>(So=ut.zb)();return s.stackSave=()=>Nn(),s.stackRestore=m=>Qs(m),s.stackAlloc=m=>jn(m),s.setValue=function(m,P,A="i8"){switch(A.endsWith("*")&&(A="*"),A){case"i1":case"i8":ue()[m>>>0]=P;break;case"i16":F()[m>>>1>>>0]=P;break;case"i32":j()[m>>>2>>>0]=P;break;case"i64":Z[m>>>3]=BigInt(P);break;case"float":ke()[m>>>2>>>0]=P;break;case"double":be()[m>>>3>>>0]=P;break;case"*":ie()[m>>>2>>>0]=P;break;default:ye(`invalid type for setValue: ${A}`)}},s.getValue=function(m,P="i8"){switch(P.endsWith("*")&&(P="*"),P){case"i1":case"i8":return ue()[m>>>0];case"i16":return F()[m>>>1>>>0];case"i32":return j()[m>>>2>>>0];case"i64":return Z[m>>>3];case"float":return ke()[m>>>2>>>0];case"double":return be()[m>>>3>>>0];case"*":return ie()[m>>>2>>>0];default:ye(`invalid type for getValue: ${P}`)}},s.UTF8ToString=Ut,s.stringToUTF8=X,s.lengthBytesUTF8=C,(function m(){if(0<de)xe=m;else if(i)r(s),q();else{for(;0<Me.length;)Me.shift()(s);0<de?xe=m:(s.calledRun=!0,te||(q(),r(s)))}})(),s.PTR_SIZE=4,n}),CM=Rl,x_=globalThis.self?.name?.startsWith("em-pthread"),x_&&Rl()}),jl,Dc,T_,es,SM,ji,E_,P_,Nl,C_,Vl,$M,Ul,kM,tu=Re(()=>{eu(),jl=typeof location>"u"?void 0:location.origin,Dc=import.meta.url>"file:"&&import.meta.url<"file;",T_=()=>{{if(Dc){let e=URL;return new URL(new e("ort.bundle.min.mjs",import.meta.url).href,jl).href}return import.meta.url}},es=T_(),SM=()=>{if(es&&!es.startsWith("blob:"))return es.substring(0,es.lastIndexOf("/")+1)},ji=(e,r)=>{try{let t=r??es;return(t?new URL(e,t):new URL(e)).origin===jl}catch{return!1}},E_=(e,r)=>{let t=r??es;try{return(t?new URL(e,t):new URL(e)).href}catch{return}},P_=(e,r)=>`${r??"./"}${e}`,Nl=async e=>{let r=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(r)},C_=async e=>(await import(e)).default,Vl=(yx(),qo(TM)).default,$M=async()=>{if(!es)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(ji(es))return[void 0,Vl()];let e=await Nl(es);return[e,Vl(e)]},Ul=(vx(),qo(PM)).default,kM=async(e,r,t)=>{if(!e&&!r&&Ul&&es&&ji(es))return[void 0,Ul];{let s="ort-wasm-simd-threaded.jsep.mjs",n=e??E_(s,r),o=t&&n&&!ji(n,r),a=o?await Nl(n):n??P_(s,r);return[o?a:void 0,await C_(a)]}}}),Wl,Ni,Oo,Gl,S_,$_,k_,ru,Kt,Cn=Re(()=>{tu(),Ni=!1,Oo=!1,Gl=!1,S_=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},$_=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},k_=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},ru=async e=>{if(Ni)return Promise.resolve();if(Oo)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Gl)throw new Error("previous call to 'initializeWebAssembly()' failed.");Oo=!0;let r=e.initTimeout,t=e.numThreads;if(e.simd!==!1){if(e.simd==="relaxed"){if(!k_())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!$_())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let s=S_();t>1&&!s&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=t=1);let n=e.wasmPaths,o=typeof n=="string"?n:void 0,a=n?.mjs,i=a?.href??a,l=n?.wasm,c=l?.href??l,p=e.wasmBinary,[d,u]=await kM(i,o,t>1),f=!1,_=[];if(r>0&&_.push(new Promise(v=>{setTimeout(()=>{f=!0,v()},r)})),_.push(new Promise((v,I)=>{let M={numThreads:t};if(p)M.wasmBinary=p;else if(c||o)M.locateFile=y=>c??o+y;else if(i&&i.indexOf("blob:")!==0)M.locateFile=y=>new URL(y,i).href;else if(d){let y=SM();y&&(M.locateFile=$=>y+$)}u(M).then(y=>{Oo=!1,Ni=!0,Wl=y,v(),d&&URL.revokeObjectURL(d)},y=>{Oo=!1,Gl=!0,I(y)})})),await Promise.race(_),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${r}ms`)},Kt=()=>{if(Ni&&Wl)return Wl;throw new Error("WebAssembly is not initialized yet.")}}),ys,sa,Nt,su=Re(()=>{Cn(),ys=(e,r)=>{let t=Kt(),s=t.lengthBytesUTF8(e)+1,n=t._malloc(s);return t.stringToUTF8(e,n,s),r.push(n),n},sa=(e,r,t,s)=>{if(typeof e=="object"&&e!==null){if(t.has(e))throw new Error("Circular reference in options");t.add(e)}Object.entries(e).forEach(([n,o])=>{let a=r?r+n:n;if(typeof o=="object")sa(o,a+".",t,s);else if(typeof o=="string"||typeof o=="number")s(a,o.toString());else if(typeof o=="boolean")s(a,o?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof o}`)})},Nt=e=>{let r=Kt(),t=r.stackSave();try{let s=r.PTR_SIZE,n=r.stackAlloc(2*s);r._OrtGetLastError(n,n+s);let o=Number(r.getValue(n,s===4?"i32":"i64")),a=r.getValue(n+s,"*"),i=a?r.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${o}, ERROR_MESSAGE: ${i}`)}finally{r.stackRestore(t)}}}),IM,xx=Re(()=>{Cn(),su(),IM=e=>{let r=Kt(),t=0,s=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let o=0;return e?.tag!==void 0&&(o=ys(e.tag,s)),t=r._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,o),t===0&&Nt("Can't create run options."),e?.extra!==void 0&&sa(e.extra,"",new WeakSet,(a,i)=>{let l=ys(a,s),c=ys(i,s);r._OrtAddRunConfigEntry(t,l,c)!==0&&Nt(`Can't set a run config entry: ${a} - ${i}.`)}),[t,s]}catch(o){throw t!==0&&r._OrtReleaseRunOptions(t),s.forEach(a=>r._free(a)),o}}}),I_,A_,F_,Do,O_,AM,Tx=Re(()=>{Cn(),su(),I_=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},A_=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},F_=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let r=e.extra.session;r.use_ort_model_bytes_directly||(r.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(t=>(typeof t=="string"?t:t.name)==="webgpu")&&(e.enableMemPattern=!1)},Do=(e,r,t,s)=>{let n=ys(r,s),o=ys(t,s);Kt()._OrtAddSessionConfigEntry(e,n,o)!==0&&Nt(`Can't set a session config entry: ${r} - ${t}.`)},O_=async(e,r,t)=>{for(let s of r){let n=typeof s=="string"?s:s.name,o=[];switch(n){case"webnn":if(n="WEBNN",typeof s!="string"){let p=s?.deviceType;p&&Do(e,"deviceType",p,t)}break;case"webgpu":if(n="JS",typeof s!="string"){let p=s;if(p?.preferredLayout){if(p.preferredLayout!=="NCHW"&&p.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${p.preferredLayout}`);Do(e,"preferredLayout",p.preferredLayout,t)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let a=ys(n,t),i=o.length,l=0,c=0;if(i>0){l=Kt()._malloc(i*Kt().PTR_SIZE),t.push(l),c=Kt()._malloc(i*Kt().PTR_SIZE),t.push(c);for(let p=0;p<i;p++)Kt().setValue(l+p*Kt().PTR_SIZE,o[p][0],"*"),Kt().setValue(c+p*Kt().PTR_SIZE,o[p][1],"*")}await Kt()._OrtAppendExecutionProvider(e,a,l,c,i)!==0&&Nt(`Can't append execution provider: ${n}.`)}},AM=async e=>{let r=Kt(),t=0,s=[],n=e||{};F_(n);try{let o=I_(n.graphOptimizationLevel??"all"),a=A_(n.executionMode??"sequential"),i=typeof n.logId=="string"?ys(n.logId,s):0,l=n.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let p=typeof n.optimizedModelFilePath=="string"?ys(n.optimizedModelFilePath,s):0;if(t=r._OrtCreateSessionOptions(o,!!n.enableCpuMemArena,!!n.enableMemPattern,a,!!n.enableProfiling,0,i,l,c,p),t===0&&Nt("Can't create session options."),n.executionProviders&&await O_(t,n.executionProviders,s),n.enableGraphCapture!==void 0){if(typeof n.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${n.enableGraphCapture}`);Do(t,"enableGraphCapture",n.enableGraphCapture.toString(),s)}if(n.freeDimensionOverrides)for(let[d,u]of Object.entries(n.freeDimensionOverrides)){if(typeof d!="string")throw new Error(`free dimension override name must be a string: ${d}`);if(typeof u!="number"||!Number.isInteger(u)||u<0)throw new Error(`free dimension override value must be a non-negative integer: ${u}`);let f=ys(d,s);r._OrtAddFreeDimensionOverride(t,f,u)!==0&&Nt(`Can't set a free dimension override: ${d} - ${u}.`)}return n.extra!==void 0&&sa(n.extra,"",new WeakSet,(d,u)=>{Do(t,d,u,s)}),[t,s]}catch(o){throw t!==0&&r._OrtReleaseSessionOptions(t)!==0&&Nt("Can't release session options."),s.forEach(a=>r._free(a)),o}}}),Jn,Ns,vn,nu,na,ou,iu,Lc,ft=Re(()=>{Jn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},Ns=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},vn=(e,r)=>{let t=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],s=typeof r=="number"?r:r.reduce((n,o)=>n*o,1);return t>0?Math.ceil(s*t):void 0},nu=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},na=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},ou=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",iu=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",Lc=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),au,FM=Re(()=>{eu(),au=async e=>{if(typeof e=="string"){let r=await fetch(e);if(!r.ok)throw new Error(`failed to load external data file: ${e}`);let t=r.headers.get("Content-Length"),s=t?parseInt(t,10):0;if(s<1073741824)return new Uint8Array(await r.arrayBuffer());{if(!r.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=r.body.getReader(),o;try{o=new ArrayBuffer(s)}catch(i){if(i instanceof RangeError){let l=Math.ceil(s/65536);o=new WebAssembly.Memory({initial:l,maximum:l}).buffer}else throw i}let a=0;for(;;){let{done:i,value:l}=await n.read();if(i)break;let c=l.byteLength;new Uint8Array(o,a,c).set(l),a+=c}return new Uint8Array(o,0,s)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),D_,L_,z_,B_,lu,R_,Ft,Vs=Re(()=>{ft(),D_=["V","I","W","E","F"],L_=(e,r)=>{console.log(`[${D_[e]},${new Date().toISOString()}]${r}`)},lu=(e,r)=>{z_=e,B_=r},R_=(e,r)=>{let t=na(e),s=na(z_);t>=s&&L_(t,typeof r=="function"?r():r)},Ft=(...e)=>{B_&&R_(...e)}}),j_,eo,we,oa,OM,DM,LM,yt=Re(()=>{j_=class{static calcMatMulShape(e,r){return e[1]!==r[0]?void 0:[e[0],r[1]]}},eo=class{static calcShape(e,r,t=!1){let s=e.length,n=r.length;if(s===0)return r;if(n===0)return e;let o=Math.max(e.length,r.length),a=new Array(o);if(t){if(s<2||n<2)return;let i=j_.calcMatMulShape([e[s-2],e[s-1]],[r[n-2],r[n-1]]);if(i===void 0)return;[a[o-2],a[o-1]]=i}for(let i=t?3:1;i<=o;i++){let l=s-i<0?1:e[s-i],c=n-i<0?1:r[n-i];if(l!==c&&l>1&&c>1)return;let p=Math.max(l,c);if(l&&c)a[o-i]=Math.max(l,c);else{if(p>1)return;a[o-i]=0}}return a}static isValidBroadcast(e,r){let t=e.length,s=r.length;if(t>s)return!1;for(let n=1;n<=t;n++)if(e[t-n]!==1&&e[t-n]!==r[s-n])return!1;return!0}},we=class ta{static size(r){return ta.getSizeFromDimensionRange(r,0,r.length)}static convertShape(r,t=4){let s=r.length;if(s===0)return[];let n=new Array(s),o=s-1;for(;o>=0;){if(r[o]%t===0){n[o]=r[o]/t;break}if(t%r[o]!==0)throw new Error("cannot convert shape");n[o]=1,t/=r[o],o--}for(o--;o>=0;o--)n[o]=r[o];return n}static sizeFromDimension(r,t){if(t<0||t>r.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${r.length} dimensions.`);return ta.getSizeFromDimensionRange(r,t,r.length)}static sizeToDimension(r,t){if(t<0||t>r.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${r.length} dimensions.`);return ta.getSizeFromDimensionRange(r,0,t)}static getSizeFromDimensionRange(r,t,s){let n=1;for(let o=t;o<s;o++){if(r[o]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=Number(r[o])}return n}static computeStrides(r){let t=r.length;if(t===0)return[];if(t===1)return[1];let s=new Array(t);s[t-1]=1,s[t-2]=r[t-1];for(let n=t-3;n>=0;--n)s[n]=s[n+1]*r[n+1];return s}static normalizeAxis(r,t){if(r<-t&&r>=t)throw new Error("unsupported axis for this operation.");return r<0?r+t:r}static normalizeAxes(r,t){return r.map(s=>this.normalizeAxis(s,t??r.length))}static sortBasedOnPerm(r,t){return t?t.map(s=>r[s]):r.slice().reverse()}static padShape(r,t){let s=r.length;return r.map((n,o)=>n+t[o]+t[o+s])}static areEqual(r,t){return r.length!==t.length?!1:r.every((s,n)=>s===t[n])}},oa=class Wo{static adjustPoolAttributes(r,t,s,n,o,a){if(!r&&s.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(r)for(let i=0;i<t.length-2;i++)i>=s.length?s.push(t[i+2]):s[i]=t[i+2];for(let i=0;i<s.length;i++)if(i<n.length){if(n[i]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let i=0;i<s.length;i++)if(i<o.length){if(o[i]<0)throw new Error("dilations should be greater than or equal to 1")}else o.push(1);for(let i=0;i<s.length*2;i++)if(i<a.length){if(a[i]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let i=0;i<s.length;i++){if(s[i]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[i]>=s[i]||a[i+s.length]>=s[i])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(r,t,s,n,o,a,i){if(i){if(o.length!==2*(r.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(t.length!==r.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==r.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<r.length-2;l++)Wo.adjustPadAndReturnShape(r[l+(a?1:2)],t[l],s[l],n[l],o,l,l+r.length-2,i)}}static computePoolOutputShape(r,t,s,n,o,a,i){if(t.length<=0)throw new Error("input shape must be of size greater than 0");let l=[t[0],t[1]];return Wo.computeShapeHelper(r,t,l,s,n,o,a,i),l}static computeConvOutputShape(r,t,s,n,o,a,i){if(r.length<=0||t.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let l=[r[0],t[0]];return Wo.computeShapeHelper(!1,r,l,s,n,o,a,i),l}static computeShapeHelper(r,t,s,n,o,a,i,l){if(r)for(let c=0;c<t.length-2;c++)s.push(1);else for(let c=0;c<t.length-2;c++)s.push(Wo.adjustPadAndReturnShape(t[c+2],n[c],o[c],a[c],i,c,c+t.length-2,l))}static adjustPadAndReturnShape(r,t,s,n,o,a,i,l){let c=s*(n-1)+1;if(l&&l!=="NOTSET")switch(l){case"VALID":return o[a]=0,o[i]=0,Math.floor((r-c)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(s!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let p=((r+t-1)/t-1)*t+n-r;return o[a]=Math.floor(l==="SAME_LOWER"?(p+1)/2:p/2),o[i]=p-o[a],Math.floor((r+p-n)/t+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((r+o[a]+o[i]-c)/t+1)}},OM=class{static getShapeOfGemmResult(e,r,t,s,n){if(e.length!==2||t.length!==2)throw new Error("shape need to be of size 2");let o,a,i;r?(o=e[1],a=e[0]):(o=e[0],a=e[1]);let l=-1;if(s?(i=t[0],l=1):(i=t[1],l=0),t[l]!==a)throw new Error("dimension mismatch");if(o<=0||i<=0||a<=0)throw new Error("invalid shape specified");if(n&&!eo.isValidBroadcast(n,[o,i]))throw new Error("gemm: invalid bias shape for broadcast");return[o,i,a]}},DM=-34028234663852886e22,LM=34028234663852886e22}),cu,zM=Re(()=>{ft(),cu=(e,r)=>new(nu(r))(e)}),zc,Kl,N_,Hl,V_,ql,Ql,Xl,U_,BM,Ex=Re(()=>{Vs(),zc=(e,r=!0)=>{if(e.byteLength%8!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let t=e.byteLength/8,s=new BigInt64Array(e.buffer,e.byteOffset,t),n=new Int32Array(t);for(let o=0;o<t;o++){let a=s[o];if(a>2147483647n||a<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${o}: ${a}`);n[o]=Number(a)}return r?new Uint8Array(n.buffer):n},Kl=(e,r=!0)=>{if(e.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let t=e.byteLength/4,s=new Int32Array(e.buffer,e.byteOffset,t),n=BigInt64Array.from(s,BigInt);return r?new Uint8Array(n.buffer):n},N_=1,Hl=()=>N_++,V_=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),ql=(e,r)=>{let t=V_.get(e);if(!t)throw new Error("Unsupported data type.");return r.length>0?Math.ceil(r.reduce((s,n)=>s*n)*t/8):0},Ql=class{constructor(e){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:r,context:t,tensor:s,dataType:n,shape:o,shouldConvertInt64toInt32:a=!1}=e;this.sessionId=r,this.mlContext=t,this.mlTensor=s,this.dataType=n,this.tensorShape=o,this.shouldConvertInt64toInt32=a}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return ql(this.dataType,this.tensorShape)}destroy(){Ft("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e,r){if(e){let t=await this.mlContext.readTensor(this.mlTensor),s=Kl(new Uint8Array(t));if(r){(r instanceof ArrayBuffer?new Uint8Array(r):new Uint8Array(r.buffer,r.byteOffset,r.byteLength)).set(s);return}else return s.buffer}else return r?this.mlContext.readTensor(this.mlTensor,r):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,r,t){return this.mlContext===e&&this.dataType===r&&this.tensorShape.length===t.length&&this.tensorShape.every((s,n)=>s===t[n])}setIsInt64ToInt32Converted(e){this.isInt64ToInt32Converted=e}},Xl=class{constructor(e,r){this.tensorManager=e,this.wrapper=r}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,r,t,s){let n=r,o=this.tensorManager.getMLContext(e),a=n==="int64"&&!o.opSupportLimits().input.dataTypes.includes("int64");if(a&&(n="int32",Ft("verbose",()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")),this.wrapper){if(this.wrapper.canReuseTensor(o,n,t))return this.wrapper.tensor;if(s){if(this.wrapper.byteLength!==ql(n,t))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let i=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,n,t,i,!0,!0,a),s&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let r=e;if(this.wrapper)if(this.wrapper.shouldConvertInt64toInt32&&(r=zc(e,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),r.byteLength===this.wrapper.byteLength){this.wrapper.write(r);return}else Ft("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(r):this.activeUpload=new Uint8Array(r)}async download(e){if(this.activeUpload){let r=this.wrapper?.isInt64ToInt32Converted?Kl(this.activeUpload):this.activeUpload;if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(r):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(r);return}else return r.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32,e):this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32)}},U_=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let r=this.backend.getMLContext(e);if(!r)throw new Error("MLContext not found for session.");return r}reserveTensorId(){let e=Hl();return this.tensorTrackersById.set(e,new Xl(this)),e}releaseTensorId(e){let r=this.tensorTrackersById.get(e);r&&(this.tensorTrackersById.delete(e),r.tensorWrapper&&this.releaseTensor(r.tensorWrapper))}async ensureTensor(e,r,t,s,n){Ft("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${r}, dataType: ${t}, shape: ${s}, copyOld: ${n}}`);let o=this.tensorTrackersById.get(r);if(!o)throw new Error("Tensor not found.");return o.ensureTensor(e,t,s,n)}upload(e,r){let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");t.upload(r)}async download(e,r){Ft("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${r?.byteLength}}`);let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");return t.download(r)}releaseTensorsForSession(e){for(let r of this.freeTensors)r.sessionId===e&&r.destroy();this.freeTensors=this.freeTensors.filter(r=>r.sessionId!==e)}registerTensor(e,r,t,s){let n=this.getMLContext(e),o=Hl(),a=new Ql({sessionId:e,context:n,tensor:r,dataType:t,shape:s});return this.tensorTrackersById.set(o,new Xl(this,a)),this.externalTensors.add(a),o}async getCachedTensor(e,r,t,s,n,o,a=!1){let i=this.getMLContext(e);for(let[c,p]of this.freeTensors.entries())if(p.canReuseTensor(i,r,t)){Ft("verbose",()=>`[WebNN] Reusing tensor {dataType: ${r}, shape: ${t}}`);let d=this.freeTensors.splice(c,1)[0];return d.sessionId=e,d}Ft("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${r}, shape: ${t}}`);let l=await i.createTensor({dataType:r,shape:t,dimensions:t,usage:s,writable:n,readable:o});return new Ql({sessionId:e,context:i,tensor:l,dataType:r,shape:t,shouldConvertInt64toInt32:a})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},BM=(...e)=>new U_(...e)}),Vi,W_,RM,Px=Re(()=>{ft(),Cn(),zM(),Ex(),Vs(),Vi=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),W_=(e,r)=>{if(e===r)return!0;if(e===void 0||r===void 0)return!1;let t=Object.keys(e).sort(),s=Object.keys(r).sort();return t.length===s.length&&t.every((n,o)=>n===s[o]&&e[n]===r[n])},RM=class{constructor(e){this.tensorManager=BM(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,lu(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){Ft("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){Ft("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let r=this.temporarySessionTensorIds.get(e);if(r){for(let t of r)Ft("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${t}}`),this.tensorManager.releaseTensorId(t);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let t=this.mlContextCache.findIndex(s=>s.gpuDevice===e);if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:s}),s}}else if(e===void 0){let t=this.mlContextCache.findIndex(s=>s.options===void 0&&s.gpuDevice===void 0);if(t!==-1)return this.mlContextCache[t].mlContext;{let s=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:s}),s}}let r=this.mlContextCache.findIndex(t=>W_(t.options,e));if(r!==-1)return this.mlContextCache[r].mlContext;{let t=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:t}),t}}registerMLContext(e,r){this.mlContextBySessionId.set(e,r);let t=this.sessionIdsByMLContext.get(r);t||(t=new Set,this.sessionIdsByMLContext.set(r,t)),t.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e);let r=this.mlContextBySessionId.get(e);if(!r)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let t=this.sessionIdsByMLContext.get(r);if(t.delete(e),t.size===0){this.sessionIdsByMLContext.delete(r);let s=this.mlContextCache.findIndex(n=>n.mlContext===r);s!==-1&&this.mlContextCache.splice(s,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){Ft("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,r,t,s,n){let o=Vi.get(t);if(!o)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,r,o,s,n)}async createTemporaryTensor(e,r,t){Ft("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${r}, shape: ${t}}`);let s=Vi.get(r);if(!s)throw new Error(`Unsupported ONNX data type: ${r}`);let n=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,n,s,t,!1);let o=this.temporarySessionTensorIds.get(e);return o?o.push(n):this.temporarySessionTensorIds.set(e,[n]),n}uploadTensor(e,r){if(!Kt().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");Ft("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${r.byteLength}}`),this.tensorManager.upload(e,r)}async downloadTensor(e,r){return this.tensorManager.download(e,r)}createMLTensorDownloader(e,r){return async()=>{let t=await this.tensorManager.download(e);return cu(t,r)}}registerMLTensor(e,r,t,s){let n=Vi.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let o=this.tensorManager.registerTensor(e,r,n,s);return Ft("verbose",()=>`[WebNN] registerMLTensor {tensor: ${r}, dataType: ${n}, dimensions: ${s}} -> {tensorId: ${o}}`),o}registerMLConstant(e,r,t,s,n,o,a=!1){if(!o)throw new Error("External mounted files are not available.");let i=e;e.startsWith("./")&&(i=e.substring(2));let l=o.get(i);if(!l)throw new Error(`File with name ${i} not found in preloaded files.`);if(r+t>l.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let c=l.slice(r,r+t).buffer,p;switch(n.dataType){case"float32":p=new Float32Array(c);break;case"float16":p=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(c):new Uint16Array(c);break;case"int32":p=new Int32Array(c);break;case"uint32":p=new Uint32Array(c);break;case"int64":a?(p=zc(new Uint8Array(c),!1),n.dataType="int32"):p=new BigInt64Array(c);break;case"uint64":p=new BigUint64Array(c);break;case"int8":p=new Int8Array(c);break;case"int4":case"uint4":case"uint8":p=new Uint8Array(c);break;default:throw new Error(`Unsupported data type: ${n.dataType} in creating WebNN Constant from external data.`)}return Ft("verbose",()=>`[WebNN] registerMLConstant {dataType: ${n.dataType}, shape: ${n.shape}}} ${a?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),s.constant(n,p)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}isGraphInput(e,r){let t=this.sessionGraphInputs.get(e);return t?t.includes(r):!1}isInt64Supported(e){return!!this.mlContextBySessionId.get(e)?.opSupportLimits().input.dataTypes.includes("int64")}flush(){}}}),uu=Re(()=>{}),Jl,Ui,Wi,G_,K_,Yl,Bc,H_,jM,Cx=Re(()=>{Vs(),uu(),Jl=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Ui=[],Wi=e=>Math.ceil(Number(e)/16)*16,G_=e=>{for(let r=0;r<Ui.length;r++){let t=Ui[r];if(e<=t)return t}return Math.ceil(e/16)*16},K_=1,Yl=()=>K_++,Bc=async(e,r,t,s)=>{let n=Wi(t),o=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(r,0,o,0,n),e.flush(),await o.mapAsync(GPUMapMode.READ);let i=o.getMappedRange();if(s){let l=s();return l.set(new Uint8Array(i,0,t)),l}else return new Uint8Array(i.slice(0,t))}finally{o.destroy()}},H_=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[r]of Jl)Ui.push(r),this.freeBuffers.set(r,[]),this.freeUniformBuffers.set(r,[]);this.sessionCount=0}upload(e,r){let t=r.buffer,s=r.byteOffset,n=r.byteLength,o=Wi(n),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(Number(a.originalSize)!==n)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${n}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=i.getMappedRange();new Uint8Array(l).set(new Uint8Array(t,s,n)),i.unmap();let c=this.backend.device.createCommandEncoder();c.copyBufferToBuffer(i,0,a.gpuData.buffer,0,o),this.backend.device.queue.submit([c.finish()]),i.destroy(),Ft("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,r){let t=this.storageCache.get(e);if(!t)throw new Error("source gpu data for memcpy does not exist");let s=this.storageCache.get(r);if(!s)throw new Error("destination gpu data for memcpy does not exist");if(t.originalSize!==s.originalSize)throw new Error("inconsistent source and destination gpu data size");let n=Wi(t.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(t.gpuData.buffer,0,s.gpuData.buffer,0,n)}registerExternalBuffer(e,r,t){let s;if(t){if(s=t[0],e===t[1])return Ft("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${s}, buffer is the same, skip.`),s;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else s=Yl();return this.storageCache.set(s,{gpuData:{id:s,type:0,buffer:e},originalSize:r}),Ft("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${s}, registered.`),s}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),Ft("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let t=G_(e),s,n=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,o=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(n||o){let i=(n?this.freeBuffers:this.freeUniformBuffers).get(t);i?i.length>0?s=i.pop():s=this.backend.device.createBuffer({size:t,usage:r}):s=this.backend.device.createBuffer({size:t,usage:r})}else s=this.backend.device.createBuffer({size:t,usage:r});let a={id:Yl(),type:0,buffer:s};return this.storageCache.set(a.id,{gpuData:a,originalSize:Number(e)}),Ft("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){return this.storageCache.get(e)?.gpuData}release(e){let r=typeof e=="bigint"?Number(e):e,t=this.storageCache.get(r);if(!t){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return Ft("verbose",()=>`[WebGPU] GpuDataManager.release(id=${r}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(r),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,r){let t=this.storageCache.get(Number(e));if(!t)throw new Error("data does not exist");await Bc(this.backend,t.gpuData.buffer,t.originalSize,r)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let r=Jl.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let t=this.freeBuffers.get(e.size)||[];r===void 0||t.length>=r?e.destroy():t.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let t=this.freeUniformBuffers.get(e.size)||[];r===void 0||t.length>=r?e.destroy():t.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let r of this.buffersPending)e.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let r=this.capturedPendingBuffers.get(e);r&&(r.forEach(t=>{t.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(Ft("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map)}},jM=(...e)=>new H_(...e)}),q_,Bt,lr=Re(()=>{q_=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Bt=e=>new q_(e)}),to,Gi,kr,jr,ct,ar,Rc,Zn,tn,at,Lo,Ce,it,NM,du,Q_,VM,xt=Re(()=>{ft(),yt(),to=64,Gi=(e,r)=>{if(r===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return r>1?`vec${r}<f16>`:"f16";case 1:return r>1?`vec${r}<f32>`:"f32";case 6:return r>1?`vec${r}<i32>`:"i32";case 12:return r>1?`vec${r}<u32>`:"u32";case 7:if(r>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(r>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(r!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},kr=(e,r=1)=>{let t=Gi(e,r);return typeof t=="string"?t:t[0]},jr=(e,r=1)=>{let t=Gi(e,r);return typeof t=="string"?t:t[1]},ct=(...e)=>{let r=[];return e.forEach(t=>{t.length!==0&&r.push({type:12,data:t},{type:12,data:we.computeStrides(t)})}),r},ar=e=>e%4===0?4:e%2===0?2:1,Rc=(e="f32",r,t="0")=>!r||r===1?`${e}(${t})`:`vec${r}<${e}>(${t})`,Zn=(e,r,t)=>e==="f32"?t:r===1?`f32(${t})`:`vec${r}<f32>(${t})`,tn=(e,r)=>r===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:r===2?`(${e}.x + ${e}.y)`:r===3?`(${e}.x + ${e}.y + ${e}.z)`:e,at=(e,r,t,s)=>e.startsWith("uniforms.")&&t>4?typeof r=="string"?s==="f16"?`${e}[(${r}) / 8][(${r}) % 8 / 4][(${r}) % 8 % 4]`:`${e}[(${r}) / 4][(${r}) % 4]`:s==="f16"?`${e}[${Math.floor(r/8)}][${Math.floor(r%8/4)}][${r%8%4}]`:`${e}[${Math.floor(r/4)}][${r%4}]`:t>1?`${e}[${r}]`:e,Lo=(e,r,t,s,n)=>{let o=typeof t=="number",a=o?t:t.length,i=[...new Array(a).keys()],l=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,c=Gi(r,n),p=typeof c=="string"?c:c[1],d=typeof c=="string"?c:c[0],u={indices:l,value:p,storage:d,tensor:r},f=B=>typeof B=="string"?B:`${B}u`,_={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},v=o?"uniforms.":"",I=`${v}${e}_shape`,M=`${v}${e}_strides`,y="";for(let B=0;B<a-1;B++)y+=`
    let dim${B} = current / ${at(M,B,a)};
    let rest${B} = current % ${at(M,B,a)};
    indices[${B}] = dim${B};
    current = rest${B};
    `;y+=`indices[${a-1}] = current;`;let $=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${u.indices} {
    var indices: ${u.indices};
    var current = offset;
    ${y}
    return indices;
  }`,x=B=>(_.offsetToIndices=!0,a<2?B:`o2i_${e}(${B})`),T=[];if(a>=2)for(let B=a-1;B>=0;B--)T.push(`${at(M,B,a)} * (indices[${B}])`);let E=a<2?"":`
  fn i2o_${e}(indices: ${u.indices}) -> u32 {
    return ${T.join("+")};
  }`,b=B=>(_.indicesToOffset=!0,a<2?B:`i2o_${e}(${B})`),S=(...B)=>a===0?"0u":`${u.indices}(${B.map(f).join(",")})`,D=(B,F)=>a<2?`${B}`:`${at(B,F,a)}`,O=(B,F,K)=>a<2?`${B}=${K};`:`${at(B,F,a)}=${K};`,H={},G=(B,F)=>{_.broadcastedIndicesToOffset=!0;let K=`${F.name}broadcastedIndicesTo${e}Offset`;if(K in H)return`${K}(${B})`;let j=[];for(let ie=a-1;ie>=0;ie--){let ke=F.indicesGet("outputIndices",ie+F.rank-a);j.push(`${D(M,ie)} * (${ke} % ${D(I,ie)})`)}return H[K]=`fn ${K}(outputIndices: ${F.type.indices}) -> u32 {
             return ${j.length>0?j.join("+"):"0u"};
           }`,`${K}(${B})`},z=(B,F)=>(()=>{if(u.storage===u.value)return`${e}[${B}]=${F};`;if(u.storage==="vec2<u32>"&&u.value==="i32")return`${e}[${B}]=vec2<u32>(u32(${F}), select(0u, 0xFFFFFFFFu, ${F} < 0));`;if(u.storage==="vec2<u32>"&&u.value==="u32")return`${e}[${B}]=vec2<u32>(u32(${F}), 0u);`;if(u.storage==="u32"&&u.value==="vec4<bool>")return`${e}[${B}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${F}));`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),Z=B=>(()=>{if(u.storage===u.value)return`${e}[${B}]`;if(u.storage==="vec2<u32>"&&u.value==="i32")return`i32(${e}[${B}].x)`;if(u.storage==="vec2<u32>"&&u.value==="u32")return`u32(${e}[${B}].x)`;if(u.storage==="u32"&&u.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${B}] & 0xFFu), bool(${e}[${B}] & 0xFF00u), bool(${e}[${B}] & 0xFF0000u), bool(${e}[${B}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${u.storage} and value type ${u.value} yet`)})(),Q=a<2?"":`
  fn get_${e}ByIndices(indices: ${u.indices}) -> ${p} {
    return ${Z(`i2o_${e}(indices)`)};
  }`,Y=a<2?"":(()=>{let B=i.map(K=>`d${K}: u32`).join(", "),F=i.map(K=>`d${K}`).join(", ");return`
  fn get_${e}(${B}) -> ${p} {
    return get_${e}ByIndices(${S(F)});
  }`})(),re=(...B)=>{if(B.length!==a)throw new Error(`indices length must be ${a}`);let F=B.map(f).join(",");return a===0?Z("0u"):a===1?Z(F[0]):(_.get=!0,_.getByIndices=!0,_.indicesToOffset=!0,`get_${e}(${F})`)},te=B=>a<2?Z(B):(_.getByIndices=!0,_.indicesToOffset=!0,`get_${e}ByIndices(${B})`),le=a<2?"":`
  fn set_${e}ByIndices(indices: ${u.indices}, value: ${p}) {
    ${z(`i2o_${e}(indices)`,"value")}
  }`,ue=a<2?"":(()=>{let B=i.map(K=>`d${K}: u32`).join(", "),F=i.map(K=>`d${K}`).join(", ");return`
  fn set_${e}(${B}, value: ${p}) {
    set_${e}ByIndices(${S(F)}, value);
  }`})();return{impl:()=>{let B=[],F=!1;return _.offsetToIndices&&(B.push($),F=!0),_.indicesToOffset&&(B.push(E),F=!0),_.broadcastedIndicesToOffset&&(Object.values(H).forEach(K=>B.push(K)),F=!0),_.set&&(B.push(ue),F=!0),_.setByIndices&&(B.push(le),F=!0),_.get&&(B.push(Y),F=!0),_.getByIndices&&(B.push(Q),F=!0),!o&&F&&B.unshift(`const ${I} = ${u.indices}(${t.join(",")});`,`const ${M} = ${u.indices}(${we.computeStrides(t).join(",")});`),B.join(`
`)},type:u,offsetToIndices:x,indicesToOffset:b,broadcastedIndicesToOffset:G,indices:S,indicesGet:D,indicesSet:O,set:(...B)=>{if(B.length!==a+1)throw new Error(`indices length must be ${a}`);let F=B[a];if(typeof F!="string")throw new Error("value must be string");let K=B.slice(0,a).map(f).join(",");return a===0?z("0u",F):a===1?z(K[0],F):(_.set=!0,_.setByIndices=!0,_.indicesToOffset=!0,`set_${e}(${K}, ${F})`)},setByOffset:z,setByIndices:(B,F)=>a<2?z(B,F):(_.setByIndices=!0,_.indicesToOffset=!0,`set_${e}ByIndices(${B}, ${F});`),get:re,getByOffset:Z,getByIndices:te,usage:s,name:e,strides:M,shape:I,rank:a}},Ce=(e,r,t,s=1)=>Lo(e,r,t,"input",s),it=(e,r,t,s=1)=>Lo(e,r,t,"output",s),NM=(e,r,t)=>Lo(e,r,t,"atomicOutput",1),du=(e,r,t,s=1)=>Lo(e,r,t,"internal",s),Q_=class{constructor(e,r){this.normalizedDispatchGroup=e,this.limits=r,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=to){let r=typeof e=="number"?e:e[0],t=typeof e=="number"?1:e[1],s=typeof e=="number"?1:e[2];if(r>this.limits.maxComputeWorkgroupSizeX||t>this.limits.maxComputeWorkgroupSizeY||s>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${t}, ${s}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*t*s>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${t}, ${s}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let n=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,o=n?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=n?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${r*t*s}u + local_idx;`;return`@compute @workgroup_size(${r}, ${t}, ${s})
  fn main(${o}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,r){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let t=e.usage==="input"?"read":"read_write",s=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${r}) var<storage, ${t}> ${e.name}: array<${s}>;`}declareVariables(...e){return e.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(e,r,t=1){return this.uniforms.push({name:e,type:r,length:t}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:r,type:t,length:s}of this.uniforms)if(s&&s>4)t==="f16"?e.push(`@align(16) ${r}:array<mat2x4<${t}>, ${Math.ceil(s/8)}>`):e.push(`${r}:array<vec4<${t}>, ${Math.ceil(s/4)}>`);else{let n=s==null||s===1?t:`vec${s}<${t}>`;e.push(`${r}:${n}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=r=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(r)];return this.uniforms.map(r=>[e(r.type),r.length??1])}},VM=(e,r)=>new Q_(e,r)}),X_,Zl,J_,Y_,Z_,ef,rs,UM,WM,rn=Re(()=>{ft(),yt(),lr(),xt(),X_=(e,r)=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.");if(r.length!==0&&r.length!==e[0].dims.length)throw new Error(`perm size ${r.length} does not match input rank ${e[0].dims.length}`)},Zl=(e,r)=>r.length!==0?r:[...new Array(e).keys()].reverse(),J_=(e,r)=>we.sortBasedOnPerm(e,Zl(e.length,r)),Y_=(e,r,t,s)=>{let n=`fn perm(i: ${s.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`;for(let o=0;o<r;++o)n+=`a[${e[o]}]=i[${o}];`;return n+="return a;}"},Z_=(e,r)=>{let t=[],s=[];for(let n=0;n<e.length;++n)e[n]!==1&&t.push(e[n]),e[r[n]]!==1&&s.push(r[n]);return{newShape:t,newPerm:s}},ef=(e,r)=>{let t=0;for(let s=0;s<e.length;++s)if(r[e[s]]!==1){if(e[s]<t)return!1;t=e[s]}return!0},rs=(e,r)=>{let t=e.dataType,s=e.dims.length,n=Zl(s,r),o=J_(e.dims,n),a=e.dims,i=o,l=s<2||ef(n,e.dims),c;if(l)return c=_=>{let v=Ce("input",t,a,4),I=it("output",t,i,4);return`
  ${_.registerUniform("output_size","u32").declareVariables(v,I)}
  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let _=we.size(o);return{outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(_/64/4)},programUniforms:[{type:12,data:Math.ceil(_/4)}]}},getShaderSource:c};let{newShape:p,newPerm:d}=Z_(e.dims,n),u=we.areEqual(d,[2,3,1]),f=we.areEqual(d,[3,1,2]);if(p.length===2||u||f){a=u?[p[0],p[1]*p[2]]:f?[p[0]*p[1],p[2]]:p,i=[a[1],a[0]];let _=16;return c=v=>{let I=Ce("a",t,a.length),M=it("output",t,i.length);return`
  ${v.registerUniform("output_size","u32").declareVariables(I,M)}
  var<workgroup> tile : array<array<${M.type.value}, ${_+1}>, ${_}>;
  ${v.mainStart([_,_,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${_} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${_}u + local_id.x;
    let input_row = workgroup_id_x * ${_}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${I.getByIndices(`${I.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${_}u + local_id.x;
    let output_row = workgroup_id_y * ${_}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${M.setByIndices(`${M.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let v=we.size(o);return{outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(i[1]/_),y:Math.ceil(i[0]/_)},programUniforms:[{type:12,data:v},...ct(a,i)]}},getShaderSource:c}}return c=_=>{let v=Ce("a",t,a.length),I=it("output",t,i.length);return`
  ${_.registerUniform("output_size","u32").declareVariables(v,I)}

  ${Y_(n,s,v,I)}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${I.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${I.setByOffset("global_idx",v.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>{let _=we.size(o);return{outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:[{type:12,data:_},...ct(a,i)]}},getShaderSource:c}},UM=(e,r)=>{X_(e.inputs,r.perm),e.compute(rs(e.inputs[0],r.perm))},WM=e=>Bt({perm:e.perm})}),tf,rf,sf,nf,of,af,lf,cf,uf,df,fs,GM,KM,HM,qM,QM,XM,JM,YM,ZM,eb,Sx=Re(()=>{ft(),yt(),xt(),pu(),rn(),tf={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},rf={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},sf={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},nf={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},of=(e,r)=>{let t=[];for(let s=r-e;s<r;++s)t.push(s);return t},af=(e,r)=>{let t=[],s=e.length;for(let o=0;o<s;o++)r.indexOf(o)===-1&&t.push(e[o]);let n=r.map(o=>e[o]);return[t,n]},lf=(e,r)=>{let t=e.length+r.length,s=[],n=0;for(let o=0;o<t;o++)r.indexOf(o)===-1?s.push(e[n++]):s.push(1);return s},cf=(e,r)=>{for(let t=0;t<e.length;++t)if(e[e.length-t-1]!==r-1-t)return!1;return!0},uf=(e,r)=>{let t=[];if(!cf(e,r)){for(let s=0;s<r;++s)e.indexOf(s)===-1&&t.push(s);e.forEach(s=>t.push(s))}return t},df=(e,r,t,s,n,o,a)=>{let i=t[0].dims,l=we.size(o),c=we.size(a),p=Ce("_A",t[0].dataType,i),d=it("output",n,o),u=64;l===1&&(u=256);let f=`
          var<workgroup> aBestValues : array<f32, ${u}>;
       `,_=v=>`
        ${v.registerUniform("reduceSize","u32").declareVariables(p,d)}
        ${f}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${v.mainStart(u)}

          let outputIndex = global_idx / ${u};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${sf[s]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${u}) {
           let candidate = f32(${p.getByOffset("offset + k")});
           bestValue = ${tf[s]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${u}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${rf[s]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${d.setByOffset("outputIndex",`${s==="mean"?`${d.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${d.type.storage}(${nf[s]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${r};${u}`,inputDependencies:["type"]},getShaderSource:_,getRunData:()=>({outputs:[{dims:o,dataType:n}],dispatchGroup:{x:l},programUniforms:[{type:12,data:c}]})}},fs=(e,r,t,s)=>{let n=e.inputs.length===1?t:jc(e.inputs,t),o=n.axes;o.length===0&&!n.noopWithEmptyAxes&&(o=e.inputs[0].dims.map((f,_)=>_));let a=we.normalizeAxes(o,e.inputs[0].dims.length),i=a,l=e.inputs[0],c=uf(i,e.inputs[0].dims.length);c.length>0&&(l=e.compute(rs(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],i=of(i.length,l.dims.length));let[p,d]=af(l.dims,i),u=p;n.keepDims&&(u=lf(p,a)),e.compute(df(r,n.cacheKey,[l],s,e.inputs[0].dataType,u,d),{inputs:[l]})},GM=(e,r)=>{fs(e,"ReduceMeanShared",r,"mean")},KM=(e,r)=>{fs(e,"ReduceL1Shared",r,"l1")},HM=(e,r)=>{fs(e,"ReduceL2Shared",r,"l2")},qM=(e,r)=>{fs(e,"ReduceLogSumExpShared",r,"logSumExp")},QM=(e,r)=>{fs(e,"ReduceMaxShared",r,"max")},XM=(e,r)=>{fs(e,"ReduceMinShared",r,"min")},JM=(e,r)=>{fs(e,"ReduceProdShared",r,"prod")},YM=(e,r)=>{fs(e,"ReduceSumShared",r,"sum")},ZM=(e,r)=>{fs(e,"ReduceSumSquareShared",r,"sumSquare")},eb=(e,r)=>{fs(e,"ReduceLogSumShared",r,"logSum")}}),gs,pf,ia,jc,ws,mf,hf,_f,ff,gf,wf,Mf,bf,yf,vf,Ms,tb,rb,sb,nb,ob,ib,ab,lb,cb,ub,pu=Re(()=>{ft(),yt(),lr(),xt(),Sx(),gs=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},pf=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],ia=(e,r,t,s,n,o,a=!1,i=!1)=>{let l=[],c=t[0].dims,p=c.length,d=we.normalizeAxes(n,p),u=!i&&d.length===0;c.forEach((v,I)=>{u||d.indexOf(I)>=0?a&&l.push(1):l.push(v)});let f=l.length,_=we.size(l);return{name:e,shaderCache:r,getShaderSource:v=>{let I=[],M=Ce("_A",t[0].dataType,p),y=it("output",o,f),$=s(M,y,d),x=$[2];for(let T=0,E=0;T<p;T++)u||d.indexOf(T)>=0?(a&&E++,x=`for(var j${T}: u32 = 0; j${T} < ${c[T]}; j${T}++) {
                  ${$[2].includes("last_index")?`let last_index = j${T};`:""}
                  ${M.indicesSet("input_indices",T,`j${T}`)}
                  ${x}
                }`):(I.push(`${M.indicesSet("input_indices",T,y.indicesGet("output_indices",E))};`),E++);return`

        ${v.registerUniform("output_size","u32").declareVariables(M,y)}

        ${v.mainStart()}
          ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${M.type.indices};
          let output_indices = ${y.offsetToIndices("global_idx")};

          ${I.join(`
`)}
          ${$[0]}       // init ops for reduce max/min
          ${$[1]}
          ${x}
          ${$[3]}
          ${$.length===4?y.setByOffset("global_idx","value"):$.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:l,dataType:o}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:[{type:12,data:_},...ct(c,l)]})}},jc=(e,r)=>{let t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(s=>t.push(Number(s))),Bt({axes:t,keepDims:r.keepDims,noopWithEmptyAxes:r.noopWithEmptyAxes})},ws=(e,r,t,s)=>{let n=e.inputs,o=n.length===1?t:jc(n,t);e.compute(ia(r,{hint:o.cacheKey,inputDependencies:["rank"]},[n[0]],o.noopWithEmptyAxes&&o.axes.length===0?pf:s,o.axes,n[0].dataType,o.keepDims,o.noopWithEmptyAxes),{inputs:[0]})},mf=(e,r)=>{gs(e.inputs),ws(e,"ReduceLogSum",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,"value = log(value);"])},hf=(e,r)=>{gs(e.inputs),ws(e,"ReduceL1",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += abs(${t.getByIndices("input_indices")});`,""])},_f=(e,r)=>{gs(e.inputs),ws(e,"ReduceL2",r,(t,s)=>[`var t = ${s.type.value}(0); var value = ${s.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},ff=(e,r)=>{gs(e.inputs),ws(e,"ReduceLogSumExp",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += exp(${t.getByIndices("input_indices")});`,"value = log(value);"])},gf=(e,r)=>{gs(e.inputs),ws(e,"ReduceMax",r,(t,s,n)=>{let o=[];for(let a=0;a<t.rank;a++)(n.indexOf(a)>=0||n.length===0)&&o.push(t.indicesSet("input_indices",a,0));return[`${o.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = max(value, ${t.getByIndices("input_indices")});`,""]})},wf=(e,r)=>{gs(e.inputs),ws(e,"ReduceMean",r,(t,s,n)=>{let o=1;for(let a=0;a<t.rank;a++)(n.indexOf(a)>=0||n.length===0)&&(o*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${s.type.value}(sum / ${o});`]})},Mf=(e,r)=>{gs(e.inputs),ws(e,"ReduceMin",r,(t,s,n)=>{let o=[];for(let a=0;a<t.rank;a++)(n.indexOf(a)>=0||n.length===0)&&o.push(`input_indices[${a}] = 0;`);return[`${o.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = min(value, ${t.getByIndices("input_indices")});`,""]})},bf=(e,r)=>{gs(e.inputs),ws(e,"ReduceProd",r,(t,s)=>[`var value = ${s.type.storage}(1);`,"",`value *= ${t.getByIndices("input_indices")};`,""])},yf=(e,r)=>{gs(e.inputs),ws(e,"ReduceSum",r,(t,s)=>[`var value = ${s.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,""])},vf=(e,r)=>{gs(e.inputs),ws(e,"ReduceSumSquare",r,(t,s)=>[`var t = ${s.type.value}(0); var value = ${s.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += t * t;`,""])},Ms=(e,r,t)=>{if(r.length===0)return t;let s=1,n=1;for(let o=0;o<r.length;o++)r.indexOf(o)===-1?s*=e[o]:n*=e[o];return n<32&&s>1024},tb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?wf(e,r):GM(e,r)},rb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?hf(e,r):KM(e,r)},sb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?_f(e,r):HM(e,r)},nb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?ff(e,r):qM(e,r)},ob=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?gf(e,r):QM(e,r)},ib=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?Mf(e,r):XM(e,r)},ab=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?bf(e,r):JM(e,r)},lb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?yf(e,r):YM(e,r)},cb=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?vf(e,r):ZM(e,r)},ub=(e,r)=>{Ms(e.inputs[0].dims,r.axes,r.noopWithEmptyAxes)?mf(e,r):eb(e,r)}}),ec,db,pb,Nc,$x=Re(()=>{ft(),lr(),pu(),ec=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},db=(e,r)=>{ec(e.inputs);let t=(s,n,o)=>{let a=[];for(let i=0;i<s.rank;i++)(o.indexOf(i)>=0||o.length===0)&&a.push(`input_indices[${i}] = 0;`);return[`${a.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${s.getByIndices("input_indices")} ${r.selectLastIndex>0?"<=":"<"} value) {
         value = ${s.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(ia("ArgMin",{hint:r.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[r.axis],7,r.keepDims),{inputs:[0]})},pb=(e,r)=>{ec(e.inputs);let t=(s,n,o)=>{let a=[];for(let i=0;i<s.rank;i++)(o.indexOf(i)>=0||o.length===0)&&a.push(`input_indices[${i}] = 0;`);return[`${a.join(`
`)}`,`var value = ${s.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${s.getByIndices("input_indices")} ${r.selectLastIndex>0?">=":">"} value) {
         value = ${s.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(ia("argMax",{hint:r.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[r.axis],7,r.keepDims),{inputs:[0]})},Nc=e=>Bt(e)}),xf,Ki,Tf,Ef,Pf,Xo,Cf,mb,mu=Re(()=>{ft(),yt(),uu(),xt(),xf=(e,r)=>{let t=e[0],s=e[1],n=e[2],o=e[3],a=e[4],i=e[5];if(a&&i)throw new Error("Attention cannot have both past and attention_bias");if(t.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let l=t.dims[0],c=t.dims[1],p=t.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(s.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(s.dims[0]!==p)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==s.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let d=n.dims[0]/3,u=d,f=u;if(r.qkvHiddenSizes.length>0){if(r.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let $ of r.qkvHiddenSizes)if($%r.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");d=r.qkvHiddenSizes[0],u=r.qkvHiddenSizes[1],f=r.qkvHiddenSizes[2]}let _=c;if(d!==u)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==d+u+f)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let v=0;if(a){if(u!==f)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==r.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==u/r.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');r.pastPresentShareBuffer||(v=a.dims[3])}let I=_+v,M=-1,y=0;if(o)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(i){if(i.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(i.dims[0]!==l||i.dims[1]!==r.numHeads||i.dims[2]!==c||i.dims[3]!==I)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:l,sequenceLength:c,pastSequenceLength:v,kvSequenceLength:_,totalSequenceLength:I,maxSequenceLength:M,inputHiddenSize:p,hiddenSize:d,vHiddenSize:f,headSize:Math.floor(d/r.numHeads),vHeadSize:Math.floor(f/r.numHeads),numHeads:r.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:r.maskFilterValue,maskType:y,scale:r.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ki=(e,r,t)=>r&&e?`
      let total_sequence_length_input = u32(${r.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${t?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Tf=(e,r,t,s,n,o,a,i)=>{let l=ar(a?1:o),c=64,p=o/l;p<c&&(c=32);let d=Math.ceil(o/l/c),u=[{type:12,data:r},{type:12,data:t},{type:12,data:s},{type:12,data:n},{type:12,data:p},{type:12,data:d}],f=kr(e.dataType,l),_=jr(1,l),v=["type"];a&&v.push("type"),i&&v.push("type");let I=M=>{let y=it("x",e.dataType,e.dims,l),$=[y],x=a?Ce("seq_lens",a.dataType,a.dims):void 0;x&&$.push(x);let T=i?Ce("total_sequence_length_input",i.dataType,i.dims):void 0;T&&$.push(T);let E=jr(e.dataType),b=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${c}>;
  var<workgroup> thread_sum: array<f32, ${c}>;
  ${M.registerUniforms(b).declareVariables(...$)}
  ${M.mainStart([c,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${Ki(x,T,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${c}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${a?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${_}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${_}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(l){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${c}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${_}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${_}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(l){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${c}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${y.type.value}(${E}(1.0) / ${E}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${_}(x[offset + i]);
        x[offset + i] = ${y.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${a?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${y.type.value}(${E}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${c};${f};${l}`,inputDependencies:v},getShaderSource:I,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:n,z:r*t},programUniforms:u})}},Ef=(e,r,t,s,n,o,a,i,l)=>{let c=a+o.kvSequenceLength,p=[o.batchSize,o.numHeads,o.sequenceLength,c],d=e>1&&s,u=o.kvNumHeads?o.kvNumHeads:o.numHeads,f=d?[o.batchSize,u,c,o.headSize]:void 0,_=o.nReps?o.nReps:1,v=o.scale===0?1/Math.sqrt(o.headSize):o.scale,I=ar(o.headSize),M=o.headSize/I,y=12,$={x:Math.ceil(c/y),y:Math.ceil(o.sequenceLength/y),z:o.batchSize*o.numHeads},x=[{type:12,data:o.sequenceLength},{type:12,data:M},{type:12,data:c},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:1,data:v},{type:12,data:a},{type:12,data:o.kvSequenceLength},{type:12,data:_}],T=d&&s&&we.size(s.dims)>0,E=["type","type"];T&&E.push("type"),n&&E.push("type"),i&&E.push("type"),l&&E.push("type");let b=[{dims:p,dataType:r.dataType,gpuDataType:0}];d&&b.push({dims:f,dataType:r.dataType,gpuDataType:0});let S=D=>{let O=Ce("q",r.dataType,r.dims,I),H=Ce("key",t.dataType,t.dims,I),G=[O,H];if(T){let le=Ce("past_key",s.dataType,s.dims,I);G.push(le)}n&&G.push(Ce("attention_bias",n.dataType,n.dims));let z=i?Ce("seq_lens",i.dataType,i.dims):void 0;z&&G.push(z);let Z=l?Ce("total_sequence_length_input",l.dataType,l.dims):void 0;Z&&G.push(Z);let Q=it("output",r.dataType,p),Y=[Q];d&&Y.push(it("present_key",r.dataType,f,I));let re=jr(1,I),te=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${y}u;

  var<workgroup> tileQ: array<${O.type.storage}, ${y*y}>;
  var<workgroup> tileK: array<${O.type.storage}, ${y*y}>;
  ${D.registerUniforms(te).declareVariables(...G,...Y)}
  ${D.mainStart([y,y,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${_===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${_===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${Ki(z,Z,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${T&&d?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${d?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${re}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${T&&d?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${d?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${re}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(I){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${I}`)}})()};
        output[outputIdx] = ${Q.type.value} (sum * uniforms.alpha) + ${n?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${I};${n!==void 0};${s!==void 0};${e}`,inputDependencies:E},getRunData:()=>({outputs:b,dispatchGroup:$,programUniforms:x}),getShaderSource:S}},Pf=(e,r,t,s,n,o,a=void 0,i=void 0)=>{let l=o+n.kvSequenceLength,c=n.nReps?n.nReps:1,p=n.vHiddenSize*c,d=e>1&&s,u=n.kvNumHeads?n.kvNumHeads:n.numHeads,f=d?[n.batchSize,u,l,n.headSize]:void 0,_=[n.batchSize,n.sequenceLength,p],v=12,I={x:Math.ceil(n.vHeadSize/v),y:Math.ceil(n.sequenceLength/v),z:n.batchSize*n.numHeads},M=[{type:12,data:n.sequenceLength},{type:12,data:l},{type:12,data:n.vHeadSize},{type:12,data:n.numHeads},{type:12,data:n.headSize},{type:12,data:p},{type:12,data:o},{type:12,data:n.kvSequenceLength},{type:12,data:c}],y=d&&s&&we.size(s.dims)>0,$=["type","type"];y&&$.push("type"),a&&$.push("type"),i&&$.push("type");let x=[{dims:_,dataType:r.dataType,gpuDataType:0}];d&&x.push({dims:f,dataType:r.dataType,gpuDataType:0});let T=E=>{let b=Ce("probs",r.dataType,r.dims),S=Ce("v",t.dataType,t.dims),D=[b,S];y&&D.push(Ce("past_value",s.dataType,s.dims));let O=a?Ce("seq_lens",a.dataType,a.dims):void 0;a&&D.push(O);let H=i?Ce("total_sequence_length_input",i.dataType,i.dims):void 0;i&&D.push(H);let G=[it("output",r.dataType,_)];d&&G.push(it("present_value",r.dataType,f));let z=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${v}u;
  var<workgroup> tileQ: array<${b.type.value}, ${v*v}>;
  var<workgroup> tileV: array<${b.type.value}, ${v*v}>;
  ${E.registerUniforms(z).declareVariables(...D,...G)}
  ${E.mainStart([v,v,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${c===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${c===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${Ki(O,H,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${y&&d?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${d?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${b.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${y&&d?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${d?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${s!==void 0};${e}`,inputDependencies:$},getRunData:()=>({outputs:x,dispatchGroup:I,programUniforms:M}),getShaderSource:T}},Xo=(e,r,t,s,n,o,a,i,l,c,p=void 0,d=void 0)=>{let u=Math.min(e.outputCount,1+(a?1:0)+(i?1:0)),f=u>1?c.pastSequenceLength:0,_=f+c.kvSequenceLength,v=l&&we.size(l.dims)>0?l:void 0,I=[r,t];u>1&&a&&we.size(a.dims)>0&&I.push(a),v&&I.push(v),p&&I.push(p),d&&I.push(d);let M=e.compute(Ef(u,r,t,a,v,c,f,p,d),{inputs:I,outputs:u>1?[-1,1]:[-1]})[0];e.compute(Tf(M,c.batchSize,c.numHeads,f,c.sequenceLength,_,p,d),{inputs:p&&d?[M,p,d]:[M],outputs:[]});let y=[M,s];u>1&&i&&we.size(i.dims)>0&&y.push(i),p&&y.push(p),d&&y.push(d),e.compute(Pf(u,M,s,i,c,f,p,d),{inputs:y,outputs:u>1?[0,2]:[0]})},Cf=(e,r)=>{let t=[r.batchSize,r.numHeads,r.sequenceLength,r.headSize],s=r.sequenceLength,n=r.inputHiddenSize,o=r.headSize,a=12,i={x:Math.ceil(r.headSize/a),y:Math.ceil(r.sequenceLength/a),z:r.batchSize*r.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],c=[{type:12,data:s},{type:12,data:n},{type:12,data:o},{type:12,data:r.numHeads},{type:12,data:r.headSize},{type:12,data:r.hiddenSize},{type:12,data:r.hiddenSize+r.hiddenSize+r.vHiddenSize}],p=d=>{let u=it("output_q",l[0].dataType,t),f=it("output_k",l[0].dataType,t),_=it("output_v",l[0].dataType,t),v=Ce("input",l[0].dataType,l[0].dims),I=Ce("weight",l[1].dataType,l[1].dims),M=Ce("bias",l[2].dataType,l[2].dims),y=v.type.storage,$=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${y}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${y}, ${a*a}>;
  var<workgroup> tileWeightK: array<${y}, ${a*a}>;
  var<workgroup> tileWeightV: array<${y}, ${a*a}>;
  ${d.registerUniforms($).declareVariables(v,I,M,u,f,_)}
  ${d.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${y}(0);
    var valueK = ${y}(0);
    var valueV = ${y}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:i,programUniforms:c}),getShaderSource:p},{inputs:l,outputs:[-1,-1,-1]})},mb=(e,r)=>{let t=xf(e.inputs,r),[s,n,o]=Cf(e,t);return Xo(e,s,n,o,e.inputs[4],void 0,void 0,void 0,e.inputs[5],t)}}),Sf,$f,kf,hb,kx=Re(()=>{Es(),ft(),yt(),lr(),xt(),Sf=(e,r)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let t=(s,n,o)=>{let a=n.length;if(a!==s.length)throw new Error(`${o}: num dimensions != ${a}`);n.forEach((i,l)=>{if(i!==s[l])throw new Error(`${o}: dim[${l}] do not match`)})};if(e[0].dims.length>1){let s=r.format==="NHWC"?r.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,r.spatial?2:void 0);t(e[1].dims,s,"Invalid input scale"),t(e[2].dims,s,"Invalid input B"),t(e[3].dims,s,"Invalid input mean"),t(e[4].dims,s,"Invalid input var")}else t(e[1].dims,[1],"Invalid input scale"),t(e[2].dims,[1],"Invalid input B"),t(e[3].dims,[1],"Invalid input mean"),t(e[4].dims,[1],"Invalid input var")},$f=(e,r)=>{let{epsilon:t,spatial:s,format:n}=r,o=e[0].dims,a=s?ar(o[o.length-1]):1,i=n==="NHWC"&&o.length>1?a:1,l=we.size(o)/a,c=s,p=c?o.length:o,d=Ce("x",e[0].dataType,e[0].dims,a),u=Ce("scale",e[1].dataType,e[1].dims,i),f=Ce("bias",e[2].dataType,e[2].dims,i),_=Ce("inputMean",e[3].dataType,e[3].dims,i),v=Ce("inputVar",e[4].dataType,e[4].dims,i),I=it("y",e[0].dataType,p,a),M=()=>{let $="";if(s)$=`let cOffset = ${o.length===1?"0u":n==="NHWC"?`outputIndices[${o.length-1}] / ${a}`:"outputIndices[1]"};`;else if(n==="NCHW")$=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{$=`var cIndices = ${u.type.indices}(0);
                       cIndices[0] = outputIndices[${o.length-1}];`;for(let x=1;x<u.rank;x++)$+=`cIndices[${x}] = outputIndices[${x}];`;$+=`let cOffset = ${u.indicesToOffset("cIndices")};`}return $},y=$=>`
  const epsilon = ${t};
  ${$.registerUniform("outputSize","u32").declareVariables(d,u,f,_,v,I)}
  ${$.mainStart()}
  ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${a}`)};
    ${M()}
    let scale = ${u.getByOffset("cOffset")};
    let bias = ${f.getByOffset("cOffset")};
    let inputMean = ${_.getByOffset("cOffset")};
    let inputVar = ${v.getByOffset("cOffset")};
    let x = ${d.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${r.epsilon}_${r.format}_${s}_${a}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:y,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c?[{type:12,data:l},...ct(o)]:[{type:12,data:l}]})}},kf=e=>Bt(e),hb=(e,r)=>{let{inputs:t,outputCount:s}=e,n=kf({...r,outputCount:s});if(Xt.webgpu.validateInputContent&&Sf(t,n),r.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute($f(t,n))}}),If,Af,_b,Ix=Re(()=>{yt(),xt(),If=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Af=e=>{let r=e[0].dims,t=e[0].dims[2],s=we.size(r)/4,n=e[0].dataType,o=Ce("input",n,r,4),a=Ce("bias",n,[t],4),i=Ce("residual",n,r,4),l=it("output",n,r,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:c=>`
  const channels = ${t}u / 4;
  ${c.declareVariables(o,a,i,l)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let value = ${o.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${i.getByOffset("global_idx")};
    ${l.setByOffset("global_idx","value")}
  }`}},_b=e=>{If(e.inputs),e.compute(Af(e.inputs))}}),Ff,Dt,fb,gb,wb,Mb,bb,yb,vb,xb,Tb,Of,Eb,Pb,Cb,Sb,Go,$b,ra,kb,Ib,Ab,Fb,Ob,Db,Lb,zb,Bb,Rb,jb,Nb,Vb,Ub,Wb,Gb,tc,Kb,Vc,Uc,Hb,qb,Qb,Df,Lf,Xb,hu=Re(()=>{ft(),yt(),lr(),xt(),Ff=(e,r,t,s,n,o,a)=>{let i=Math.ceil(r/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let c=Ce("inputData",t,[i],4),p=it("outputData",s,[i],4),d=[{name:"vec_size",type:"u32"}];return a&&d.push(...a),`
      ${e.registerUniforms(d).declareVariables(c,p)}

  ${o??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${c.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",l)}
  }`},Dt=(e,r,t,s,n,o=e.dataType,a,i)=>{let l=[{type:12,data:Math.ceil(we.size(e.dims)/4)}];return a&&l.push(...a),{name:r,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:c=>Ff(c,we.size(e.dims),e.dataType,o,t,s,i),getRunData:c=>({outputs:[{dims:e.dims,dataType:o}],dispatchGroup:{x:Math.ceil(we.size(c[0].dims)/64/4)},programUniforms:l})}},fb=e=>{e.compute(Dt(e.inputs[0],"Abs","abs"))},gb=e=>{e.compute(Dt(e.inputs[0],"Acos","acos"))},wb=e=>{e.compute(Dt(e.inputs[0],"Acosh","acosh"))},Mb=e=>{e.compute(Dt(e.inputs[0],"Asin","asin"))},bb=e=>{e.compute(Dt(e.inputs[0],"Asinh","asinh"))},yb=e=>{e.compute(Dt(e.inputs[0],"Atan","atan"))},vb=e=>{e.compute(Dt(e.inputs[0],"Atanh","atanh"))},xb=e=>Bt(e),Tb=(e,r)=>{let t;switch(r.to){case 10:t="vec4<f16>";break;case 1:t="vec4<f32>";break;case 12:t="vec4<u32>";break;case 6:t="vec4<i32>";break;case 9:t="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${r.to}`)}e.compute(Dt(e.inputs[0],"Cast",t,void 0,r.cacheKey,r.to))},Of=e=>{let r,t,s=e.length>=2&&e[1].data!==0,n=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:r=s?e[1].getFloat32Array()[0]:-34028234663852886e22,t=n?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:r=s?e[1].getUint16Array()[0]:64511,t=n?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return Bt({min:r,max:t})},Eb=(e,r)=>{let t=r||Of(e.inputs),s=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Clip",n=>`clamp(${n}, vec4<${s}>(uniforms.min), vec4<${s}>(uniforms.max))`,void 0,t.cacheKey,void 0,[{type:e.inputs[0].dataType,data:t.min},{type:e.inputs[0].dataType,data:t.max}],[{name:"min",type:s},{name:"max",type:s}]),{inputs:[0]})},Pb=e=>{e.compute(Dt(e.inputs[0],"Ceil","ceil"))},Cb=e=>{e.compute(Dt(e.inputs[0],"Cos","cos"))},Sb=e=>{e.compute(Dt(e.inputs[0],"Cosh","cosh"))},Go=e=>Bt(e),$b=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Elu",s=>`elu_vf32(${s})`,`
  const elu_alpha_ = ${t}(${r.alpha});

  fn elu_f32(a: ${t}) -> ${t} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${t}>) -> vec4<${t}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,r.cacheKey))},ra=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,kb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Erf",t=>`erf_vf32(${t})`,ra(r)))},Ib=e=>{e.compute(Dt(e.inputs[0],"Exp","exp"))},Ab=e=>{e.compute(Dt(e.inputs[0],"Floor","floor"))},Fb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Gelu",t=>`0.5 * ${t} * (1.0 + erf_vf32(${t} * 0.7071067811865475))`,ra(r)))},Ob=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"LeakyRelu",s=>`select(leaky_relu_alpha_ * ${s}, ${s}, ${s} >= vec4<${t}>(0.0))`,`const leaky_relu_alpha_ = ${t}(${r.alpha});`,r.cacheKey))},Db=e=>{e.compute(Dt(e.inputs[0],"Not",r=>`!${r}`))},Lb=e=>{e.compute(Dt(e.inputs[0],"Neg",r=>`-${r}`))},zb=e=>{e.compute(Dt(e.inputs[0],"Reciprocal",r=>`1.0/${r}`))},Bb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"Relu",t=>`select(vec4<${r}>(0.0), ${t}, ${t} > vec4<${r}>(0.0))`))},Rb=e=>{e.compute(Dt(e.inputs[0],"Sigmoid",r=>`(1.0 / (1.0 + exp(-${r})))`))},jb=e=>Bt(e),Nb=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"HardSigmoid",s=>`max(vec4<${t}>(0.0), min(vec4<${t}>(1.0), ${r.alpha} * ${s} + vec4<${t}>(${r.beta})))`,void 0,r.cacheKey))},Vb=e=>{e.compute(Dt(e.inputs[0],"Sin","sin"))},Ub=e=>{e.compute(Dt(e.inputs[0],"Sinh","sinh"))},Wb=e=>{e.compute(Dt(e.inputs[0],"Sqrt","sqrt"))},Gb=e=>{e.compute(Dt(e.inputs[0],"Tan","tan"))},tc=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,Kb=e=>{e.compute(Dt(e.inputs[0],"Tanh",tc))},Vc=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${tc("v")};
}
`,Uc=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Hb=e=>{let r=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"FastGelu",Uc,Vc(r),void 0,e.inputs[0].dataType))},qb=(e,r)=>{let t=jr(e.inputs[0].dataType);return e.compute(Dt(e.inputs[0],"ThresholdedRelu",s=>`select(vec4<${t}>(0.0), ${s}, ${s} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${t}>(${r.alpha});`,r.cacheKey)),0},Qb=e=>{e.compute(Dt(e.inputs[0],"Log","log"))},Df=(e,r)=>`
const alpha = vec4<${e}>(${r});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,Lf=e=>`quick_gelu_impl(${e})`,Xb=(e,r)=>{let t=jr(e.inputs[0].dataType);e.compute(Dt(e.inputs[0],"QuickGelu",Lf,Df(t,r.alpha),r.cacheKey,e.inputs[0].dataType))}}),zf,Bf,Jb,Ax=Re(()=>{yt(),xt(),hu(),zf=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Bf=e=>{let r=e[0].dims.slice();r[2]=r[2]/2;let t=Ce("input",e[0].dataType,e[0].dims,4),s=Ce("bias",e[0].dataType,[e[0].dims[2]],4),n=it("output",e[0].dataType,r,4),o=we.size(r)/4,a=kr(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(t,s,n)}

  ${ra(a)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Jb=e=>{zf(e.inputs),e.compute(Bf(e.inputs))}}),Rf,jf,bs,Yb,Zb,ey,ty,ry,sy,ny,oy,iy,ay,Fx=Re(()=>{ft(),yt(),xt(),Rf=(e,r,t,s,n,o,a,i,l,c,p,d)=>{let u,f;typeof i=="string"?u=f=(y,$)=>`${i}((${y}),(${$}))`:typeof i=="function"?u=f=i:(u=i.scalar,f=i.vector);let _=it("outputData",p,s.length,4),v=Ce("aData",l,r.length,4),I=Ce("bData",c,t.length,4),M;if(n)if(o){let y=we.size(r)===1,$=we.size(t)===1,x=r.length>0&&r[r.length-1]%4===0,T=t.length>0&&t[t.length-1]%4===0;y||$?M=_.setByOffset("global_idx",f(y?`${v.type.value}(${v.getByOffset("0")}.x)`:v.getByOffset("global_idx"),$?`${I.type.value}(${I.getByOffset("0")}.x)`:I.getByOffset("global_idx"))):M=`
            let outputIndices = ${_.offsetToIndices("global_idx * 4u")};
            let offsetA = ${v.broadcastedIndicesToOffset("outputIndices",_)};
            let offsetB = ${I.broadcastedIndicesToOffset("outputIndices",_)};
            ${_.setByOffset("global_idx",f(a||x?v.getByOffset("offsetA / 4u"):`${v.type.value}(${v.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||T?I.getByOffset("offsetB / 4u"):`${I.type.value}(${I.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else M=_.setByOffset("global_idx",f(v.getByOffset("global_idx"),I.getByOffset("global_idx")));else{if(!o)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let y=($,x,T="")=>{let E=`aData[indexA${x}][componentA${x}]`,b=`bData[indexB${x}][componentB${x}]`;return`
            let outputIndices${x} = ${_.offsetToIndices(`global_idx * 4u + ${x}u`)};
            let offsetA${x} = ${v.broadcastedIndicesToOffset(`outputIndices${x}`,_)};
            let offsetB${x} = ${I.broadcastedIndicesToOffset(`outputIndices${x}`,_)};
            let indexA${x} = offsetA${x} / 4u;
            let indexB${x} = offsetB${x} / 4u;
            let componentA${x} = offsetA${x} % 4u;
            let componentB${x} = offsetB${x} % 4u;
            ${$}[${x}] = ${T}(${u(E,b)});
          `};p===9?M=`
            var data = vec4<u32>(0);
            ${y("data",0,"u32")}
            ${y("data",1,"u32")}
            ${y("data",2,"u32")}
            ${y("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:M=`
            ${y("outputData[global_idx]",0)}
            ${y("outputData[global_idx]",1)}
            ${y("outputData[global_idx]",2)}
            ${y("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(v,I,_)}

        ${d??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${M}
      }`},jf=(e,r,t,s,n,o,a=t.dataType)=>{let i=t.dims.map(v=>Number(v)??1),l=s.dims.map(v=>Number(v)??1),c=!we.areEqual(i,l),p=i,d=we.size(i),u=!1,f=!1,_=[c];if(c){let v=eo.calcShape(i,l,!1);if(!v)throw new Error("Can't perform binary op on the given tensors");p=v.slice(),d=we.size(p);let I=we.size(i)===1,M=we.size(l)===1,y=i.length>0&&i[i.length-1]%4===0,$=l.length>0&&l[l.length-1]%4===0;_.push(I),_.push(M),_.push(y),_.push($);let x=1;for(let T=1;T<p.length;T++){let E=i[i.length-T],b=l[l.length-T];if(E===b)x*=E;else break}x%4===0?(f=!0,u=!0):(I||M||y||$)&&(u=!0)}else u=!0;return _.push(u),{name:e,shaderCache:{hint:r+_.map(v=>v.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:v=>Rf(v,i,l,p,u,c,f,n,t.dataType,s.dataType,a,o),getRunData:()=>({outputs:[{dims:p,dataType:a}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:Math.ceil(we.size(p)/4)},...ct(i,l,p)]})}},bs=(e,r,t,s,n,o)=>{e.compute(jf(r,n??"",e.inputs[0],e.inputs[1],t,s,o))},Yb=e=>{bs(e,"Add",(r,t)=>`${r}+${t}`)},Zb=e=>{bs(e,"Div",(r,t)=>`${r}/${t}`)},ey=e=>{bs(e,"Equal",{scalar:(r,t)=>`u32(${r}==${t})`,vector:(r,t)=>`vec4<u32>(${r}==${t})`},void 0,void 0,9)},ty=e=>{bs(e,"Mul",(r,t)=>`${r}*${t}`)},ry=e=>{let r=Ce("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;bs(e,"Pow",{scalar:(t,s)=>`pow_custom(${t},${s})`,vector:(t,s)=>`pow_vector_custom(${t},${s})`},`
    fn pow_custom(a : ${r}, b : ${r}) -> ${r} {
      if (b == ${r}(0.0)) {
        return ${r}(1.0);
      } else if (a < ${r}(0.0) && f32(b) != floor(f32(b))) {
        return ${r}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${r}(1.0), round(f32(abs(b) % ${r}(2.0))) != 1.0) * ${r}(${r==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${r}>, b : vec4<${r}>) -> vec4<${r}> {
      // TODO: implement vectorized pow
      return vec4<${r}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},sy=e=>{bs(e,"Sub",(r,t)=>`${r}-${t}`)},ny=e=>{bs(e,"Greater",{scalar:(r,t)=>`u32(${r}>${t})`,vector:(r,t)=>`vec4<u32>(${r}>${t})`},void 0,void 0,9)},oy=e=>{bs(e,"Less",{scalar:(r,t)=>`u32(${r}<${t})`,vector:(r,t)=>`vec4<u32>(${r}<${t})`},void 0,void 0,9)},iy=e=>{bs(e,"GreaterOrEqual",{scalar:(r,t)=>`u32(${r}>=${t})`,vector:(r,t)=>`vec4<u32>(${r}>=${t})`},void 0,void 0,9)},ay=e=>{bs(e,"LessOrEqual",{scalar:(r,t)=>`u32(${r}<=${t})`,vector:(r,t)=>`vec4<u32>(${r}<=${t})`},void 0,void 0,9)}}),Nf,Vf,Uf,Wf,ly,cy,Ox=Re(()=>{ft(),yt(),lr(),xt(),Nf=(e,r)=>{if(!e||e.length<1)throw new Error("too few inputs");let t=0,s=e[t],n=s.dataType,o=s.dims.length;e.forEach((a,i)=>{if(i!==t){if(a.dataType!==n)throw new Error("input tensors should be one type");if(a.dims.length!==o)throw new Error("input tensors should have the same shape");a.dims.forEach((l,c)=>{if(c!==r&&l!==s.dims[c])throw new Error("non concat dimensions must match")})}})},Vf=(e,r)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${r});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Uf=(e,r)=>{let t=e.length,s=[];for(let n=0;n<t;++n){let o=r.setByOffset("global_idx",e[n].getByIndices("indices"));t===1?s.push(o):n===0?s.push(`if (inputIndex == ${n}u) { ${o} }`):n===t-1?s.push(`else { ${o} }`):s.push(`else if (inputIndex == ${n}) { ${o} }`)}return s.join(`
`)},Wf=(e,r,t,s)=>{let n=we.size(t),o=new Array(e.length),a=new Array(e.length),i=0,l=[],c=[],p=[{type:12,data:n}];for(let v=0;v<e.length;++v)i+=e[v].dims[r],o[v]=i,c.push(e[v].dims.length),a[v]=Ce(`input${v}`,s,c[v]),l.push("rank"),p.push({type:12,data:o[v]});for(let v=0;v<e.length;++v)p.push(...ct(e[v].dims));p.push(...ct(t));let d=it("output",s,t.length),u=d.indicesGet("indices",r),f=Array.from(Array(o.length).keys()).map(v=>`uniforms.sizeInConcatAxis${v}`).join(","),_=v=>`

  ${(()=>{v.registerUniform("outputSize","u32");for(let I=0;I<e.length;I++)v.registerUniform(`sizeInConcatAxis${I}`,"u32");return v.declareVariables(...a,d)})()}

  ${Vf(o.length,f)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${d.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${u});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${o.length}u>(${f});
      ${u} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Uf(a,d)}
  }`;return{name:"Concat",shaderCache:{hint:`${r}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:t,dataType:s}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:p}),getShaderSource:_}},ly=(e,r)=>{let t=e.inputs,s=t[0].dims,n=we.normalizeAxis(r.axis,s.length);Nf(t,n);let o=s.slice();o[n]=t.reduce((i,l)=>i+(l.dims.length>n?l.dims[n]:0),0);let a=t.filter(i=>we.size(i.dims)>0);e.compute(Wf(a,n,o,t[0].dataType),{inputs:a})},cy=e=>Bt({axis:e.axis})}),Tn,En,Pn,_u,Sn=Re(()=>{ft(),yt(),Tn=(e,r,t="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${r}(0.0));`;case"Sigmoid":return`value = (${r}(1.0) / (${r}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${r}(${t}(uniforms.clip_min)), ${r}(${t}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${r}(0.0), min(${r}(1.0), ${t}(uniforms.alpha) * value + ${t}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${t}(uniforms.alpha) * value, value, value >= ${r}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},En=(e,r)=>{e.activation==="Clip"?r.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?r.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&r.push({type:1,data:e.alpha})},Pn=(e,r)=>{e.activation==="Clip"?r.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?r.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&r.push({name:"alpha",type:"f32"})},_u=e=>{let r=e?.activation||"";if(r==="HardSigmoid"){let[t,s]=e?.activation_params||[.2,.5];return{activation:r,alpha:t,beta:s}}else if(r==="Clip"){let[t,s]=e?.activation_params||[DM,LM];return{activation:r,clipMax:s,clipMin:t}}else if(r==="LeakyRelu"){let[t]=e?.activation_params||[.01];return{activation:r,alpha:t}}return{activation:r}}}),Fr,uy,fu=Re(()=>{Fr=(e,r)=>{switch(e){case 1:return r;case 2:return`vec2<${r}>`;case 3:return`vec3<${r}>`;case 4:return`vec4<${r}>`;default:throw new Error(`${e}-component is not supported.`)}},uy=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),dy,Dx=Re(()=>{dy=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),Ho,gu,wu=Re(()=>{ft(),yt(),xt(),Sn(),Ho=(e,r,t,s,n)=>{let o=s-t;return`
      ${Array.from({length:t}).map((a,i)=>`
      if (${at(r.shape,i,r.rank)} != 1) {
        ${r.indicesSet(e,i,at(n,i+o,s))}
      } else {
        ${r.indicesSet(e,i,0)}
      }`).join("")}
`},gu=(e,r,t,s,n=!1,o)=>{let a=e[0].dims,i=e[1].dims,l=a[a.length-2],c=i[i.length-1],p=a[a.length-1],d=ar(c),u=ar(p),f=ar(l),_=we.size(t)/d/f,v=e.length>2,I=s?s.slice(0,-2):t.slice(0,-2),M=[we.size(I),l,c],y=[{type:12,data:_},{type:12,data:l},{type:12,data:c},{type:12,data:p}];En(r,y),y.push(...ct(I,a,i)),v&&y.push(...ct(e[2].dims)),y.push(...ct(M));let $=x=>{let T=du("batch_dims",e[0].dataType,I.length),E=Ce("a",e[0].dataType,a.length,u),b=Ce("b",e[1].dataType,i.length,d),S=it("output",e[0].dataType,M.length,d),D=kr(S.type.tensor),O=Tn(r,S.type.value,D),H=[E,b],G="";if(v){let Q=n?d:1;H.push(Ce("bias",e[2].dataType,e[2].dims.length,Q)),G=`${n?`value += bias[col / ${Q}];`:`value += ${S.type.value}(bias[row + i]);`}`}let z=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Pn(r,z);let Z=()=>{let Q=`var a_data: ${E.type.value};`;for(let Y=0;Y<u;Y++)Q+=`
              let b_data${Y} = b[(b_offset + (k + ${Y}) * uniforms.N + col) / ${d}];`;for(let Y=0;Y<f;Y++){Q+=`a_data = a[(a_offset + (row + ${Y}) * uniforms.K + k) / ${u}];`;for(let re=0;re<u;re++)Q+=`
            values[${Y}] = fma(${b.type.value}(a_data${u===1?"":`[${re}]`}), b_data${re}, values[${Y}]);
`}return Q};return`
  ${x.registerUniforms(z).registerInternalVariables(T).declareVariables(...H,S)}
  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${d})) * ${d};
    var index1 = global_idx / (uniforms.N / ${d});
    let stride1 = uniforms.M / ${f};
    let row = (index1 % stride1) * ${f};
    let batch = index1 / stride1;

    ${t.length===2?"":`let batch_indices = ${T.offsetToIndices("batch")};`}

    var a_indices: ${E.type.indices};
    ${Ho("a_indices",E,E.rank-2,T.rank,"batch_indices")}
    ${E.indicesSet("a_indices",E.rank-2,0)}
    ${E.indicesSet("a_indices",E.rank-1,0)}
    let a_offset = ${E.indicesToOffset("a_indices")};

    var b_indices: ${b.type.indices};
    ${Ho("b_indices",b,b.rank-2,T.rank,"batch_indices")}
    ${b.indicesSet("b_indices",b.rank-2,0)}
    ${b.indicesSet("b_indices",b.rank-1,0)}
    let b_offset = ${b.indicesToOffset("b_indices")};
    var values: array<${S.type.value}, ${f}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${u}) {
      ${Z()}
    }
    for (var i = 0u; i < ${f}u; i++) {
      var value = values[i];
      ${G}
      ${O}
      let cur_indices = ${S.type.indices}(batch, row + i, col);
      let offset = ${S.indicesToOffset("cur_indices")};
      ${S.setByOffset(`offset / ${d}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${r.activation};${d};${u};${f};${n}`,inputDependencies:v?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:o?o(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(_/64)},programUniforms:y}),getShaderSource:$}}}),Gf,Kf,Wc,rc,Hf,Gc,qf,aa,Mu=Re(()=>{ft(),yt(),xt(),Sn(),wu(),fu(),Gf=(e,r)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${r?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${r?", batchIndices":""});
        `,Kf=(e,r)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${r===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${r===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${r===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Wc=(e,r,t="f32",s,n=!1,o=32,a=!1,i=32)=>{let l=r[1]*e[1],c=r[0]*e[0],p=n?l:o,d=n?o:l,u=p/r[0],f=o/r[1];if(!((n&&u===4&&e[1]===4||!n&&(u===3||u===4))&&p%r[0]===0&&o%r[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${u} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${u} must be 3 or 4.
  tileAWidth ${p} must be divisible by workgroupSize[0]${r[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${r[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${u}<${t}>, ${p/u}>, ${d}>;
var<workgroup> mm_Bsub: array<array<vec4<${t}>, ${c/e[0]}>, ${o}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${u};
const tileInner = ${o};

@compute @workgroup_size(${r[0]}, ${r[1]}, ${r[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${s?`let batchIndices = ${s.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${l};

  let num_tiles = ${a?`${Math.ceil(i/o)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

  var acc: array<vec4<${t}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${f};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Gf(n,s)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${s?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${u===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Kf(n,u)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},rc=(e,r)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${r?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${r?", batchIndices":""});
            `,Hf=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Gc=(e,r,t="f32",s,n=!1,o=32,a=!1,i=32,l=!1)=>{let c=e[1]*r[1],p=e[0]*r[0],d=n?c:o,u=n?o:c;if(!(u%r[1]===0&&d%r[0]===0&&o%r[1]===0))throw new Error(`tileAHight ${u} must be divisible by workgroupSize[1]${r[1]}, tileAWidth ${d} must be divisible by workgroupSize[0]${r[0]}, tileInner ${o} must be divisible by workgroupSize[1]${r[1]}`);let f=u/r[1],_=d/r[0],v=o/r[1],I=l?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${p};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${r[1]}) {
        for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${r[0]}) {
          ${rc(n,s)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${r[1]}) {
            for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${r[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${s?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${t}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${r[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${r[1]}];`:`mm_Asub[localRow + innerRow * ${r[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${r[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${r[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${f};
let tileColA = i32(localId.x) * ${_};
let tileRowB = i32(localId.y) * ${v};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${_}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${rc(n,s)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${s?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${t}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Hf(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${t}, ${d}>, ${u}>;
  var<workgroup> mm_Bsub : array<array<${t}, ${p}>, ${o}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${o};

@compute @workgroup_size(${r[0]}, ${r[1]}, ${r[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${s?`let batchIndices = ${s.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(i/o)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${i}`:"0"};

    var acc : array<array<${t}, colPerThread>, rowPerThread>;
    ${I}
  }
`},qf=(e,r,t,s,n=!1)=>{let[o,a,i,l]=s,c=kr(s[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${o.type.indices}) -> ${Fr(e,c)} {
      var value = ${Fr(e,c)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${a.type.indices};
        ${Ho("aIndices",a,a.rank-2,o.rank,"batchIndices")}
        ${a.indicesSet("aIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("aIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${o.type.indices}) -> ${Fr(e,c)} {
      var value = ${Fr(e,c)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${i.type.indices};
        ${Ho("bIndices",i,i.rank-2,o.rank,"batchIndices")}
        ${i.indicesSet("bIndices",i.rank-2,"u32(row)")}
        ${i.indicesSet("bIndices",i.rank-1,"u32(colIn)")}
        value = ${i.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Fr(e,c)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${r?`value = value + ${n?"bias[colIn]":`${Fr(e,c)}(bias[row])`};`:""}
        ${t}
        ${l.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},aa=(e,r,t,s,n=!1,o)=>{let a=e[0].dims,i=e[1].dims,l=a.slice(0,-2),c=i.slice(0,-2),p=s?s.slice(0,-2):t.slice(0,-2),d=we.size(p),u=a[a.length-2],f=a[a.length-1],_=i[i.length-1],v=f%4===0&&_%4===0,I=u<=8?[4,1,1]:[4,4,1],M=[8,8,1],y=[Math.ceil(_/M[0]/I[0]),Math.ceil(u/M[1]/I[1]),Math.ceil(d/M[2]/I[2])],$=v?4:1,x=[...l,u,f/$],T=x.length,E=[...c,f,_/$],b=E.length,S=[d,u,_/$],D=[{type:6,data:u},{type:6,data:_},{type:6,data:f}];En(r,D),D.push(...ct(p,x,E));let O=["rank","rank"],H=e.length>2;H&&(D.push(...ct(e[2].dims)),O.push("rank")),D.push(...ct(S));let G=z=>{let Z=p.length,Q=du("batchDims",e[0].dataType,Z,1),Y=kr(e[0].dataType),re=Ce("a",e[0].dataType,T,$),te=Ce("b",e[1].dataType,b,$),le=it("result",e[0].dataType,S.length,$),ue=[re,te];if(H){let ie=n?$:1;ue.push(Ce("bias",e[2].dataType,e[2].dims.length,ie))}let B=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Pn(r,B);let F=kr(le.type.tensor),K=Tn(r,le.type.value,F),j=qf($,H,K,[Q,re,te,le],n);return`
  ${z.registerUniforms(B).registerInternalVariables(Q).declareVariables(...ue,le)}
  ${j}
  ${v?Wc(I,M,Y,Q):Gc(I,M,Y,Q)}
                   `};return{name:"MatMul",shaderCache:{hint:`${I};${r.activation};${v};${n}`,inputDependencies:O},getRunData:()=>({outputs:[{dims:o?o(t):t,dataType:e[0].dataType}],dispatchGroup:{x:y[0],y:y[1],z:y[2]},programUniforms:D}),getShaderSource:G}}}),Qf,py,Lx=Re(()=>{ft(),Vs(),xt(),Sn(),fu(),Dx(),Mu(),Qf=(e,r,t,s,n=!1,o,a=4,i=4,l=4,c="f32")=>{let p=D=>{switch(D){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},d=D=>{switch(D){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},u=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,f=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,_=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",v=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",M=e?"col":"row",y=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${M} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${M} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${M} % inChannels;
    var resData = ${Fr(a,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${_} && xCol >= 0 && xCol < ${v}) {
      ${u}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${p(a)}
    }
    return resData;`,$=e?r&&s?`
    let col = colIn * ${a};
    ${y}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${y}
    }
    return ${Fr(a,c)}(0.0);`:s&&t?`
    let col = colIn * ${a};
    ${y}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${y}
    }
    return ${Fr(a,c)}(0.0);`,x=e?s&&t?d(i):`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${d(i)}
    }
    return ${Fr(i,c)}(0.0);`:`
    let col = colIn * ${i};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${d(i)}
    }
    return ${Fr(i,c)}(0.0);`,T=Fr(l,c),E=Fr(e?a:i,c),b=Fr(e?i:a,c),S=Tn(o,T,c);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${E} {
      ${e?$:x}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${b} {
      ${e?x:$}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${T}) {
      let col = colIn * ${l};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${f}
      ${uy(n)}
      ${S}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},py=(e,r,t,s,n,o,a,i,l)=>{let c=r.format==="NHWC",p=c?e[0].dims[3]:e[0].dims[1],d=t[0],u=c?t[2]:t[3],f=c?t[1]:t[2],_=c?t[3]:t[1],v=c&&(p%4===0||p%3===0)&&_%4===0,I=c?_:u*f,M=c?u*f:_,y=[8,8,1],$=s<=8?[4,1,1]:[4,4,1],x=[Math.ceil(I/y[0]/$[0]),Math.ceil(M/y[1]/$[1]),Math.ceil(d/y[2]/$[2])];Ft("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${x}`);let T=v?c&&p%4!==0?3:4:1,E=y[1]*$[1],b=y[0]*$[0],S=Math.max(y[0]*T,y[1]),D=s%E===0,O=n%b===0,H=o%S===0,G=v?[T,4,4]:[1,1,1],z=[{type:6,data:s},{type:6,data:n},{type:6,data:o},{type:6,data:[r.pads[0],r.pads[1]]},{type:6,data:r.strides},{type:6,data:r.dilations}];En(r,z),z.push(...ct(e[0].dims,e[1].dims));let Z=["rank","rank"];a&&(z.push(...ct(e[2].dims)),Z.push("rank")),z.push(...ct(t));let Q=Y=>{let re=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Pn(r,re);let te=v?4:1,le=kr(e[0].dataType),ue=`
      fn setOutputAtIndex(flatIndex : i32, value : ${v?`vec4<${le}>`:le}) {
        result[flatIndex] = ${v?`vec4<${le}>`:le}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${v?`vec4<${le}>`:le}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${v?"/ 4":""}, value);
      }`,B=Ce("x",e[0].dataType,e[0].dims.length,T===3?1:T),F=Ce("w",e[1].dataType,e[1].dims.length,te),K=[B,F],j=it("result",e[0].dataType,t.length,te);if(a){let ie=Ce("bias",e[2].dataType,e[2].dims.length,te);K.push(ie),ue+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${v?`vec4<${le}>`:le} {
          return bias[coords.${c?"w":"y"}${v?"/ 4":""}];
        }`}return`
        ${dy("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Y.registerUniforms(re).declareVariables(...K,j)}
        ${ue}
        ${Qf(c,D,O,H,a,r,G[0],G[1],G[2],le)}
        ${v?Wc($,y,le,void 0,!c,S):Gc($,y,le,void 0,!c,S,!1,void 0,i)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${r.cacheKey};${T};${v};${D};${O};${H};${E};${b};${S}`,inputDependencies:Z},getRunData:()=>({outputs:[{dims:l?l(t):t,dataType:e[0].dataType}],dispatchGroup:{x:x[0],y:x[1],z:x[2]},programUniforms:z}),getShaderSource:Q}}}),Xf,sc,zo,Jf,nc,Yf,my,hy,zx=Re(()=>{ft(),Vs(),yt(),xt(),Sn(),fu(),Xf=e=>{let r=1;for(let t=0;t<e.length;t++)r*=e[t];return r},sc=e=>typeof e=="number"?[e,e,e]:e,zo=(e,r)=>r<=1?e:e+(e-1)*(r-1),Jf=(e,r,t,s=1)=>{let n=zo(r,s);return Math.floor((e[0]*(t-1)-t+n)/2)},nc=(e,r,t,s,n)=>{n==null&&(n=Jf(e,r[0],s[0]));let o=[0,0,0,t];for(let a=0;a<3;a++)e[a]+2*n>=r[a]&&(o[a]=Math.trunc((e[a]-r[a]+2*n)/s[a]+1));return o},Yf=(e,r,t,s,n,o,a,i,l,c)=>{let p,d,u,f;if(e==="VALID"&&(e=0),typeof e=="number"){p={top:e,bottom:e,left:e,right:e,front:e,back:e};let _=nc([r,t,s,1],[i,l,c],1,[n,o,a],e);d=_[0],u=_[1],f=_[2]}else if(Array.isArray(e)){if(!e.every((v,I,M)=>v===M[0]))throw Error(`Unsupported padding parameter: ${e}`);p={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let _=nc([r,t,s,1],[i,l,c],1,[n,o,a],e[0]);d=_[0],u=_[1],f=_[2]}else if(e==="SAME_UPPER"){d=Math.ceil(r/n),u=Math.ceil(t/o),f=Math.ceil(s/a);let _=(d-1)*n+i-r,v=(u-1)*o+l-t,I=(f-1)*a+c-s,M=Math.floor(_/2),y=_-M,$=Math.floor(v/2),x=v-$,T=Math.floor(I/2),E=I-T;p={top:$,bottom:x,left:T,right:E,front:M,back:y}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:d,outHeight:u,outWidth:f}},my=(e,r,t,s,n,o=!1,a="channelsLast")=>{let i,l,c,p,d;if(a==="channelsLast")[i,l,c,p,d]=e;else if(a==="channelsFirst")[i,d,l,c,p]=e;else throw new Error(`Unknown dataFormat ${a}`);let[u,,f,_,v]=r,[I,M,y]=sc(t),[$,x,T]=sc(s),E=zo(f,$),b=zo(_,x),S=zo(v,T),{padInfo:D,outDepth:O,outHeight:H,outWidth:G}=Yf(n,l,c,p,I,M,y,E,b,S),z=o?u*d:u,Z=[0,0,0,0,0];return a==="channelsFirst"?Z=[i,z,O,H,G]:a==="channelsLast"&&(Z=[i,O,H,G,z]),{batchSize:i,dataFormat:a,inDepth:l,inHeight:c,inWidth:p,inChannels:d,outDepth:O,outHeight:H,outWidth:G,outChannels:z,padInfo:D,strideDepth:I,strideHeight:M,strideWidth:y,filterDepth:f,filterHeight:_,filterWidth:v,effectiveFilterDepth:E,effectiveFilterHeight:b,effectiveFilterWidth:S,dilationDepth:$,dilationHeight:x,dilationWidth:T,inShape:e,outShape:Z,filterShape:r}},hy=(e,r,t,s,n,o)=>{let a=o==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let i=[64,1,1],l={x:t.map((I,M)=>M)},c=[Math.ceil(Xf(l.x.map(I=>t[I]))/i[0]),1,1];Ft("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${c}`);let p=1,d=we.size(t),u=[{type:12,data:d},{type:12,data:s},{type:12,data:n},{type:12,data:r.strides},{type:12,data:r.dilations}];En(r,u),u.push(...ct(e[0].dims,e[1].dims));let f=["rank","rank"],_=e.length===3;_&&(u.push(...ct(e[2].dims)),f.push("rank")),u.push(...ct(t));let v=I=>{let M=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:s.length},{name:"pads",type:"u32",length:n.length},{name:"strides",type:"u32",length:r.strides.length},{name:"dilations",type:"u32",length:r.dilations.length}];Pn(r,M);let y=1,$=kr(e[0].dataType),x=Ce("x",e[0].dataType,e[0].dims.length,p),T=Ce("W",e[1].dataType,e[1].dims.length,y),E=[x,T],b=it("result",e[0].dataType,t.length,y),S="";if(_){let H=Ce("bias",e[2].dataType,e[2].dims.length,y);E.push(H),S+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${$} {
          return bias[${a?at("coords",4,5):at("coords",1,5)}];
        }`}let D=Fr(p,$),O=Tn(r,D,$);return`
            ${S}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${x.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${T.getByIndices("aIndices")};
            }
          ${I.registerUniforms(M).declareVariables(...E,b)}
          ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${b.offsetToIndices("global_idx")};
              let batch = ${at("coords",0,x.rank)};
              let d2 = ${a?at("coords",x.rank-1,x.rank):at("coords",1,x.rank)};
              let xFRCCorner = vec3<u32>(${a?at("coords",1,x.rank):at("coords",2,x.rank)},
              ${a?at("coords",2,x.rank):at("coords",3,x.rank)},
              ${a?at("coords",3,x.rank):at("coords",4,x.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?at("uniforms.x_shape",1,x.rank):at("uniforms.x_shape",2,x.rank)};
              let xShapeZ = ${a?at("uniforms.x_shape",2,x.rank):at("uniforms.x_shape",3,x.rank)};
              let xShapeW = ${a?at("uniforms.x_shape",3,x.rank):at("uniforms.x_shape",4,x.rank)};
              let xShapeU = ${a?at("uniforms.x_shape",4,x.rank):at("uniforms.x_shape",1,x.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${_?"value = value + getBiasByOutputCoords(coords)":""};
              ${O}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${r.cacheKey};${a};${p};${_}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:c[0],y:c[1],z:c[2]},programUniforms:u}),getShaderSource:v}}}),_y,fy,Bx=Re(()=>{ft(),yt(),xt(),Sn(),_y=(e,r,t,s)=>{let n=e.length>2,o=n?"value += b[output_channel];":"",a=e[0].dims,i=e[1].dims,l=r.format==="NHWC",c=l?t[3]:t[1],p=c/r.group,d=l&&p>=4?ar(c):1,u=we.size(t)/d,f=[{type:12,data:u},{type:12,data:r.dilations},{type:12,data:[r.strides[0],r.strides[1]]},{type:12,data:[r.pads[0],r.pads[1]]},{type:12,data:p}];En(r,f),f.push(...ct(a,[i[0],i[1],i[2],i[3]/d]));let _=n?["rank","rank","rank"]:["rank","rank"];f.push(...ct([t[0],t[1],t[2],t[3]/d]));let v=I=>{let M=it("output",e[0].dataType,t.length,d),y=kr(M.type.tensor),$=Tn(r,M.type.value,y),x=Ce("x",e[0].dataType,a.length),T=Ce("w",e[1].dataType,i.length,d),E=[x,T];n&&E.push(Ce("b",e[2].dataType,e[2].dims,d));let b=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:r.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Pn(r,b);let S=l?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${x.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${T.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${x.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${T.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${I.registerUniforms(b).declareVariables(...E,M)}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${M.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${l?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${d} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${l?2:1}];

    var value: ${M.type.value} = ${M.type.value}(0);
    ${S}
    ${o}
    ${$}
    ${M.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${r.cacheKey}_${d}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:s?s(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:f}),getShaderSource:v}},fy=(e,r,t,s)=>{let n=e.length>2,o=ar(t[3]),a=ar(t[2]),i=we.size(t)/o/a,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/o],c=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/o],p=[t[0],t[1],t[2],t[3]/o],d=[{type:12,data:i},{type:6,data:[r.strides[0],r.strides[1]]},{type:6,data:[r.pads[0],r.pads[1]]}];En(r,d),d.push(...ct(l,c,p));let u=(a-1)*r.strides[1]+c[1],f=_=>{let v=it("output",e[0].dataType,p.length,o),I=kr(v.type.tensor),M=Tn(r,v.type.value,I),y=Ce("x",e[0].dataType,l.length,o),$=Ce("w",e[1].dataType,c.length,o),x=[y,$];n&&x.push(Ce("b",e[2].dataType,e[2].dims,o));let T=n?"value += b[output_channel];":"",E=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Pn(r,E),`
  ${_.registerUniforms(E).declareVariables(...x,v)}
  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${y.type.value}, ${u}>;
    var values: array<${v.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${c[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${u}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${y.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${y.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${c[1]}; w_width++) {
          let w_val = ${$.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${T}
      ${M}
      ${v.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${r.cacheKey};${o};${a};${u};${c[0]};${c[1]}`,inputDependencies:n?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:s?s(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:d}),getShaderSource:f}}}),Zf,Hi,eg,qi,Kc,oc,tg,rg,Hc,Rx=Re(()=>{yt(),Lx(),zx(),Mu(),Bx(),Sn(),wu(),rn(),Zf=(e,r,t,s,n,o)=>{let a=e[0],i=e.slice(o?1:2,o?3:4),l=i.length,c=r[0],p=r.slice(2).map((u,f)=>u+(u-1)*(t[f]-1)),d=i.map((u,f)=>u+s[f]+s[f+l]).map((u,f)=>Math.floor((u-p[f]+n[f])/n[f]));return d.splice(0,0,a),d.splice(o?3:1,0,c),d},Hi=[2,3,1,0],eg=(e,r)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[r.format==="NHWC"?e[0].dims.length-1:1],s=e[1].dims[1]*r.group;if(t!==s)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(r.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(r.strides.length!==n)throw new Error(`strides should be ${n}D`);if(r.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(r.kernelShape.length!==0&&r.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},qi=(e,r)=>{let t=e.kernelShape.slice();t.length<r[1].dims.length-2&&t.push(...Array(r[1].dims.length-2-t.length).fill(0));for(let o=2;o<r[1].dims.length;++o)t[o-2]===0&&(t[o-2]=r[1].dims[o]);let s=e.pads.slice();oa.adjustPadsBasedOnAutoPad(r[0].dims,e.strides,e.dilations,t,s,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:t,pads:s}),n},Kc=e=>{let r=_u(e),t=e.format,s=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,o=e.group,a=e.kernel_shape,i=e.pads,l=e.strides,c=e.w_is_const();return{autoPad:s,format:t,dilations:n,group:o,kernelShape:a,pads:i,strides:l,wIsConst:c,...r,cacheKey:`${e.format};${r.activation};`}},oc=(e,r,t,s)=>{let n=t.format==="NHWC",o=Zf(r[0].dims,r[1].dims,t.dilations,t.pads,t.strides,n);if(t.group!==1){let E=[r[0]];if(n){let b=e.kernelCustomData.wT??e.compute(rs(r[1],Hi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=b),E.push(b)}else E.push(r[1]);r.length===3&&E.push(r[2]),!e.adapterInfo.isArchitecture("ampere")&&n&&r[1].dims[0]===t.group&&r[1].dims[1]===1&&t.dilations[0]===1&&t.dilations[1]===1?e.compute(fy(E,t,o,s),{inputs:E}):e.compute(_y(E,t,o,s),{inputs:E});return}let a=r.length===3,i=r[0].dims[n?1:2],l=r[0].dims[n?2:3],c=r[0].dims[n?3:1],p=r[1].dims[2],d=r[1].dims[3],u=o[n?1:2],f=o[n?2:3],_=o[n?3:1],v=n&&p===i&&d===l&&t.pads[0]===0&&t.pads[1]===0;if(v||p===1&&d===1&&t.dilations[0]===1&&t.dilations[1]===1&&t.strides[0]===1&&t.strides[1]===1&&t.pads[0]===0&&t.pads[1]===0){let E=o[0],b,S,D,O=[];if(n){let z=e.kernelCustomData.wT??e.compute(rs(r[1],Hi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];if(t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=z),v){let Z=i*l*c;b=r[0].reshape([1,E,Z]),S=z.reshape([1,Z,_]),D=[1,E,_]}else b=r[0].reshape([E,i*l,c]),S=z.reshape([1,c,_]),D=[E,u*f,_];O.push(b),O.push(S)}else b=r[0].reshape([E,c,i*l]),S=r[1].reshape([1,_,c]),D=[E,_,u*f],O.push(S),O.push(b);a&&O.push(r[2]);let H=D[2],G=O[0].dims[O[0].dims.length-1];H<8&&G<8?e.compute(gu(O,t,o,D,n,s),{inputs:O}):e.compute(aa(O,t,o,D,n,s),{inputs:O});return}let I=!0,M=e.kernelCustomData.wT??e.compute(rs(r[1],Hi),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=M);let y=[r[0],M];a&&y.push(r[2]);let $=n?u*f:_,x=n?_:u*f,T=p*d*c;e.compute(py(y,t,o,$,x,T,a,I,s),{inputs:y})},tg=(e,r)=>{let t=r.format==="NHWC",s=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&s.push(e.inputs[2]);let n=[0,r.pads[0],0,r.pads[1]],o=[1].concat(r.strides),a=[1].concat(r.dilations),i=[1].concat(r.kernelShape),l=qi({...r,pads:n,strides:o,dilations:a,kernelShape:i},s);oc(e,s,l,c=>t?[c[0],c[2],c[3]]:[c[0],c[1],c[3]])},rg=(e,r,t)=>{let s=t.format==="NHWC"?"channelsLast":"channelsFirst",n=qi(t,r),o=t.autoPad==="NOTSET"?t.pads:t.autoPad,a=my(r[0].dims,r[1].dims,t.strides,t.dilations,o,!1,s);e.compute(hy(r,n,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],s))},Hc=(e,r)=>{if(eg(e.inputs,r),e.inputs[0].dims.length===3)tg(e,r);else if(e.inputs[0].dims.length===5)rg(e,e.inputs,r);else{let t=qi(r,e.inputs);oc(e,e.inputs,t)}}}),gy,jx=Re(()=>{ft(),Vs(),yt(),xt(),gy=(e,r,t)=>{let s=e.length>2,n=r.outputShape,o=r.format==="NHWC",a=r.group,i=e[1].dims,l=i[2]/a,c=i[3],p=o?ar(l):1,d=o&&c===1&&l>=4,u=d?Math.floor(l/4)*4:Math.floor(l/p)*p,f=l-u,_=o?ar(c):1,v=o?c===1?p:_:1,I=we.size(n)/_,M=[Math.ceil(I/64),1,1];Ft("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${M}`);let y=["rank","rank"],$=[r.strides[0],r.strides[1]],x=[r.kernelShape[o?1:2],r.kernelShape[o?2:3]],T=[r.dilations[0],r.dilations[1]],E=[x[0]+(r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)),x[1]+(r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1))],b=[E[0]-1-Math.floor((r.pads[0]+r.pads[2])/2),E[1]-1-Math.floor((r.pads[1]+r.pads[3])/2)],S=[{type:12,data:I},{type:12,data:$},{type:12,data:x},{type:12,data:T},{type:12,data:E},{type:6,data:b},{type:12,data:u},{type:12,data:l},{type:12,data:c},...ct(e[0].dims,e[1].dims)];s&&(S.push(...ct(e[2].dims)),y.push("rank")),S.push(...ct(n));let D=O=>{let H=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:$.length},{name:"filter_dims",type:"u32",length:x.length},{name:"dilations",type:"u32",length:x.length},{name:"effective_filter_dims",type:"u32",length:E.length},{name:"pads",type:"i32",length:b.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],G=kr(e[0].dataType),z=o?1:2,Z=o?2:3,Q=o?3:1,Y=Ce("W",e[1].dataType,e[1].dims.length,v),re=Ce("Dy",e[0].dataType,e[0].dims.length,p),te=[re,Y];s&&te.push(Ce("bias",e[2].dataType,[n[Q]].length,_));let le=it("result",e[0].dataType,n.length,_),ue=()=>{let K="";if(d)p===4?K+=`
        let xValue = ${re.getByOffset("x_offset")};
        let wValue = ${Y.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:p===2?K+=`
          dotProd = dotProd + dot(vec4<${G}>(${re.getByOffset("x_offset")}, ${re.getByOffset("x_offset + 1u")}), vec4<${G}>(${Y.getByOffset("w_offset")}, ${Y.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:p===1&&(K+=`
          dotProd = dotProd + dot(vec4<${G}>(${re.getByOffset("x_offset")}, ${re.getByOffset("x_offset + 1u")}, ${re.getByOffset("x_offset + 2u")}, ${re.getByOffset("x_offset + 3u")}), vec4<${G}>(${Y.getByOffset("w_offset")}, ${Y.getByOffset("w_offset + 1u")}, ${Y.getByOffset("w_offset + 2u")}, ${Y.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(K+=`
                  let xValue = ${o?re.getByOffset(`${re.indicesToOffset(`${re.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p}`):re.get("batch","inputChannel","idyR","idyC")};
        `,p===1)K+=`
          let w_offset = ${Y.indicesToOffset(`${Y.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${Y.getByOffset(`w_offset / ${v}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let j=0;j<p;j++)K+=`
            let wValue${j} = ${Y.getByOffset(`${Y.indicesToOffset(`${Y.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${j}, wOutChannel)`)} / ${v}`)};
            dotProd = dotProd + xValue[${j}] * wValue${j};`;return K},B=()=>{if(f===0)return"";if(!d)throw new Error(`packInputAs4 ${d} is not true.`);let K="";if(p===1){K+="dotProd = dotProd";for(let j=0;j<f;j++)K+=`
            + ${re.getByOffset(`x_offset + ${j}`)} * ${Y.getByOffset(`w_offset + ${j}`)}`;K+=";"}else if(p===2){if(f!==2)throw new Error(`Invalid inputChannelsRemainder ${f}.`);K+=`
          let xValue = ${re.getByOffset("x_offset")};
          let wValue = ${Y.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return K},F=`
            let outputIndices = ${le.offsetToIndices(`global_idx * ${_}`)};
            let batch = ${le.indicesGet("outputIndices",0)};
            let d1 = ${le.indicesGet("outputIndices",Q)};
            let r = ${le.indicesGet("outputIndices",z)};
            let c = ${le.indicesGet("outputIndices",Z)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${le.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${G}(dyRCorner) + ${G}(wR)) / ${G}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${G}(uniforms.Dy_shape[${z}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${G}(dyCCorner) + ${G}(wC)) / ${G}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${G}(uniforms.Dy_shape[${Z}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${d?`
                var x_offset = ${re.indicesToOffset(`${re.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p};
                var w_offset = ${Y.indicesToOffset(`${Y.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${v};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${d?4:p}) {
                  ${ue()}
                  inputChannel = inputChannel + ${d?4:p};
                }
                ${B()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${s?` + bias[d1 / ${_}]`:""};
            ${le.setByOffset("global_idx","value")};
          `;return`
    ${O.registerUniforms(H).declareVariables(...te,le)}
      ${O.mainStart()}
      ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${F}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${r.cacheKey};${p}${v}${_}${d}${f}`,inputDependencies:y},getRunData:()=>({dispatchGroup:{x:M[0],y:M[1],z:M[2]},outputs:[{dims:t?t(n):n,dataType:e[0].dataType}],programUniforms:S}),getShaderSource:D}}}),sg,ng,og,ic,wy,ig,ac,ag,My,Nx=Re(()=>{jx(),Sn(),rn(),sg=(e,r,t,s,n,o)=>(e-1)*r+t+(s-1)*n+1-o,ng=(e,r,t,s,n)=>{let o=Math.floor(e/2);r==="SAME_UPPER"?(t[s]=o,t[n]=e-o):r==="SAME_LOWER"&&(t[s]=e-o,t[n]=o)},og=(e,r,t,s,n,o,a,i,l,c)=>{let p=e.length-2,d=c.length===0;l.length<p&&l.push(...Array(p-l.length).fill(0));let u=e[0],f=r[i?3:1]*n;for(let _=0,v=e.length-p-(i?1:0);_<p;++_,++v){let I=e[v],M=d?I*a[_]:c[_],y=sg(I,a[_],o[_],r[v],t[_],M);ng(y,s,o,_,_+p),d&&c.push(a[_]*(I-1)+l[_]+(r[v]-1)*t[_]+1-o[_]-o[_+p])}c.splice(0,0,u),c.splice(i?3:1,0,f)},ic=(e,r)=>{let t=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((d,u)=>d*u,1)===0){t.length=0;for(let d=2;d<r[1].dims.length;++d)t.push(r[1].dims[d])}let s=e.format==="NHWC";t.splice(0,0,r[1].dims[0]),t.splice(s?3:1,0,r[1].dims[1]);let n=e.pads.slice(),o=e.outputShape.slice(),a=e.outputPadding.slice(),i=r[0].dims,l=e.dilations.slice();if(l.reduce((d,u)=>d+u,0)===0){let d=r[0].dims.length-2;l=new Array(d).fill(1)}let c=e.strides.slice();if(c.reduce((d,u)=>d+u,0)===0){let d=r[0].dims.length-2;c=new Array(d).fill(1)}og(i,t,l,e.autoPad,e.group,n,c,s,a,o);let p=Object.assign({},e);return Object.assign(p,{kernelShape:t,pads:n,outputPadding:a,outputShape:o,dilations:l,strides:c}),p},wy=e=>{let r=_u(e),t=e.format,s=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,o=e.group,a=e.kernelShape,i=e.pads,l=e.strides,c=e.wIsConst(),p=e.outputPadding,d=e.outputShape;return{autoPad:s,format:t,dilations:n,group:o,kernelShape:a,outputPadding:p,outputShape:d,pads:i,strides:l,wIsConst:c,...r,cacheKey:`${e.format};${r.activation};`}},ig=(e,r)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[r.format==="NHWC"?e[0].dims.length-1:1],s=e[1].dims[0];if(t!==s)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*r.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let o=e[0].dims.length-2;if(r.dilations.reduce((a,i)=>a+i,0)>0&&r.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(r.strides.reduce((a,i)=>a+i,0)>0&&r.strides.length!==o)throw new Error(`strides should be ${o}D`);if(r.pads.reduce((a,i)=>a+i,0)>0&&r.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(r.outputPadding.length!==o&&r.outputPadding.length!==0)throw new Error(`output_padding should be ${o}D`);if(r.kernelShape.reduce((a,i)=>a+i,0)>0&&r.kernelShape.length!==0&&r.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(r.outputShape.length!==0&&r.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},ac=(e,r,t,s)=>{let n=e.kernelCustomData.wT??e.compute(rs(r[1],[2,3,0,1]),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=n);let o=[r[0],n];r.length===3&&o.push(r[2]),e.compute(gy(o,t,s),{inputs:o})},ag=(e,r)=>{let t=r.format==="NHWC",s=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&s.push(e.inputs[2]);let n=r.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let o=r.dilations;(o.length===0||o[0]===0)&&(o=[1]);let a=r.strides;(a.length===0||a[0]===0)&&(a=[1]);let i=r.pads;i.length===0&&(i=[0,0]),i=[0,i[0],0,i[1]],a=[1].concat(a),o=[1].concat(o),n=[1].concat(n);let l=r.outputPadding;l=[0].concat(l);let c=ic({...r,pads:i,strides:a,dilations:o,kernelShape:n,outputPadding:l},s);ac(e,s,c,p=>t?[p[0],p[2],p[3]]:[p[0],p[1],p[3]])},My=(e,r)=>{if(ig(e.inputs,r),e.inputs[0].dims.length===3)ag(e,r);else{let t=ic(r,e.inputs);ac(e,e.inputs,t)}}}),lg,by,yy,Vx=Re(()=>{ft(),yt(),lr(),xt(),lg=(e,r,t,s)=>{let n=we.size(r),o=r.length,a=Ce("input",e,o),i=it("output",e,o),l=t.dataType===6?t.getInt32Array()[0]:Number(t.getBigInt64Array()[0]),c=we.normalizeAxis(l,o),p=d=>{let u=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,f=at("uniforms.input_shape","uniforms.axis",o),_=s.reverse?u+(s.exclusive?" + 1":""):"0",v=s.reverse?f:u+(s.exclusive?"":" + 1");return`
                ${d.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,i)}
                ${d.mainStart()}
                  ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${i.offsetToIndices("global_idx")};
                  var sum = ${i.type.value}(0);
                  let first : i32 = ${_};
                  let last : i32 = ${v};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${i.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:s.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:12,data:n},{type:12,data:c},...ct(r,r)]}),getShaderSource:p}},by=(e,r)=>{let t=e.inputs[0].dims,s=e.inputs[0].dataType,n=e.inputs[1];e.compute(lg(s,t,n,r),{inputs:[0]})},yy=e=>{let r=e.exclusive===1,t=e.reverse===1;return Bt({exclusive:r,reverse:t})}}),cg,ug,dg,vy,xy,Ux=Re(()=>{ft(),yt(),lr(),xt(),cg=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},ug=(e,r,t,s)=>{let n=[];n.push(`fn perm(i: ${s.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`);for(let o=0;o<r;++o)n.push(t.indicesSet("a",e[o],`i[${o}]`));return n.push("return a;}"),n.join(`
`)},dg=(e,r)=>{let t,s,n,o,a,i,l=r.format==="NHWC",c=r.blocksize,p=r.mode==="DCR";l?([t,s,n,o]=e.dims,a=p?[t,s,n,c,c,o/c**2]:[t,s,n,o/c**2,c,c],i=p?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([t,s,n,o]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=p?[t,c,c,o/c**2,s,n]:[t,o/c**2,c,c,s,n],i=p?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let d=e.reshape(a),u=d.dims.length,f=e.dataType,_=Ce("a",f,u),v=it("output",f,u),I=M=>`
  ${M.registerUniform("output_size","u32").declareVariables(_,v)}

  ${ug(i,u,_,v)}

  ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${v.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${v.setByOffset("global_idx",_.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${r.blocksize};${r.mode}`,inputDependencies:["rank"]},getRunData:M=>{let y=l?[t,s*c,n*c,o/c**2]:[t,o/c**2,s*c,n*c],$=we.size(y),x=d.dims,T=we.sortBasedOnPerm(x,i);return{outputs:[{dims:y,dataType:M[0].dataType}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:[{type:12,data:$},...ct(x,T)]}},getShaderSource:I}},vy=(e,r)=>{cg(e.inputs),e.compute(dg(e.inputs[0],r))},xy=e=>Bt({blocksize:e.blocksize,mode:e.mode,format:e.format})}),Qi,Bo,lc,pg,mg,hg,_g,cc,fg,Ty,Ey,Wx=Re(()=>{ft(),yt(),lr(),xt(),Qi="[a-zA-Z]|\\.\\.\\.",Bo="("+Qi+")+",lc="^"+Bo+"$",pg="("+Bo+",)*"+Bo,mg="^"+pg+"$",hg=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,r){let t=this.symbolToIndices.get(e);t===void 0?t=[r]:t.push(r),this.symbolToIndices.set(e,t)}},_g=class{constructor(e,r){this.equation=r,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[t,s]=r.includes("->")?r.split("->",2):[r,""];if(!t.match(RegExp(mg)))throw new Error("Invalid LHS term");if(t.split(",").forEach((n,o)=>{let a=e[o].dims.slice();if(!n.match(RegExp(lc)))throw new Error("Invalid LHS term");let i=this.processTerm(n,!0,a,o);this.lhs.push(i)}),s==="")s+=[...this.symbolToInfo.entries()].filter(([n,o])=>o.count===1||n==="...").map(([n])=>n).join("");else if(!s.match(RegExp(Bo)))throw new Error("Invalid RHS");s.match(RegExp(Qi,"g"))?.forEach(n=>{if(n==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(n);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(s,!1,this.outputDims)}addSymbol(e,r,t){let s=this.symbolToInfo.get(e);if(s!==void 0){if(s.dimValue!==r&&s.count!==1)throw new Error("Dimension mismatch");s.count++,s.inputIndices.push(t)}else s={count:1,dimValue:r,inputIndices:[t]};this.symbolToInfo.set(e,s)}processTerm(e,r,t,s=-1){let n=t.length,o=!1,a=[],i=0;if(!e.match(RegExp(lc))&&!r&&e!=="")throw new Error("Invalid LHS term");let l=e.match(RegExp(Qi,"g")),c=new hg(s);return l?.forEach((p,d)=>{if(p==="..."){if(o)throw new Error("Only one ellipsis is allowed per input term");o=!0;let u=n-l.length+1;if(u<0)throw new Error("Ellipsis out of bounds");if(a=t.slice(i,i+u),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let f=0;f<a.length;f++){let _=String.fromCharCode(48+f);c.addSymbol(_,d+f),this.addSymbol(_,t[i++],s)}}else c.addSymbol(p,d+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(p,t[i++],s)}),c}},cc=e=>e+"_max",fg=(e,r,t,s)=>{let n=e.map(c=>c.length).map((c,p)=>Ce(`input${p}`,r,c)),o=we.size(s),a=it("output",r,s.length),i=[...t.symbolToInfo.keys()].filter(c=>!t.rhs.symbolToIndices.has(c)),l=c=>{let p=[],d="var prod = 1.0;",u="var sum = 0.0;",f="sum += prod;",_=[],v=[],I=[],M=[],y=t.symbolToInfo.size===t.rhs.symbolToIndices.size;t.symbolToInfo.forEach((x,T)=>{if(t.rhs.symbolToIndices.has(T)){let E=t.rhs.symbolToIndices.get(T)?.[0];E!==void 0&&t.lhs.forEach((b,S)=>{if(x.inputIndices.includes(S)){let D=b.symbolToIndices.get(T);if(D===void 0)throw new Error("Invalid symbol error");D.forEach(O=>{p.push(`${n[S].indicesSet(`input${S}Indices`,O,a.indicesGet("outputIndices",E))}`)})}})}else t.lhs.forEach((E,b)=>{if(x.inputIndices.includes(b)){let S=E.symbolToIndices.get(T);if(S===void 0)throw new Error("Invalid symbol error");S.forEach(D=>{_.push(`${n[b].indicesSet(`input${b}Indices`,D,`${T}`)}`)}),M.push(`prod *= ${n[b].getByIndices(`input${b}Indices`)};`)}}),v.push(`for(var ${T}: u32 = 0; ${T} < uniforms.${cc(T)}; ${T}++) {`),I.push("}")});let $=y?[...p,`let sum = ${n.map((x,T)=>x.getByIndices(`input${T}Indices`)).join(" * ")};`]:[...p,u,...v,..._,d,...M,f,...I];return`
            ${c.registerUniforms(i.map(x=>({name:`${cc(x)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...n,a)}

            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${n.map((x,T)=>`var input${T}Indices: ${n[T].type.indices};`).join(`
`)}
            ${$.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:t.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let c=i.filter(d=>t.symbolToInfo.has(d)).map(d=>({type:12,data:t.symbolToInfo.get(d)?.dimValue||0}));c.push({type:12,data:o});let p=e.map((d,u)=>[...ct(d)]).reduce((d,u)=>d.concat(u),c);return p.push(...ct(s)),{outputs:[{dims:s,dataType:r}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p}},getShaderSource:l}},Ty=(e,r)=>{let t=new _g(e.inputs,r.equation),s=t.outputDims,n=e.inputs.map((o,a)=>o.dims);e.compute(fg(n,e.inputs[0].dataType,t,s))},Ey=e=>{let r=e.equation.replace(/\s+/g,"");return Bt({equation:r})}}),gg,uc,wg,Mg,Py,Gx=Re(()=>{ft(),yt(),xt(),gg=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let r=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),s=t.length<r.length?0:t.length-r.length,n=r.length<t.length?0:r.length-t.length;for(;s<t.length&&n<r.length;++s,++n)if(t[s]!==r[n]&&t[s]!==1&&r[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},uc=(e,r)=>{let t=e.length-r.length,s=[];for(let n=0;n<t;++n)s.push(e[n]);for(let n=0;n<r.length;++n)s.push(r[n]===1?e[n+t]:r[n]);return s},wg=(e,r)=>e.length>r.length?uc(e,r):uc(r,e),Mg=e=>{let r=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),s=wg(r,t),n=e[0].dataType,o=n===9||we.size(r)===1,a=n===9||r.length>0&&r[r.length-1]%4===0?4:1,i=o||s.length>0&&s[s.length-1]%4===0?4:1,l=Math.ceil(we.size(s)/i),c=d=>{let u=Ce("input",n,r.length,a),f=it("output",n,s.length,i),_;if(n===9){let v=(I,M,y="")=>`
          let outputIndices${M} = ${f.offsetToIndices(`outputOffset + ${M}u`)};
          let offset${M} = ${u.broadcastedIndicesToOffset(`outputIndices${M}`,f)};
          let index${M} = offset${M} / 4u;
          let component${M} = offset${M} % 4u;
          ${I}[${M}] = ${y}(${u.getByOffset(`index${M}`)}[component${M}]);
        `;_=`
        let outputOffset = global_idx * ${i};
        var data = vec4<u32>(0);
        ${v("data",0,"u32")}
        ${v("data",1,"u32")}
        ${v("data",2,"u32")}
        ${v("data",3,"u32")}
        ${f.setByOffset("global_idx","data")}
      }`}else _=`
        let outputIndices = ${f.offsetToIndices(`global_idx * ${i}`)};
        let inputOffset = ${u.broadcastedIndicesToOffset("outputIndices",f)};
        let data = ${f.type.value}(${u.getByOffset(`inputOffset / ${a}`)});
        ${f.setByOffset("global_idx","data")}
      }`;return`
    ${d.registerUniform("vec_size","u32").declareVariables(u,f)}
    ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${_}`},p=[{type:12,data:l},...ct(r,s)];return{name:"Expand",shaderCache:{hint:`${s.length};${a}${i}`,inputDependencies:["rank"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:p})}},Py=e=>{gg(e.inputs),e.compute(Mg(e.inputs),{inputs:[0]})}}),bg,Cy,Kx=Re(()=>{ft(),yt(),xt(),hu(),bg=e=>{let r=e[0].dataType,t=we.size(e[0].dims),s=we.size(e[1].dims),n=s%4===0,o=a=>{let i=Ce("x",r,[1],4),l=Ce("bias",r,[1],4),c=it("y",r,[1],4),p=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],d=f=>`
      let bias${f}_offset: u32 = (global_idx * 4 + ${f}) % uniforms.bias_size;
      let bias${f} = ${l.getByOffset(`bias${f}_offset / 4`)}[bias${f}_offset % 4];`,u=n?`
      let bias = ${l.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${d(0)}${d(1)}${d(2)}${d(3)}
      let bias = ${i.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(p).declareVariables(i,l,c)}

    ${Vc(jr(r))}

    ${a.mainStart(to)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${i.getByOffset("global_idx")};
      ${u}
      let x_in = x + bias;
      ${c.setByOffset("global_idx",Uc("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${n}`,inputDependencies:["type","type"]},getShaderSource:o,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(t/4)},{type:12,data:s}],dispatchGroup:{x:Math.ceil(t/to/4)}})}},Cy=e=>{e.inputs.length<2||we.size(e.inputs[1].dims)===0?Hb(e):e.compute(bg(e.inputs))}}),yg,vg,Sy,$y,Hx=Re(()=>{ft(),yt(),lr(),xt(),yg=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},vg=(e,r)=>{let t=e[0].dims,s=e[1].dims,n=t.length,o=we.normalizeAxis(r.axis,n),a=t.slice(0);a.splice(o,1,...s);let i=t[o],l=e[0].dataType===9?4:1,c=Math.ceil(we.size(a)/l),p=[{type:12,data:c},{type:6,data:i},{type:12,data:o},...ct(e[0].dims,e[1].dims,a)],d=u=>{let f=Ce("data",e[0].dataType,e[0].dims.length,l),_=Ce("inputIndices",e[1].dataType,e[1].dims.length),v=it("output",e[0].dataType,a.length,l),I=y=>{let $=s.length,x=`var indicesIndices${y}  = ${_.type.indices}(0);`;for(let T=0;T<$;T++)x+=`${$>1?`indicesIndices${y}[${T}]`:`indicesIndices${y}`} = ${a.length>1?`outputIndices${y}[uniforms.axis + ${T}]`:`outputIndices${y}`};`;x+=`
          var idx${y} = ${_.getByIndices(`indicesIndices${y}`)};
          if (idx${y} < 0) {
            idx${y} = idx${y} + uniforms.axisDimLimit;
          }
          var dataIndices${y} : ${f.type.indices};
        `;for(let T=0,E=0;T<n;T++)T===o?(x+=`${n>1?`dataIndices${y}[${T}]`:`dataIndices${y}`} = u32(idx${y});`,E+=$):(x+=`${n>1?`dataIndices${y}[${T}]`:`dataIndices${y}`} = ${a.length>1?`outputIndices${y}[${E}]`:`outputIndices${y}`};`,E++);return x},M;if(e[0].dataType===9){let y=($,x,T="")=>`
          let outputIndices${x} = ${v.offsetToIndices(`outputOffset + ${x}u`)};
          ${I(x)};
          let offset${x} = ${f.indicesToOffset(`dataIndices${x}`)};
          let index${x} = offset${x} / 4u;
          let component${x} = offset${x} % 4u;
          ${$}[${x}] = ${T}(${f.getByOffset(`index${x}`)}[component${x}]);
        `;M=`
        let outputOffset = global_idx * ${l};
        var value = vec4<u32>(0);
        ${y("value",0,"u32")}
        ${y("value",1,"u32")}
        ${y("value",2,"u32")}
        ${y("value",3,"u32")}
        ${v.setByOffset("global_idx","value")}
      `}else M=`
      let outputIndices = ${v.offsetToIndices("global_idx")};
      ${I("")};
      let value = ${f.getByIndices("dataIndices")};
      ${v.setByOffset("global_idx","value")};
      `;return`
      ${u.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(f,_,v)}
      ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${M}
      }`};return{name:"Gather",shaderCache:{hint:r.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:p}),getShaderSource:d}},Sy=e=>Bt({axis:e.axis}),$y=(e,r)=>{let t=e.inputs;yg(t),e.compute(vg(e.inputs,r))}}),xg,ky,Iy,qx=Re(()=>{ft(),yt(),xt(),xg=(e,r,t,s,n,o,a,i,l)=>{let c=[{type:12,data:o},{type:12,data:s},{type:12,data:n},{type:12,data:t},{type:12,data:a},{type:12,data:i},{type:12,data:l}],p=[o];c.push(...ct(r.dims,p));let d=u=>{let f=Ce("indices_data",r.dataType,r.dims.length),_=it("input_slice_offsets_data",12,1,1),v=[f,_],I=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:n.length},{name:"sizes_from_slice_dims_data",type:"u32",length:t.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${u.registerUniforms(I).declareVariables(...v)}
  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${n.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${t.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${n.length}_${t.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c}),getShaderSource:d},{inputs:[r],outputs:[-1]})[0]},ky=(e,r)=>{let t=e.inputs,s=t[0].dims,n=t[0].dataType,o=t[1].dims,a=o[o.length-1],i=we.sizeToDimension(o,o.length-1),l=we.sizeFromDimension(s,r.batchDims+a),c=we.sizeToDimension(s,r.batchDims),p=we.sizeFromDimension(s,r.batchDims),d=i/c,u=new Array(a),f=l;for(let x=0;x<a;++x)u[a-1-x]=f,f*=s[r.batchDims+a-1-x];let _=xg(e,t[1],u,r.batchDims,s,i,d,p,a),v=r.batchDims+a;if(v>s.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let I=o.slice(0,-1).concat(s.slice(v)),M=we.size(I),y=[{type:12,data:M},{type:12,data:l},...ct(t[0].dims,_.dims,I)],$=x=>{let T=Ce("data",t[0].dataType,t[0].dims.length),E=Ce("slice_offsets",12,_.dims.length),b=it("output",t[0].dataType,I.length);return`
          ${x.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(T,E,b)}
            ${x.mainStart()}
            ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:r.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:I,dataType:n}],dispatchGroup:{x:Math.ceil(M/64)},programUniforms:y}),getShaderSource:$},{inputs:[t[0],_]})},Iy=e=>({batchDims:e.batch_dims,cacheKey:""})}),Tg,Eg,Ay,Fy,Qx=Re(()=>{ft(),yt(),lr(),xt(),Tg=(e,r)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let t=we.normalizeAxis(r.quantizeAxis,e[0].dims.length),s=r.blockSize,n=e[0],o=e[2],a=e.length===4?e[3]:void 0;if(o.dims.length!==n.dims.length||!n.dims.map((i,l)=>l===t?Math.ceil(i/s)===o.dims[l]:i===o.dims[l]).reduce((i,l)=>i&&l,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==n.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==o.dims.length||!a.dims.map((i,l)=>i===o.dims[l]).reduce((i,l)=>i&&l,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},Eg=(e,r)=>{let t=e[0].dims,s=e[1].dims,n=t.length,o=we.normalizeAxis(r.gatherAxis,n),a=we.normalizeAxis(r.quantizeAxis,n),i=t.slice(0);i.splice(o,1,...s);let l=we.size(i),c=e[2].dataType,p=e[0].dataType===22,d=[{type:12,data:l},{type:12,data:a},{type:12,data:o},{type:12,data:r.blockSize},...ct(...e.map((f,_)=>f.dims),i)],u=f=>{let _=Ce("data",e[0].dataType,e[0].dims.length),v=Ce("inputIndices",e[1].dataType,e[1].dims.length),I=Ce("scales",e[2].dataType,e[2].dims.length),M=e.length>3?Ce("zeroPoint",e[3].dataType,e[3].dims.length):void 0,y=it("output",c,i.length),$=[_,v,I];M&&$.push(M);let x=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${f.registerUniforms(x).declareVariables(...$,y)}
        ${f.mainStart()}
        let output_indices = ${y.offsetToIndices("global_idx")};
        var indices_indices = ${v.type.indices}(0);
        ${s.length>1?`
          for (var i: u32 = 0; i < ${s.length}; i++) {
            let index = ${y.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${v.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${y.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${_.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${y.indicesGet("output_indices","i")};
          ${_.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${v.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${t[o]};
        }
        ${_.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${i.length}; i++) {
          let index = ${y.indicesGet("output_indices",`i + ${s.length} - 1`)};
          ${_.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${_.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${_.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${I.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${I.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${I.getByIndices("scale_indices")};
        ${M?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${M.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${M.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${jr(c)}(quantized_data - zero_point) * scale;
        ${y.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${r.cacheKey};${e.filter((f,_)=>_!==1).map(f=>f.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(f,_)=>"rank")},getRunData:()=>({outputs:[{dims:i,dataType:c}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:u}},Ay=(e,r)=>{let t=e.inputs;Tg(t,r),e.compute(Eg(e.inputs,r))},Fy=e=>Bt({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),Pg,Cg,Oy,Dy,Xx=Re(()=>{ft(),yt(),lr(),xt(),Pg=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Cg=(e,r)=>{let t=e[0].dims,s=e[0].dataType,n=t.length,o=e[1].dims,a=e[1].dataType,i=we.normalizeAxis(r.axis,n),l=t[i],c=o.slice(0),p=we.size(c),d=Ce("input",s,n),u=Ce("indicesInput",a,o.length),f=it("output",s,c.length),_=[{type:12,data:p},{type:6,data:l},{type:12,data:i}];return _.push(...ct(t,o,c)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:_}),getShaderSource:v=>`
      ${v.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(d,u,f)}
      ${v.mainStart()}
      ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${f.offsetToIndices("global_idx")};

      var idx = ${u.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${d.type.indices}(outputIndices);
      ${d.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${d.getByIndices("inputIndices")};

      ${f.setByOffset("global_idx","value")};
  }`}},Oy=e=>Bt({axis:e.axis}),Dy=(e,r)=>{let t=e.inputs;Pg(t),e.compute(Cg(e.inputs,r))}}),Sg,$g,Ly,zy,Jx=Re(()=>{ft(),yt(),xt(),Sg=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},$g=(e,r)=>{let t=e[0].dims.slice(),s=e[1].dims.slice(),[n,o,a]=OM.getShapeOfGemmResult(t,r.transA,s,r.transB,e.length===3?e[2].dims:void 0),i=[n,o];if(!i)throw new Error("Can't use gemm on the given tensors");let l=16,c=Math.ceil(o/l),p=Math.ceil(n/l),d=!0,u=we.size(i),f=[{type:12,data:d?c:u},{type:12,data:n},{type:12,data:o},{type:12,data:a},{type:1,data:r.alpha},{type:1,data:r.beta}],_=["type","type"];e.length===3&&(f.push(...ct(e[2].dims)),_.push("rank")),f.push(...ct(i));let v=M=>{let y="";r.transA&&r.transB?y="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":r.transA&&!r.transB?y="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!r.transA&&r.transB?y="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!r.transA&&!r.transB&&(y="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let $=r.alpha===1?"":"value *= uniforms.alpha;",x=Ce("a",e[0].dataType,e[0].dims),T=Ce("b",e[1].dataType,e[1].dims),E=x.type.value,b=null,S=[x,T];e.length===3&&(b=Ce("c",e[2].dataType,e[2].dims.length),S.push(b));let D=it("output",e[0].dataType,i.length);S.push(D);let O=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${M.registerUniforms(O).declareVariables(...S)}

  ${M.mainStart()}
    ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${E}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${y}
    }

    ${$}
    ${b!=null?`let cOffset = ${b.broadcastedIndicesToOffset("vec2(m, n)",D)}; value += ${E}(uniforms.beta) * ${b.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},I=M=>{let y=Ce("a",e[0].dataType,e[0].dims),$=Ce("b",e[1].dataType,e[1].dims),x=null,T=[y,$];e.length===3&&(x=Ce("c",e[2].dataType,e[2].dims.length),T.push(x));let E=it("output",e[0].dataType,i.length);T.push(E);let b=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],S="",D="";r.transA&&r.transB?(D=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${y.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):r.transA&&!r.transB?(D=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${y.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!r.transA&&r.transB?(D=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${y.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!r.transA&&!r.transB&&(D=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${y.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${$.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let O=r.alpha===1?"":"value *= uniforms.alpha;";return`
  ${M.registerUniforms(b).declareVariables(...T)}
  var<workgroup> tile_a: array<array<${y.type.storage}, ${l}>, ${l}>;
  var<workgroup> tile_b: array<array<${$.type.storage}, ${l}>, ${l}>;
  ${M.mainStart([l,l,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${l};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${l};
    let num_tiles = (uniforms.K - 1) / ${l} + 1;
    var k_start = 0u;
    var value = ${E.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${D}
      k_start = k_start + ${l};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${l}; k++) {
        ${S}
      }
      workgroupBarrier();
    }

    ${O}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += ${E.type.value}(uniforms.beta) * ${x.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return d?{name:"GemmShared",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:c*p},programUniforms:f}),getShaderSource:I}:{name:"Gemm",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:f}),getShaderSource:v}},Ly=e=>{let r=e.transA,t=e.transB,s=e.alpha,n=e.beta;return{transA:r,transB:t,alpha:s,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},zy=(e,r)=>{Sg(e.inputs),e.compute($g(e.inputs,r))}}),Fs,js,fn,gn,kg,Ig,Ag,Fg,Og,Dg,Lg,zg,By,Ry,Yx=Re(()=>{ft(),yt(),lr(),xt(),[Fs,js,fn,gn]=[0,1,2,3],kg=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},Ig=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,Ag=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,Fg=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,Og=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,Dg=(e,r,t)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${r} {
     var pixel = ${r}(0);
     var indices = vec4<u32>(0);
     indices[${Fs}] = batch;
     indices[${js}] = channel;`+(()=>{switch(t.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${fn}] = u32(r);
            indices[${gn}] = u32(c);
          } else {
            return ${r}(0);
          }
        `;case"border":return`
          indices[${fn}] = u32(clamp(r, 0, H - 1));
          indices[${gn}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${fn}] = gs_reflect(r, border[1], border[3]);
          indices[${gn}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${t.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,Lg=(e,r,t)=>(()=>{switch(t.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${Fs}], indices[${js}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${Fs}], indices[${js}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${Fs}], indices[${js}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${Fs}], indices[${js}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${Fs}], indices[${js}], border);

          let dx2 = ${r}(f32(x2) - x);
          let dx1 = ${r}(x - f32(x1));
          let dy2 = ${r}(f32(y2) - y);
          let dy1 = ${r}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${r}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${Fs}], indices[${js}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${t.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,zg=(e,r)=>{let t=Ce("x",e[0].dataType,e[0].dims.length),s=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],n=Ce("grid",e[1].dataType,s.length,2),o=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];r.format==="NHWC"&&(o=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[Fs,js,fn,gn]=[0,3,1,2]);let a=it("output",e[0].dataType,o.length),i=t.type.value,l=we.size(o),c=[{type:12,data:l},...ct(e[0].dims,s,o)],p=d=>`
  ${d.registerUniform("output_size","u32").declareVariables(t,n,a)}
  ${Ig}
  ${Ag(i)}
  ${Fg(r)}
  ${Og(r)}
  ${Dg(t,i,r)}

  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${fn}]);
      let W_in = i32(uniforms.x_shape[${gn}]);

      ${r.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${a.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${Fs}], indices[${fn}], indices[${gn}]);
      let nxy = ${n.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${Lg(a,i,r)}
  }`;return{name:"GridSample",shaderCache:{hint:`${r.cacheKey}`,inputDependencies:["type","type"]},getRunData:d=>{let u=we.size(o);return{outputs:[{dims:o,dataType:d[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:c}},getShaderSource:p}},By=(e,r)=>{kg(e.inputs),e.compute(zg(e.inputs,r))},Ry=e=>Bt({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),Wr,Bg,jy,dc,Rg,Ko,Ny,Vy=Re(()=>{ft(),yt(),lr(),uu(),mu(),xt(),rn(),Wr=(e,r)=>e.length>r&&e[r].dims.length>0?e[r]:void 0,Bg=(e,r)=>{let t=e[0],s=Wr(e,1),n=Wr(e,2),o=Wr(e,3),a=Wr(e,4),i=Wr(e,5),l=Wr(e,6),c=Wr(e,7);if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let p=t.dims[0],d=t.dims[1],u=t.dims.length===3?t.dims[2]:r.numHeads*t.dims[4],f=d,_=0,v=0,I=Math.floor(u/r.numHeads);if(l&&c&&we.size(l.dims)&&we.size(c.dims)){if(l.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(l.dims[0]!==p||l.dims[1]!==r.numHeads||l.dims[3]!==I)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(c.dims[0]!==p||c.dims[1]!==r.numHeads||c.dims[3]!==I)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[2]!==c.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');_=l.dims[2],v=l.dims[2]}else if(l&&we.size(l.dims)||c&&we.size(c.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let M;if(s&&we.size(s.dims)>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(s.dims.length<3||s.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==s.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(s.dims.length===3){if(s.dims[2]!==t.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');M=2,f=s.dims[1]}else if(s.dims.length===5){if(s.dims[2]!==r.numHeads||s.dims[3]!==2||s.dims[4]!==I)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');M=5,f=s.dims[1]}else{if(s.dims[1]!==r.numHeads||s.dims[3]!==I)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');M=0,f=s.dims[2]}}else{if(t.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(t.dims[2]!==r.numHeads||t.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');M=3}if(o&&we.size(o.dims)>0){if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&s.dims.length===5&&s.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let y=_+f,$=0;if(a&&we.size(a.dims)>0){$=8;let b=a.dims;throw b.length===1?b[0]===p?$=1:b[0]===3*p+2&&($=3):b.length===2&&b[0]===p&&b[1]===y&&($=5),$===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let x=!1,T=u;if(n&&we.size(n.dims)>0){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(f!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');T=n.dims[2]}else{if(f!==n.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');T=n.dims[1]*n.dims[3],x=!0}}let E=!1;if(a&&we.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(i&&we.size(i.dims)>0){if(i.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(i.dims[0]!==p||i.dims[1]!==r.numHeads||i.dims[2]!==d||i.dims[3]!==y)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:p,sequenceLength:d,pastSequenceLength:_,kvSequenceLength:f,totalSequenceLength:y,maxSequenceLength:v,inputHiddenSize:0,hiddenSize:u,vHiddenSize:T,headSize:I,vHeadSize:Math.floor(T/r.numHeads),numHeads:r.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:r.maskFilterValue,maskType:$,scale:r.scale,broadcastResPosBias:E,passPastInKv:x,qkvFormat:M}},jy=e=>Bt({...e}),dc=Bt({perm:[0,2,1,3]}),Rg=(e,r,t,s,n,o,a)=>{let i=[s,n,o],l=we.size(i),c=[{type:12,data:l},{type:12,data:a},{type:12,data:o}],p=d=>{let u=it("qkv_with_bias",r.dataType,i),f=Ce("qkv",r.dataType,i),_=Ce("bias",t.dataType,i),v=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${d.registerUniforms(v).declareVariables(f,_,u)}
  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:r.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:p},{inputs:[r,t],outputs:[-1]})[0]},Ko=(e,r,t,s,n,o,a,i)=>{let l=o;if(a&&we.size(a.dims)>0){if(s===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=Rg(e,o,a,r,s,t*n,i),l=l.reshape([r,s,t,n]),t===1||s===1?l:e.compute(rs(l,dc.perm),{inputs:[l],outputs:[-1]})[0]}else return o.dims.length===3&&(l=o.reshape([r,s,t,n])),t===1||s===1?l:e.compute(rs(l,dc.perm),{inputs:[l],outputs:[-1]})[0]},Ny=(e,r)=>{let t=Bg(e.inputs,r),s=e.inputs[0],n=Wr(e.inputs,1),o=Wr(e.inputs,2),a=Wr(e.inputs,3),i=Wr(e.inputs,4),l=Wr(e.inputs,5),c=Wr(e.inputs,6),p=Wr(e.inputs,7);if(s.dims.length===5)throw new Error("Packed QKV is not implemented");if(n?.dims.length===5)throw new Error("Packed KV is not implemented");let d=n&&o&&n.dims.length===4&&o.dims.length===4,u=Ko(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,s,a,0);if(d)return Xo(e,u,n,o,i,void 0,c,p,l,t);if(!n||!o)throw new Error("key and value must be provided");let f=Ko(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.headSize,n,a,t.hiddenSize),_=Ko(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.vHeadSize,o,a,2*t.hiddenSize);Xo(e,u,f,_,i,void 0,c,p,l,t)}}),jg,Ng,Vg,Ug,qc,Uy,Wy,Gy=Re(()=>{ft(),yt(),lr(),xt(),jg=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Ng=(e,r)=>{let t=[],s=r.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>t.push(Number(n))),s=t.length),Bt({numOutputs:s,axis:r.axis,splitSizes:t})},Vg=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${at("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Ug=e=>{let r=e.length,t=[];for(let s=0;s<r;++s){let n=e[s].setByIndices("indices","input[global_idx]");r===1?t.push(n):s===0?t.push(`if (output_number == ${s}u) { ${n} }`):s===r-1?t.push(`else { ${n} }`):t.push(`else if (output_number == ${s}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${t.join(`
`)}
      }`},qc=(e,r)=>{let t=e[0].dims,s=we.size(t),n=e[0].dataType,o=we.normalizeAxis(r.axis,t.length),a=new Array(r.numOutputs),i=Ce("input",n,t.length),l=new Array(r.numOutputs),c=[],p=[],d=0,u=[{type:12,data:s}];for(let _=0;_<r.numOutputs;_++){d+=r.splitSizes[_],l[_]=d;let v=t.slice();v[o]=r.splitSizes[_],p.push(v),a[_]=it(`output${_}`,n,v.length),c.push({dims:p[_],dataType:e[0].dataType})}u.push({type:12,data:l},...ct(t,...p));let f=_=>`
  ${_.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(i,...a)}
  ${Vg(l.length)}
  ${Ug(a)}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${i.offsetToIndices("global_idx")};
    var index = ${i.indicesGet("indices",o)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${at("uniforms.size_in_split_axis","output_number - 1u",l.length)};
      ${i.indicesSet("indices",o,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getShaderSource:f,getRunData:()=>({outputs:c,dispatchGroup:{x:Math.ceil(s/64)},programUniforms:u})}},Uy=(e,r)=>{jg(e.inputs);let t=e.inputs.length===1?r:Ng(e.inputs,r);e.compute(qc(e.inputs,t),{inputs:[0]})},Wy=e=>{let r=e.axis,t=e.splitSizes,s=e.numOutputs<0?t.length:e.numOutputs;if(s!==t.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Bt({axis:r,numOutputs:s,splitSizes:t})}}),Wg,la,Ky,Hy=Re(()=>{ft(),yt(),lr(),xt(),Wg=(e,r)=>{let[t,s,n,o]=e,{numHeads:a,rotaryEmbeddingDim:i}=r;if(t.dims.length!==3&&t.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${t.dims.length}`);if(!we.areEqual(s.dims,[])&&!we.areEqual(s.dims,[1])&&s.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${s.dims.length}`);if(n.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${n.dims.length}`);if(o.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${o.dims.length}`);if(!we.areEqual(n.dims,o.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(i>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let l=t.dims[0],c=t.dims[t.dims.length-2],p=n.dims[0],d=we.sizeFromDimension(t.dims,1)/c,u=i===0?n.dims[1]*2:d/a;if(i>u)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(s.dims.length===2){if(l!==s.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${s.dims[0]}`);if(c!==s.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${s.dims[1]}`)}if(u/2!==n.dims[1]&&i/2!==n.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${n.dims[1]}`);if(c>p)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},la=(e,r)=>{let{interleaved:t,numHeads:s,rotaryEmbeddingDim:n,scale:o}=r,a=e[0].dims[0],i=we.sizeFromDimension(e[0].dims,1),l=e[0].dims[e[0].dims.length-2],c=i/l,p=e[2].dims[1],d=n===0?p*2:c/s,u=new Array(a,l,c/d,d-p),f=we.computeStrides(u),_=[{type:1,data:o},{type:12,data:u},{type:12,data:f},...e[0].dims.length===3?new Array({type:12,data:[i,c,d,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[i,d,l*d,1]}):[],...ct(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],v=I=>{let M=Ce("input",e[0].dataType,e[0].dims.length),y=Ce("position_ids",e[1].dataType,e[1].dims.length),$=Ce("cos_cache",e[2].dataType,e[2].dims.length),x=Ce("sin_cache",e[3].dataType,e[3].dims.length),T=it("output",e[0].dataType,e[0].dims.length);return I.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:u.length},{name:"global_strides",type:"u32",length:f.length},{name:"input_output_strides",type:"u32",length:f.length}]),`
        ${I.declareVariables(M,y,$,x,T)}

        ${I.mainStart(to)}
          let half_rotary_emb_dim = uniforms.${$.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${y.broadcastedIndicesToOffset("bsnh.xy",it("",y.type.tensor,2))};
            let position_id =
                u32(${y.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${t});
            let j = i + select(half_rotary_emb_dim, 1, ${t});
            let re = ${M.getByOffset("i")} * ${$.get("position_id","bsnh[3]")} -
                ${M.getByOffset("j")} * ${x.get("position_id","bsnh[3]")};
            ${T.setByOffset("i","re")}
            let im = ${M.getByOffset("i")} * ${x.get("position_id","bsnh[3]")} +
                ${M.getByOffset("j")} * ${$.get("position_id","bsnh[3]")};
            ${T.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${T.setByOffset("k",M.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Bt({interleaved:t}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:v,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(we.size(u)/to)},programUniforms:_})}},Ky=(e,r)=>{Wg(e.inputs,r),e.compute(la(e.inputs,r))}}),Gg,Kg,pc,Hg,qy,Zx=Re(()=>{lr(),ft(),mu(),Vy(),Gy(),rn(),Hy(),xt(),Gg=(e,r)=>{if(r.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let t=e[0],s=e[1],n=e[2],o=e[3],a=e[4];if(r.doRotary!==0&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(r.localWindowSize!==-1)throw new Error("Local attention is not supported");if(r.softcap!==0)throw new Error("Softcap is not supported");if(r.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(r.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let i=!1,l=t.dims[0],c=t.dims[1],p=t.dims.length===3?i?t.dims[2]/3:t.dims[2]:r.numHeads*t.dims[4],d=c,u=0,f=!s||s.dims.length===0,_=Math.floor(f?p/(r.numHeads+2*r.kvNumHeads):p/r.numHeads);f&&(p=_*r.numHeads);let v=o&&o.dims.length!==0,I=a&&a.dims.length!==0;if(v&&o.dims.length===4&&o.dims[0]===l&&o.dims[1]!==r.kvNumHeads&&o.dims[2]===r.kvNumHeads&&o.dims[3]===_)throw new Error("BSNH pastKey/pastValue is not supported");if(v&&I){if(o.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');u=o.dims[2]}else if(v||I)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let M=1;if(s&&s.dims.length>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(s.dims.length<3||s.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==s.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(s.dims.length===3){if(t.dims[2]%s.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');d=s.dims[1]}else if(s.dims.length===5){if(s.dims[2]!==r.numHeads||s.dims[3]!==2||s.dims[4]!==_)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');d=s.dims[1]}else{if(s.dims[1]!==r.numHeads||s.dims[3]!==_)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');d=s.dims[2]}}else{if(t.dims.length!==3&&t.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(t.dims.length===5&&(t.dims[2]!==r.numHeads||t.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');M=3}let y=0,$=!1,x=r.kvNumHeads?_*r.kvNumHeads:p;if(n&&n.dims.length>0){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(d!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');x=n.dims[2]}else{if(d!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');x=n.dims[1]*n.dims[3],$=!0}}let T=e.length>4?e[5]:void 0;if(T&&T.dims.length!==1&&T.dims[0]!==l)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:l,sequenceLength:c,pastSequenceLength:u,kvSequenceLength:d,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:p,vHiddenSize:x,headSize:_,vHeadSize:Math.floor(x/r.kvNumHeads),numHeads:r.numHeads,kvNumHeads:r.kvNumHeads,nReps:r.numHeads/r.kvNumHeads,pastPresentShareBuffer:!1,maskType:y,scale:r.scale,broadcastResPosBias:!1,passPastInKv:$,qkvFormat:M}},Kg=Bt({perm:[0,2,1,3]}),pc=(e,r,t)=>{let s=r,n=t.kvNumHeads;return r.dims.length===3&&t.kvSequenceLength!==0&&(s=r.reshape([t.batchSize,t.kvSequenceLength,n,t.headSize]),s=e.compute(rs(s,Kg.perm),{inputs:[s],outputs:[-1]})[0]),s},Hg=(e,r,t,s)=>{let n=7,o=["type","type"],a=[e*r],i=e*r,l=[{type:12,data:i},{type:12,data:r},{type:12,data:e}],c=p=>{let d=Ce("seq_lens",t.dataType,t.dims),u=Ce("total_seq_lens",s.dataType,s.dims),f=it("pos_ids",n,a),_=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${p.registerUniforms(_).declareVariables(d,u,f)}
  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${u.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${d.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${f.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${f.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${f.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${r}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:l}),getShaderSource:c}},qy=(e,r)=>{let t=Gg(e.inputs,r);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let s=e.inputs[0],n=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,o=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,a=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,i=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,l=e.inputs.length>4?e.inputs[5]:void 0,c=e.inputs.length>5?e.inputs[6]:void 0,p=t.kvNumHeads?t.kvNumHeads:t.numHeads,d=Bt({axis:2,numOutputs:3,splitSizes:[t.numHeads*t.headSize,p*t.headSize,p*t.headSize]}),[u,f,_]=!n&&!o?e.compute(qc([s],d),{inputs:[s],outputs:[-1,-1,-1]}):[s,n,o],v,I;if(r.doRotary){let x=e.compute(Hg(t.batchSize,t.sequenceLength,l,c),{inputs:[l,c],outputs:[-1]})[0],T=e.inputs[7],E=e.inputs[8],b=Bt({interleaved:r.rotaryInterleaved!==0,numHeads:t.numHeads,rotaryEmbeddingDim:0,scale:r.scale}),S=[u,x,T,E],D=[-1];v=e.compute(la(S,b),{inputs:S,outputs:D})[0],S.splice(0,1,f);let O=Bt({interleaved:r.rotaryInterleaved!==0,numHeads:t.kvNumHeads,rotaryEmbeddingDim:0,scale:r.scale});I=e.compute(la(S,O),{inputs:S,outputs:D})[0]}let M=Ko(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,r.doRotary?v:u,void 0,0),y=pc(e,r.doRotary?I:f,t),$=pc(e,_,t);Xo(e,M,y,$,void 0,void 0,a,i,void 0,t,l,c)}}),mc,qg,Qg,Qy,eT=Re(()=>{ft(),yt(),rn(),xt(),mc=(e,r,t,s,n,o,a,i)=>{let l=ar(o),c=l===1?"f32":`vec${l}f`,p=l===1?"vec2f":`mat2x${l}f`,d=n*a,u=64;d===1&&(u=256);let f=[n,a,o/l],_=[n,a,2],v=["rank","type","type"],I=[];I.push(...ct(f,_));let M=y=>{let $=Ce("x",r.dataType,3,l),x=Ce("scale",t.dataType,t.dims),T=Ce("bias",s.dataType,s.dims),E=it("output",1,3,2),b=[$,x,T,E];return`
  var<workgroup> workgroup_shared : array<${p}, ${u}>;
  const workgroup_size = ${u}u;
  ${y.declareVariables(...b)}
  ${y.mainStart(u)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${c}(0);
    var squared_sum = ${c}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${c}(${$.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${p}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${tn("workgroup_shared[0][0]",l)} / f32(hight * ${l});
      let squared_sum_final = ${tn("workgroup_shared[0][1]",l)} / f32(hight * ${l});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${i}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${i};${u}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:_,dataType:1}],dispatchGroup:{x:d},programUniforms:I}),getShaderSource:M},{inputs:[r,t,s],outputs:[-1]})[0]},qg=(e,r,t)=>{let s=r[0].dims,n=s,o=2,a=s[0],i=s[1],l=we.sizeFromDimension(s,o),c=ar(l),p=we.size(n)/c,d=mc(e,r[0],r[1],r[2],a,l,i,t.epsilon),u=[a,i,l/c],f=[a,i],_=["type","none"],v=I=>{let M=Ce("x",r[0].dataType,u.length,c),y=Ce("scale_shift",1,f.length,2),$=it("output",r[0].dataType,u.length,c),x=[M,y,$];return`
  ${I.registerUniform("output_size","u32").declareVariables(...x)}
  ${I.mainStart()}
  ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${$.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${y.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${M.getByOffset("global_idx")} * ${$.type.value}(scale_shift.x) + ${$.type.value}(scale_shift.y);
      ${$.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${c}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:n,dataType:r[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},...ct(u,f,u)]}),getShaderSource:v},{inputs:[r[0],d]})},Qg=(e,r,t)=>{let s=r[0].dims,n=s,o=s[0],a=s[s.length-1],i=we.sizeFromDimension(s,1)/a,l=ar(a),c=we.size(n)/l,p=[{type:12,data:i},{type:12,data:Math.floor(a/l)}],d=["type","type"],u=!1,f=[0,s.length-1];for(let M=0;M<s.length-2;M++)u=u||s[M+1]!==1,f.push(M+1);u=u&&s[s.length-1]!==1;let _=u?e.compute(rs(e.inputs[0],f),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:s.length},(M,y)=>s[f[y]])),v=mc(e,_,r[1],r[2],o,i,a,t.epsilon),I=M=>{let y=kr(r[0].dataType),$=l===1?"vec2f":`mat${l}x2f`,x=b=>{let S=b===0?"x":"y",D=l===1?"f32":`vec${l}f`;switch(l){case 1:return`${y}(${D}(scale.${S}))`;case 2:return`vec2<${y}>(${D}(scale[0].${S}, scale[1].${S}))`;case 4:return`vec4<${y}>(${D}(scale[0].${S}, scale[1].${S}, scale[2].${S}, scale[3].${S}))`;default:throw new Error(`Not supported compoents ${l}`)}},T=Ce("input",r[0].dataType,r[0].dims,l),E=it("output",r[0].dataType,n,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${T.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${$}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${M.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${x(0)}, ${x(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:n,dataType:r[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:p}),getShaderSource:I},{inputs:[r[0],v]})},Qy=(e,r)=>{r.format==="NHWC"?Qg(e,e.inputs,r):qg(e,e.inputs,r)}}),Xg,Jg,Xy,tT=Re(()=>{ft(),yt(),xt(),Xg=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Jg=(e,r,t)=>{let s=r.simplified,n=e[0].dims,o=e[1],a=!s&&e[2],i=n,l=we.normalizeAxis(r.axis,n.length),c=we.sizeToDimension(n,l),p=we.sizeFromDimension(n,l),d=we.size(o.dims),u=a?we.size(a.dims):0;if(d!==p||a&&u!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${d} and bias size of ${u}`);let f=[];for(let T=0;T<n.length;++T)T<l?f.push(n[T]):f.push(1);let _=ar(p),v=["type","type"],I=[{type:12,data:c},{type:1,data:p},{type:12,data:Math.floor(p/_)},{type:1,data:r.epsilon}];a&&v.push("type");let M=t>1,y=t>2,$=T=>{let E=kr(e[0].dataType),b=[Ce("x",e[0].dataType,e[0].dims,_),Ce("scale",o.dataType,o.dims,_)];a&&b.push(Ce("bias",a.dataType,a.dims,_)),b.push(it("output",e[0].dataType,i,_)),M&&b.push(it("mean_data_output",1,f)),y&&b.push(it("inv_std_output",1,f));let S=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${T.registerUniforms(S).declareVariables(...b)}
  ${T.mainStart()}
    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Rc("f32",_)};
    var mean_square_vector = ${Rc("f32",_)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Zn(E,_,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${tn("mean_vector",_)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${tn("mean_square_vector",_)} / uniforms.norm_size ${s?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Zn(E,_,"x[j + offset]")};
      let f32scale = ${Zn(E,_,"scale[j]")};
      output[j + offset] = ${b[0].type.value}((f32input ${s?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${Zn(E,_,"bias[j]")}`:""}
      );
    }

    ${M?"mean_data_output[global_idx] = mean":""};
    ${y?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},x=[{dims:i,dataType:e[0].dataType}];return M&&x.push({dims:f,dataType:1}),y&&x.push({dims:f,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${_};${t};${s}`,inputDependencies:v},getRunData:()=>({outputs:x,dispatchGroup:{x:Math.ceil(c/64)},programUniforms:I}),getShaderSource:$}},Xy=(e,r)=>{Xg(e.inputs),e.compute(Jg(e.inputs,r,e.outputCount))}}),Yg,Jy,rT=Re(()=>{yt(),wu(),Mu(),Yg=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Jy=e=>{Yg(e.inputs);let r=eo.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!r)throw new Error("Can't use matmul on the given tensors");let t=r[r.length-1],s=e.inputs[0].dims[e.inputs[0].dims.length-1];if(t<8&&s<8)e.compute(gu(e.inputs,{activation:""},r));else{let n=r[r.length-2],o=we.size(e.inputs[0].dims.slice(0,-2)),a=we.size(e.inputs[1].dims.slice(0,-2));if(o!==1&&n===1&&a===1){let i=e.inputs[0].reshape([1,o,s]),l=e.inputs[1].reshape([1,s,t]),c=[1,o,t],p=[i,l];e.compute(aa(p,{activation:""},r,c),{inputs:p})}else e.compute(aa(e.inputs,{activation:""},r))}}}),Zg,ew,tw,Yy,Zy,sT=Re(()=>{ft(),yt(),lr(),xt(),Zg=(e,r)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let t=e[0],s=t.dims.length;if(t.dims[s-1]!==r.k)throw new Error("The last dim of input shape does not match the k value");let n=Math.floor((r.k+r.blockSize-1)/r.blockSize),o=r.blockSize/8*r.bits,a=e[1];if(!we.areEqual(a.dims,[r.n,n,o]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let i=e[2].dims;if(we.size(i)!==r.n*n)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,c=r.bits>4?r.n*n:r.n*Math.floor((n+1)/2);if(we.size(l)!==c)throw new Error("zeroPoints input size error.")}},ew=(e,r)=>{let t=e[0].dims,s=t.length,n=t[s-2],o=r.k,a=r.n,i=t.slice(0,s-2),l=we.size(i),c=e[1].dims[2]/4,p=e[0].dataType,d=ar(r.k),u=ar(c),f=ar(a),_=i.concat([n,a]),v=n>1&&a/f%2===0?2:1,I=we.size(_)/f/v,M=64,y=[],$=[l,n,o/d],x=we.convertShape(e[1].dims).slice();x.splice(-1,1,c/u),y.push(...ct($)),y.push(...ct(x)),y.push(...ct(e[2].dims)),e.length===4&&y.push(...ct(we.convertShape(e[3].dims)));let T=[l,n,a/f];y.push(...ct(T));let E=b=>{let S=$.length,D=Ce("a",e[0].dataType,S,d),O=Ce("b",12,x.length,u),H=Ce("scales",e[2].dataType,e[2].dims.length),G=[D,O,H],z=e.length===4?Ce("zero_points",12,e[3].dims.length):void 0;z&&G.push(z);let Z=T.length,Q=it("output",e[0].dataType,Z,f),Y=kr(e[0].dataType),re=(()=>{switch(d){case 1:return`array<${Y}, 8>`;case 2:return`mat4x2<${Y}>`;case 4:return`mat2x4<${Y}>`;default:throw new Error(`${d}-component is not supported.`)}})(),te=()=>{let B=`
          // reuse a data
            var input_offset = ${D.indicesToOffset(`${D.type.indices}(batch, row, word_offset)`)};
            var a_data: ${re};
            for (var j: u32 = 0; j < ${8/d}; j++) {
              a_data[j] = ${D.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let F=0;F<f*v;F++)B+=`
            b_value = ${u===1?`b${F}_data`:`b${F}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${re}(${Array.from({length:4},(K,j)=>`${Y}(b_value_lower[${j}]), ${Y}(b_value_upper[${j}])`).join(", ")});
            b_dequantized_values = ${d===1?`${re}(${Array.from({length:8},(K,j)=>`(b_quantized_values[${j}] - ${z?`zero_point${F}`:"zero_point"}) * scale${F}`).join(", ")});`:`(b_quantized_values - ${re}(${Array(8).fill(`${z?`zero_point${F}`:"zero_point"}`).join(",")})) * scale${F};`};
            workgroup_shared[local_id.x * ${v} + ${Math.floor(F/f)}]${f>1?`[${F%f}]`:""} += ${Array.from({length:8/d},(K,j)=>`${d===1?`a_data[${j}] * b_dequantized_values[${j}]`:`dot(a_data[${j}], b_dequantized_values[${j}])`}`).join(" + ")};
          `;return B},le=()=>{let B=`
            var col_index = col * ${f};
            ${z?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Y}(8);`}
            `;for(let F=0;F<f*v;F++)B+=`
            let scale${F} = ${H.getByOffset("col_index * nBlocksPerCol + block")};
            ${z?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${z.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${F} = ${Y}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return B},ue=()=>{let B=`col_index = col * ${f};`;for(let F=0;F<f*v;F++)B+=`
            let b${F}_data = ${O.getByIndices(`${O.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return B+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${re};
            var b_dequantized_values: ${re};`,B};return`
        var<workgroup> workgroup_shared: array<${Q.type.value}, ${v*M}>;
        ${b.declareVariables(...G,Q)}
        ${b.mainStart([M,1,1])}
          let output_indices = ${Q.offsetToIndices(`(global_idx / ${M}) * ${v}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${M}) {
            //process one block
            var word_offset: u32 = block * ${r.blockSize/d};
            ${le()}
            for (var word: u32 = 0; word < ${c}; word += ${u}) {
              ${ue()}
              for (var i: u32 = 0; i < ${u}; i++) {
                ${te()}
                word_offset += ${8/d};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${v}) {
            var output_value: ${Q.type.value} = ${Q.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${M}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${v};
            }
            ${Q.setByIndices(`${Q.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${r.blockSize};${r.bits};${d};${u};${f};${v};${M}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:_,dataType:p}],dispatchGroup:{x:I},programUniforms:y}),getShaderSource:E}},tw=(e,r)=>{let t=e[0].dims,s=t.length,n=t[s-2],o=r.k,a=r.n,i=t.slice(0,s-2),l=we.size(i),c=e[1].dims[2]/4,p=e[0].dataType,d=ar(r.k),u=ar(c),f=i.concat([n,a]),_=128,v=a%8===0?8:a%4===0?4:1,I=_/v,M=I*u*8,y=M/d,$=M/r.blockSize,x=we.size(f)/v,T=[],E=[l,n,o/d],b=we.convertShape(e[1].dims).slice();b.splice(-1,1,c/u),T.push(...ct(E)),T.push(...ct(b)),T.push(...ct(e[2].dims)),e.length===4&&T.push(...ct(we.convertShape(e[3].dims)));let S=[l,n,a];T.push(...ct(S));let D=O=>{let H=E.length,G=Ce("a",e[0].dataType,H,d),z=Ce("b",12,b.length,u),Z=Ce("scales",e[2].dataType,e[2].dims.length),Q=[G,z,Z],Y=e.length===4?Ce("zero_points",12,e[3].dims.length):void 0;Y&&Q.push(Y);let re=S.length,te=it("output",e[0].dataType,re),le=kr(e[0].dataType),ue=()=>{switch(d){case 1:return`
          let a_data0 = vec4<${le}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${le}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${le}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${le}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${d}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${G.type.value}, ${y}>;
        var<workgroup> inter_results: array<array<${te.type.value}, ${I}>, ${v}>;
        ${O.declareVariables(...Q,te)}
        ${O.mainStart([I,v,1])}
          let output_indices = ${te.offsetToIndices(`workgroup_index * ${v}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${$} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${y};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${y}; a_offset += ${_})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${G.getByIndices(`${G.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${G.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${$} + local_id.x;
            ${Y?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${Y.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${le}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${le}(8);`}
            let scale = ${Z.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${z.getByIndices(`${z.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${r.blockSize/d};
            for (var i: u32 = 0; i < ${u}; i++) {
              ${ue()}
              let b_value = ${u===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${le}>(${Array.from({length:4},(B,F)=>`${le}(b_value_lower[${F}]), ${le}(b_value_upper[${F}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${le}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(B,F)=>`${`dot(a_data${F}, b_dequantized_values[${F}])`}`).join(" + ")};
              word_offset += ${8/d};
            }
            workgroupBarrier();
          }

          if (local_idx < ${v}) {
            var output_value: ${te.type.value} = ${te.type.value}(0);
            for (var b = 0u; b < ${I}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${te.setByIndices(`${te.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${r.blockSize};${d};${u};${I};${v}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:f,dataType:p}],dispatchGroup:{x},programUniforms:T}),getShaderSource:D}},Yy=(e,r)=>{Zg(e.inputs,r),r.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(tw(e.inputs,r)):e.compute(ew(e.inputs,r))},Zy=e=>Bt(e)}),rw,sw,nw,ow,iw,aw,lw,cw,e0,nT=Re(()=>{ft(),yt(),xt(),rw=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let r=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(r=e[3].dims[0]*2===e[1].dims[0]),!r)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},sw=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
            k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${at("uniforms.x_shape",n,r)})) {
              break;
            }
            offset += k * i32(${at("uniforms.x_strides",n,r)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${s}
            value = x[offset];
          }
      `},nw=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
                k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${at("uniforms.x_shape",n,r)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${at("uniforms.x_shape",n,r)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${at("uniforms.x_strides",n,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},ow=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
                k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${at("uniforms.x_shape",n,r)})) {
                  k = i32(${at("uniforms.x_shape",n,r)}) - 1;
                }
                offset += k * i32(${at("uniforms.x_strides",n,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},iw=(e,r,t)=>{let s="";for(let n=r-1;n>=0;--n)s+=`
                k = i32(${e.indicesGet("indices",n)}) - ${at("uniforms.pads",n,t)};
                if (k < 0)  {
                  k += i32(${at("uniforms.x_shape",n,r)}]);
                }
                if (k >= i32(${at("uniforms.x_shape",n,r)})) {
                  k -= i32(${at("uniforms.x_shape",n,r)});
                }
                offset += k * i32(${at("uniforms.x_strides",n,r)});
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},aw=(e,r,t)=>{switch(t.mode){case 0:return sw(e,r,t.pads.length);case 1:return nw(e,r,t.pads.length);case 2:return ow(e,r,t.pads.length);case 3:return iw(e,r,t.pads.length);default:throw new Error("Invalid mode")}},lw=(e,r)=>{let t=we.padShape(e[0].dims.slice(),r.pads),s=e[0].dims,n=we.size(t),o=[{type:12,data:n},{type:6,data:r.pads}],a=e.length>=3&&e[2].data;r.mode===0&&o.push({type:a?e[2].dataType:1,data:r.value}),o.push(...ct(e[0].dims,t));let i=["rank"],l=c=>{let p=it("output",e[0].dataType,t.length),d=Ce("x",e[0].dataType,s.length),u=d.type.value,f=aw(p,s.length,r),_=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:r.pads.length}];return r.mode===0&&_.push({name:"constant_value",type:a?u:"f32"}),`
            ${c.registerUniforms(_).declareVariables(d,p)}
            ${c.mainStart()}
            ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${u}(0);
            ${f}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${r.mode}${a}`,inputDependencies:i},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(we.size(t)/64)},programUniforms:o}),getShaderSource:l}},cw=(e,r)=>{if(e.length>1){let t=e[1].getBigInt64Array(),s=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,n=e[0].dims.length,o=new Int32Array(2*n).fill(0);if(e.length>=4){let i=e[3].getBigInt64Array();for(let l=0;l<i.length;l++)o[Number(i[l])]=Number(t[l]),o[Number(i[l])+n]=Number(t[l+i.length])}else t.forEach((i,l)=>o[Number(l)]=Number(i));let a=[];return o.forEach(i=>a.push(i)),{mode:r.mode,value:s,pads:a}}else return r},e0=(e,r)=>{rw(e.inputs);let t=cw(e.inputs,r);e.compute(lw(e.inputs,t),{inputs:[0]})}}),Ro,hc,_c,fc,gc,uw,dw,wc,Mc,t0,r0,bc,s0,n0,yc,o0,i0,a0,l0,oT=Re(()=>{Es(),ft(),yt(),xt(),Ro=e=>{if(Xt.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},hc=(e,r,t)=>{let s=r.format==="NHWC",n=e.dims.slice();s&&n.splice(1,0,n.pop());let o=Object.hasOwnProperty.call(r,"dilations"),a=r.kernelShape.slice(),i=r.strides.slice(),l=o?r.dilations.slice():[],c=r.pads.slice();oa.adjustPoolAttributes(t,n,a,i,l,c);let p=oa.computePoolOutputShape(t,n,i,l,a,c,r.autoPad),d=Object.assign({},r);o?Object.assign(d,{kernelShape:a,strides:i,pads:c,dilations:l,cacheKey:r.cacheKey}):Object.assign(d,{kernelShape:a,strides:i,pads:c,cacheKey:r.cacheKey});let u=p.slice();return u.push(u.splice(1,1)[0]),[d,s?u:p]},_c=(e,r)=>{let t=r.format==="NHWC",s=we.size(e),n=we.size(r.kernelShape),o=[{type:12,data:s},{type:12,data:n}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(r.kernelShape.length<=2){let i=r.kernelShape[r.kernelShape.length-1],l=r.strides[r.strides.length-1],c=r.pads[r.pads.length/2-1],p=r.pads[r.pads.length-1],d=!!(c+p);o.push({type:12,data:i},{type:12,data:l},{type:12,data:c},{type:12,data:p}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let u=!1;if(r.kernelShape.length===2){let f=r.kernelShape[r.kernelShape.length-2],_=r.strides[r.strides.length-2],v=r.pads[r.pads.length/2-2],I=r.pads[r.pads.length-2];u=!!(v+I),o.push({type:12,data:f},{type:12,data:_},{type:12,data:v},{type:12,data:I}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[o,a,!0,d,u]}else{if(t)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let i=we.computeStrides(r.kernelShape);o.push({type:12,data:i},{type:12,data:r.pads},{type:12,data:r.strides}),a.push({name:"kernelStrides",type:"u32",length:i.length},{name:"pads",type:"u32",length:r.pads.length},{name:"strides",type:"u32",length:r.strides.length});let l=r.pads.reduce((c,p)=>c+p);return[o,a,!!l,!1,!1]}},fc=(e,r,t,s,n,o,a,i,l,c,p,d)=>{let u=n.format==="NHWC",f=r.type.value,_=it("output",r.type.tensor,s);if(n.kernelShape.length<=2){let v="",I="",M="",y=t-(u?2:1);if(p?v=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${y}] = indices[${y}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${y}] < 0 || xIndices[${y}]
                      >= uniforms.x_shape[${y}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${r.indicesToOffset("xIndices")}];
                  ${o}
                }`:v=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${y}] = indices[${y}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${r.indicesToOffset("xIndices")}];
                  ${o}
                }`,n.kernelShape.length===2){let $=t-(u?3:2);d?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${$}] = indices[${$}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${$}] < 0 || xIndices[${$}] >= uniforms.x_shape[${$}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${$}] = indices[${$}] * uniforms.sh - uniforms.phStart + j;
                `,M=`
              }
            `}return`
            ${e.registerUniforms(l).declareVariables(r,_)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${_.offsetToIndices("global_idx")};
              var xIndices = ${_.offsetToIndices("global_idx")};

              var value = ${f}(${i});
              var pad = 0;
              ${I}
              ${v}
              ${M}
              ${a}

              output[global_idx] = value;
            }`}else{if(u)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let v=n.kernelShape.length,I=n.pads.length,M="";return c?M=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${r.indicesToOffset("xIndices")}];
                ${o}
              }`:M=`
              }
              let x_val = x[${r.indicesToOffset("xIndices")}];
              ${o}
            `,`
            ${e.registerUniforms(l).declareVariables(r,_)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${_.offsetToIndices("global_idx")};
              var xIndices = ${_.offsetToIndices("global_idx")};

              var offsets: array<u32, ${v}>;

              var value = ${f}(${i});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${v-1}u; j++) {
                  offsets[j] = offset / ${at("uniforms.kernelStrides","j",v)};
                  offset -= offsets[j] * ${at("uniforms.kernelStrides","j",v)};
                }
                offsets[${v-1}] = offset;

                isPad = false;
                for (var j = ${t-v}u; j < ${t}u; j++) {
                  xIndices[j] = indices[j] * ${at("uniforms.strides",`j - ${t-v}u`,v)}
                    + offsets[j - ${t-v}u] - ${at("uniforms.pads","j - 2u",I)};
                  ${M}
              }
              ${a}

              output[global_idx] = value;
            }`}},gc=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,uw=e=>`${gc(e)};${e.countIncludePad}`,dw=e=>`${gc(e)};${e.storageOrder};${e.dilations}`,wc=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Mc=(e,r,t,s)=>{let[n,o]=hc(r,s,t),a=Ce("x",r.dataType,r.dims.length),i=a.type.value,l="value += x_val;",c="";n.countIncludePad?c+=`value /= ${i}(uniforms.kernelSize);`:c+=`value /= ${i}(i32(uniforms.kernelSize) - pad);`;let[p,d,u,f,_]=_c(o,n);p.push(...ct(r.dims,o));let v=["rank"];return{name:e,shaderCache:{hint:`${s.cacheKey};${u};${f};${_}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:o,dataType:r.dataType}],dispatchGroup:{x:Math.ceil(we.size(o)/64)},programUniforms:p}),getShaderSource:I=>fc(I,a,r.dims.length,o.length,n,l,c,0,d,u,f,_)}},t0=e=>{let r=e.count_include_pad!==0,t=wc(e);if(t.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let s={countIncludePad:r,...t,cacheKey:""};return{...s,cacheKey:uw(s)}},r0=(e,r)=>{Ro(e.inputs),e.compute(Mc("AveragePool",e.inputs[0],!1,r))},bc={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},s0=e=>{let r=e.format;return{format:r,...bc,cacheKey:r}},n0=(e,r)=>{Ro(e.inputs),e.compute(Mc("GlobalAveragePool",e.inputs[0],!0,r))},yc=(e,r,t,s)=>{let[n,o]=hc(r,s,t),a=`
      value = max(x_val, value);
    `,i="",l=Ce("x",r.dataType,r.dims.length),c=["rank"],[p,d,u,f,_]=_c(o,n);return p.push(...ct(r.dims,o)),{name:e,shaderCache:{hint:`${s.cacheKey};${u};${f};${_}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:r.dataType}],dispatchGroup:{x:Math.ceil(we.size(o)/64)},programUniforms:p}),getShaderSource:v=>fc(v,l,r.dims.length,o.length,n,a,i,r.dataType===10?-65504:-1e5,d,u,f,_)}},o0=(e,r)=>{Ro(e.inputs),e.compute(yc("MaxPool",e.inputs[0],!1,r))},i0=e=>{let r=e.storage_order,t=e.dilations,s=wc(e);if(r!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(s.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:r,dilations:t,...s,cacheKey:""};return{...n,cacheKey:dw(n)}},a0=e=>{let r=e.format;return{format:r,...bc,cacheKey:r}},l0=(e,r)=>{Ro(e.inputs),e.compute(yc("GlobalMaxPool",e.inputs[0],!0,r))}}),pw,mw,c0,u0,iT=Re(()=>{ft(),yt(),lr(),xt(),pw=(e,r)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((t,s)=>t===e[2].dims[s]).reduce((t,s)=>t&&s,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(r.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((n,o)=>o===r.axis||n===e[0].dims[o]).reduce((n,o)=>n&&o,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let t=e[0].dims[r.axis],s=e[1].dims[r.axis];if(r.blockSize<Math.ceil(t/s)||r.blockSize>Math.ceil(t/(s-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},mw=(e,r)=>{let t=we.normalizeAxis(r.axis,e[0].dims.length),s=e[0].dataType,n=s===3,o=e[0].dims,a=e[1].dataType,i=we.size(o),l=s===3||s===2,c=l?[Math.ceil(we.size(e[0].dims)/4)]:e[0].dims,p=e[1].dims,d=e.length>2?e[2]:void 0,u=d?l?[Math.ceil(we.size(d.dims)/4)]:d.dims:void 0,f=p.length===0||p.length===1&&p[0]===1,_=f===!1&&p.length===1,v=ar(i),I=f&&(!l||v===4),M=I?v:1,y=I&&!l?v:1,$=Ce("input",l?12:s,c.length,y),x=Ce("scale",a,p.length),T=d?Ce("zero_point",l?12:s,u.length):void 0,E=it("output",a,o.length,M),b=[$,x];T&&b.push(T);let S=[c,p];d&&S.push(u);let D=[{type:12,data:i/M},{type:12,data:t},{type:12,data:r.blockSize},...ct(...S,o)],O=H=>{let G=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${H.registerUniforms(G).declareVariables(...b,E)}
      ${H.mainStart()}
          ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${E.offsetToIndices("global_idx")};

          // Set input x
          ${l?`
            let input = ${$.getByOffset("global_idx / 4")};
            let x_vec = ${n?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${M===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${$.getByOffset("global_idx")};`};

          // Set scale input
          ${f?`let scale_value= ${x.getByOffset("0")}`:_?`
            let scale_index = ${E.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${x.getByOffset("scale_index")};`:`
            var scale_indices: ${x.type.indices} = output_indices;
            let index = ${x.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${x.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${x.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${T?f?l?`
                let zero_point_input = ${T.getByOffset("0")};
                let zero_point_vec =  ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${T.getByOffset("0")}`:_?l?`
                let zero_point_index = ${E.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${T.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${E.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${T.getByOffset("zero_point_index")};`:l?`
                let zero_point_offset = ${x.indicesToOffset("scale_indices")};
                let zero_point_input = ${T.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${n?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${T.getByIndices("scale_indices")};`:`let zero_point_value = ${l?n?"i32":"u32":$.type.value}(0);`};
      // Compute and write output
      ${E.setByOffset("global_idx",`${E.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:r.cacheKey,inputDependencies:T?["rank","rank","rank"]:["rank","rank"]},getShaderSource:O,getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(i/M/64),y:1,z:1},programUniforms:D})}},c0=(e,r)=>{pw(e.inputs,r),e.compute(mw(e.inputs,r))},u0=e=>Bt({axis:e.axis,blockSize:e.blockSize})}),hw,_w,d0,aT=Re(()=>{Es(),ft(),xt(),hw=(e,r,t)=>{let s=e===r,n=e<r&&t<0,o=e>r&&t>0;if(s||n||o)throw new Error("Range these inputs' contents are invalid.")},_w=(e,r,t,s)=>{let n=Math.abs(Math.ceil((r-e)/t)),o=[n],a=n,i=[{type:12,data:a},{type:s,data:e},{type:s,data:t},...ct(o)],l=c=>{let p=it("output",s,o.length),d=p.type.value,u=[{name:"outputSize",type:"u32"},{name:"start",type:d},{name:"delta",type:d}];return`
        ${c.registerUniforms(u).declareVariables(p)}
        ${c.mainStart()}
        ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${d}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${s}`},getShaderSource:l,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:i})}},d0=e=>{let r=0,t=0,s=0;e.inputs[0].dataType===6?(r=e.inputs[0].getInt32Array()[0],t=e.inputs[1].getInt32Array()[0],s=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(r=e.inputs[0].getFloat32Array()[0],t=e.inputs[1].getFloat32Array()[0],s=e.inputs[2].getFloat32Array()[0]),Xt.webgpu.validateInputContent&&hw(r,t,s),e.compute(_w(r,t,s,e.inputs[0].dataType),{inputs:[]})}}),fw,vc,xc,gw,p0,m0,lT=Re(()=>{ft(),yt(),lr(),xt(),fw=(e,r,t,s)=>{if(e!=="none"&&s!=="i32"&&s!=="u32"&&s!=="f32")throw new Error(`Input ${s} is not supported with reduction ${e}.`);let n=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,o=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${r}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${r}=${t};`;case"add":return s==="i32"||s==="u32"?`atomicAdd(&${r}, bitcast<${s}>(${t}));`:`
              ${n}bitcast<${s}>(oldValue) + (${t})${o}`;case"max":return s==="i32"||s==="u32"?`atomicMax(&${r}, bitcast<${s}>(${t}));`:`
                ${n}max(bitcast<f32>(oldValue), (${t}))${o}`;case"min":return s==="i32"||s==="u32"?`atomicMin(&${r}, bitcast<${s}>(${t}));`:`${n}min(bitcast<${s}>(oldValue), (${t}))${o}`;case"mul":return`${n}(bitcast<${s}>(oldValue) * (${t}))${o}`;default:throw new Error(`Reduction ${e} is not supported.`)}},vc=(e,r)=>`${e===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${r?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${r?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,xc=(e,r,t)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${t?"global_idx":"idx"} + i];
        ${fw(e.reduction,"output[data_offset + i]","value",r)}
      }`,gw=(e,r)=>{let t=e[0].dims,s=e[1].dims,n=t,o=1,a=Math.ceil(we.size(s)/o),i=s[s.length-1],l=we.sizeFromDimension(t,i),c=we.sizeFromDimension(s,0)/i,p=[{type:12,data:a},{type:12,data:i},{type:12,data:l},...ct(e[1].dims,e[2].dims,n)],d=u=>{let f=Ce("indices",e[1].dataType,e[1].dims.length),_=Ce("updates",e[2].dataType,e[2].dims.length,o),v=r.reduction!=="none"&&r.reduction!==""?NM("output",e[0].dataType,n.length):it("output",e[0].dataType,n.length,o);return`
      ${u.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(f,_,v)}
      ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${r.reduction==="none"}) {
    for (var i = 0; i < ${c}; i = i + 1) {
      for (var j = i + 1; j < ${c}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${r.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${c}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${vc(t.length,!1)}
      }
      ${xc(r,v.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${vc(t.length,!0)}
  }
  ${xc(r,v.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${r.cacheKey}_${r.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:d}},p0=e=>Bt({reduction:e.reduction}),m0=(e,r)=>{e.compute(gw(e.inputs,r),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),ww,Mw,bw,Tc,yw,vw,xw,Tw,Ew,Pw,Cw,Sw,Ec,$w,kw,Iw,Aw,Fw,h0,_0,cT=Re(()=>{ft(),yt(),lr(),xt(),ww=(e,r)=>{if(e.every(t=>t>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(r.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(r.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Mw=(e,r,t)=>{r.every(n=>n>=0&&n<t||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let s=new Array(t).fill(1);return r.forEach((n,o)=>s[n]=e[o]),s},bw=(e,r,t,s,n,o)=>{let[a,i,l]=t>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(p=>o.push(p));else if(r.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(i>0&&e.length>i&&e[i].dims.length===1&&e[i].dims[0]>0){if(e[i].getFloat32Array().forEach(p=>s.push(p)),s.length!==0&&s.length!==c&&t>=18&&s.length!==r.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");ww(s,r),r.axes.length>0&&Mw(s,r.axes,c).forEach((p,d)=>s[d]=p)}if(l>0&&e.length>l&&e[l].dims.length===1&&e[l].dims[0]>0&&(e[l].getBigInt64Array().forEach(p=>n.push(Number(p))),n.length!==0&&n.length!==c&&t>=18&&n.length!==r.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(r.axes.length>0){if(s.length!==0&&s.length!==r.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==0&&n.length!==r.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof s<"u"&&typeof n<"u"&&s.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},Tc=(e,r,t,s)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${e}) * (${r});
  let whole = ${s}(big / (${t}));
  let fract = ${s}(big % (${t})) / ${s}(${t});
  return whole + fract;
`,yw=(e,r)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${r} { `+(()=>{switch(e){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${r}(xResized) / ${r}(xScale);
          } else {
            ${Tc("xResized","lengthOriginal","lengthResized",r)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${r}(xResized) + 0.5) / ${r}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${r}(xResized) + 0.5) / ${r}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${Tc("xResized","lengthOriginal - 1","lengthResized - 1",r)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${r}(roiStart) * ${r}(lengthOriginal - 1) +
                        (${r}(xResized) * ${r}(roiEnd - roiStart) * ${r}(lengthOriginal - 1)) /
                        ${r}(lengthResized - 1);
                  } else {
                    return 0.5 * ${r}(roiStart + roiEnd) * ${r}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${r}xScale * ${r}(lengthResized);
                  const adjustment = ${r}(lengthResized) / outputWidth;
                  const center = ${r}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${r}(xResized) + 0.5) / ${r}(xScale)) - 0.5;`;case"half_pixel":return`return ((${r}(xResized) + 0.5) / ${r}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",vw=(e,r,t)=>`fn getNearestPixelFromOriginal(xOriginal: ${t}, isDownSample: bool) -> ${t} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(r<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",xw=(e,r,t)=>{let s=new Array(t).fill(0).concat(new Array(t).fill(1)),n=e.length===0?s:e.slice();return r.length>0?(r.forEach((o,a)=>{s[o]=n[a],s[a+t]=n[r.length+a]}),s):n},Tw=(e,r,t,s)=>{let n=[];if(t.length>0)if(s.length>0){if(e.forEach(o=>n.push(o)),Math.max(...s)>e.length)throw new Error("axes is out of bound");s.forEach((o,a)=>n[o]=t[a])}else t.forEach(o=>n.push(o));else{if(r.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((o,a)=>Math.round(o*r[a]))}return n},Ew=(e,r,t)=>{let s=(()=>{switch(t.keepAspectRatioPolicy){case"not_larger":return t.axes.length>0?Math.min(...t.axes.map(o=>r[o]),Number.MAX_VALUE):Math.min(...r,Number.MAX_VALUE);case"not_smaller":return t.axes.length>0?Math.max(...t.axes.map(o=>r[o]),Number.MIN_VALUE):Math.max(...r,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${t.keepAspectRatioPolicy} is not supported`)}})();r.fill(1,0,r.length);let n=e.slice();return t.axes.length>0?(t.axes.forEach(o=>r[o]=s),t.axes.forEach(o=>n[o]=Math.round(e[o]*r[o]))):(r.fill(s,0,r.length),n.forEach((o,a)=>n[a]=Math.round(o*r[a]))),n},Pw=(e,r,t,s,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${t.length}> {
      var original_indices: array<${e.type.value}, ${t.length}>;
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${at("uniforms.scales","i",s)};
        var roi_low = ${at("uniforms.roi","i",n)};
        var roi_hi = ${at("uniforms.roi",`i + ${r.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${at("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${at("uniforms.output_shape","i",t.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Cw=(e,r,t,s,n,o,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${r.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${s.length}; i++) {
        var output_index = ${r.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${at("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${at("uniforms.roi","i",o)};
          var roi_hi = ${at("uniforms.roi",`i + ${t.length}`,o)};
          var input_shape_i = ${at("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${at("uniforms.output_shape","i",s.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${r.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${r.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,Sw=(e,r)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${at("uniforms.input_shape","i",r.length)}) {
          return false;
        }
      }
      return true;
    }`,Ec=(e,r,t,s)=>e.rank>s?`
    ${e.indicesSet("input_indices",r,"channel")};
    ${e.indicesSet("input_indices",t,"batch")};
`:"",$w=(e,r,t,s,n)=>{let[o,a,i,l]=t.length===2?[-1,0,1,-1]:[0,2,3,1],c=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${c} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${t[i]} - 1))`)};
      ${Ec(e,l,o,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${r.type.indices}) -> ${c} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${c} = originalIndices[${a}];
      var col:${c} = originalIndices[${i}];
      ${s?`if (row < 0 || row > (${t[a]} - 1) || col < 0 || col > (${t[i]} - 1)) {
        return ${n};
      }`:""};
      row = max(0, min(row, ${t[a]} - 1));
      col = max(0, min(col, ${t[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${t.length>2?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${t.length>2?`u32(originalIndices[${o}])`:"0"};
      var x11: ${c} = getInputValue(batch, channel, row1, col1);
      var x12: ${c} = getInputValue(batch, channel, row1, col2);
      var x21: ${c} = getInputValue(batch, channel, row2, col1);
      var x22: ${c} = getInputValue(batch, channel, row2, col2);
      var dx1: ${c} = abs(row - ${c}(row1));
      var dx2: ${c} = abs(${c}(row2) - row);
      var dy1: ${c} = abs(col - ${c}(col1));
      var dy2: ${c} = abs(${c}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},kw=(e,r,t,s,n,o,a,i,l,c)=>{let p=t.length===2,[d,u]=p?[0,1]:[2,3],f=e.type.value,_=v=>{let I=v===d?"row":"col";return`
      fn ${I}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${r.type.indices}) -> ${f} {
        var output_index = ${r.indicesGet("output_indices",v)};
        var originalIdx: ${f} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[v]},
        ${s[v]}, ${t[v]}, ${o[v]}, ${o[v]} + ${t.length});
        var fractOriginalIdx: ${f} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${i} && (originalIdx < 0 || originalIdx > (${t[v]} - 1))) {
          return ${l};
        }
        var data: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${I}: ${f} = originalIdx + ${f}(i);
          if (${I} < 0 || ${I} >= ${t[v]}) {
            ${c?`coefs[i + 1] = 0.0;
                        continue;`:i?`return ${l};`:`${I} = max(0, min(${I}, ${t[v]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",v,`u32(${I})`)};
          data[i + 1] = ${v===d?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${_(d)};
    ${_(u)};
  fn getCubicInterpolationCoefs(s: ${f}) -> array<${f}, 4> {
    var absS = abs(s);
    var coeffs: array<${f}, 4> = array<${f}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${f} = 1.0 - absS;
    var twoMinusAbsS: ${f} = 2.0 - absS;
    var onePlusAbsS: ${f} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${f}, 4>, coefs: array<${f}, 4>) -> ${f} {
    var coefsSum: ${f} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${r.type.indices}) -> ${f} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},Iw=(e,r,t,s,n)=>{let[o,a,i,l,c]=t.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],p=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${p} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(height, ${t[i]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(width, ${t[l]} - 1))`)};
      ${Ec(e,c,o,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${r.type.indices}) -> ${p} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${p} = originalIndices[${a}];
      var height:${p} = originalIndices[${i}];
      var width:${p} = originalIndices[${l}];
      ${s?`if (depth < 0 || depth > (${t[a]} - 1) || height < 0 || height > (${t[i]} - 1) || width < 0 || (width > ${t[l]} - 1)) {
      return ${n};
        }`:""};

    depth = max(0, min(depth, ${t[a]} - 1));
      height = max(0, min(height, ${t[i]} - 1));
      width = max(0, min(width, ${t[l]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${t.length>3?`u32(originalIndices[${c}])`:"0"};
      var batch: u32 =  ${t.length>3?`u32(originalIndices[${o}])`:"0"};

      var x111: ${p} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${p} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${p} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${p} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${p} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${p} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${p} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${p} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${p} = abs(depth - ${p}(depth1));
      var dx2: ${p} = abs(${p}(depth2) - depth);
      var dy1: ${p} = abs(height - ${p}(height1));
      var dy2: ${p} = abs(${p}(height2) - height);
      var dz1: ${p} = abs(width - ${p}(width1));
      var dz2: ${p} = abs(${p}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Aw=(e,r,t,s,n,o)=>{let a=e.dims,i=xw(o,r.axes,a.length),l=Tw(a,s,n,r.axes),c=s.slice();s.length===0&&(c=a.map((y,$)=>y===0?1:l[$]/y),r.keepAspectRatioPolicy!=="stretch"&&(l=Ew(a,c,r)));let p=it("output",e.dataType,l.length),d=Ce("input",e.dataType,a.length),u=we.size(l),f=a.length===l.length&&a.every((y,$)=>y===l[$]),_=r.coordinateTransformMode==="tf_crop_and_resize",v=r.extrapolationValue,I=d.type.value,M=y=>`
      ${f?"":`
      ${yw(r.coordinateTransformMode,I)};
      ${(()=>{switch(r.mode){case"nearest":return`
              ${Sw(d,a)};
              ${vw(r.nearestMode,t,I)};
              ${Cw(d,p,a,l,c.length,i.length,_)};
              `;case"linear":return`
              ${Pw(p,a,l,c.length,i.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${$w(d,p,a,_,v)}`;if(a.length===3||a.length===5)return`${Iw(d,p,a,_,v)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${kw(d,p,a,l,c,i,r.cubicCoeffA,_,r.extrapolationValue,r.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${y.registerUniform("output_size","u32").registerUniform("scales","f32",c.length).registerUniform("roi","f32",i.length).declareVariables(d,p)}
      ${y.mainStart()}
        ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${f?"output[global_idx] = input[global_idx];":`
        let output_indices = ${p.offsetToIndices("global_idx")};
        var input_indices: ${d.type.indices};
        ${(()=>{switch(r.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${d.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${r.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${r.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${r.cacheKey}|${t}|${c.length>0?r.mode==="cubic"?c:c.length:""}|${n.length>0?n:""}|${i.length>0?i:""}|${f}|${r.mode==="nearest"?a.length:a}`,inputDependencies:["rank"]},getShaderSource:M,getRunData:()=>({outputs:[{dims:l,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:[{type:12,data:u},{type:1,data:c},{type:1,data:i},...ct(a,l)]})}},Fw=e=>{let r=e.customDataBuffer;return new Uint32Array(r,r.byteOffset,1)[0]},h0=(e,r)=>{let t=[],s=[],n=[],o=Fw(e);if(r.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");bw(e.inputs,r,o,t,s,n),e.compute(Aw(e.inputs[0],r,o,t,s,n),{inputs:[0]})},_0=e=>{let r=e.antialias,t=e.axes,s=e.coordinateTransformMode,n=e.cubicCoeffA,o=e.excludeOutside!==0,a=e.extrapolationValue,i=e.keepAspectRatioPolicy,l=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return Bt({antialias:r,axes:t,coordinateTransformMode:s,cubicCoeffA:n,excludeOutside:o,extrapolationValue:a,keepAspectRatioPolicy:i,mode:l,nearestMode:c})}}),Ow,Dw,f0,uT=Re(()=>{ft(),yt(),xt(),Ow=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let r=e[0],t=e[1],s=e[2];if(r.dataType!==t.dataType||r.dataType!==s.dataType)throw new Error("All inputs must have the same data type");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Input must be 2D or 3D");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=r.dims[r.dims.length-1],o=r.dims[r.dims.length-2];if(t.dims[t.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(t.dims[t.dims.length-2]!==o)throw new Error("Skip must have the same sequence length as input");if(s.dims.length!==1)throw new Error("Gamma must be 1D");if(s.dims[s.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Dw=(e,r,t,s)=>{let n=r.simplified,o=e[0].dims,a=we.size(o),i=o,l=a,c=o.slice(-1)[0],p=s?o.slice(0,-1).concat(1):[],d=!n&&e.length>3,u=e.length>4,f=s&&t>1,_=s&&t>2,v=t>3,I=64,M=ar(c),y=[{type:12,data:l},{type:12,data:M},{type:12,data:c},{type:1,data:r.epsilon}],$=T=>{let E=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],b=[Ce("x",e[0].dataType,e[0].dims,M),Ce("skip",e[1].dataType,e[1].dims,M),Ce("gamma",e[2].dataType,e[2].dims,M)];d&&b.push(Ce("beta",e[3].dataType,e[3].dims,M)),u&&b.push(Ce("bias",e[4].dataType,e[4].dims,M)),b.push(it("output",e[0].dataType,i,M)),f&&b.push(it("mean_output",1,p)),_&&b.push(it("inv_std_output",1,p)),v&&b.push(it("input_skip_bias_sum",e[0].dataType,i,M));let S=kr(e[0].dataType),D=kr(1,M);return`

      ${T.registerUniforms(E).declareVariables(...b)}
      var<workgroup> sum_shared : array<${D}, ${I}>;
      var<workgroup> sum_squared_shared : array<${D}, ${I}>;

      ${T.mainStart([I,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${I};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${I};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${I-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${u?"bias[offset1d + i]":S+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${v?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Zn(S,M,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${I};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${tn("sum",M)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${tn("square_sum",M)} / f32(uniforms.hidden_size) ${n?"":"- mean * mean"} + uniforms.epsilon);
        ${f?"mean_output[global_idx] = mean;":""}
        ${_?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${n?"":`- ${S}(mean)`}) *
            ${S}(inv_std_dev) * gamma[offset1d + i]
            ${d?"+ beta[offset1d + i]":""};
        }
      }`},x=[{dims:i,dataType:e[0].dataType}];return t>1&&x.push({dims:p,dataType:1}),t>2&&x.push({dims:p,dataType:1}),t>3&&x.push({dims:o,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${M};${f};${_};${v}`,inputDependencies:e.map((T,E)=>"type")},getShaderSource:$,getRunData:()=>({outputs:x,dispatchGroup:{x:Math.ceil(l/c)},programUniforms:y})}},f0=(e,r)=>{Ow(e.inputs);let t=[0];e.outputCount>1&&t.push(-3),e.outputCount>2&&t.push(-3),e.outputCount>3&&t.push(3),e.compute(Dw(e.inputs,r,e.outputCount,!1),{outputs:t})}}),Lw,jo,zw,Pc,Bw,Rw,g0,w0,dT=Re(()=>{ft(),yt(),lr(),xt(),Lw=(e,r)=>{if(!e||e.length<1)throw new Error("too few inputs");if(r.axes.length!==0){if(r.axes.length!==r.starts.length||r.axes.length!==r.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(r.starts.length!==r.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((t,s)=>{if(e[s+1].dataType!==6&&e[s+1].dataType!==7)throw new Error(`Input ${s} must be an array of int32 or int64`)})},jo=(e,r)=>{let t=[];if(e.length>r)if(e[r].dataType===7)e[r].getBigInt64Array().forEach(s=>t.push(Number(s)));else if(e[r].dataType===6)e[r].getInt32Array().forEach(s=>t.push(Number(s)));else throw new Error(`Input ${r} must be an array of int32 or int64`);return t},zw=(e,r)=>{if(e.length>1){let t=jo(e,1),s=jo(e,2),n=jo(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),Bt({starts:t,ends:s,axes:n})}else return r},Pc=(e,r,t,s,n)=>{let o=e;return e<0&&(o+=t[s[r]]),n[r]<0?Math.max(0,Math.min(o,t[s[r]]-1)):Math.max(0,Math.min(o,t[s[r]]))},Bw=(e,r,t)=>`fn calculateInputIndices(output_indices: ${r.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${t.length}; i >= 0; i--) {
            let input_shape_i = ${at("uniforms.input_shape","i",t.length)};
            let steps_i = ${at("uniforms.steps","i",t.length)};
            let signs_i = ${at("uniforms.signs","i",t.length)};
            let starts_i = ${at("uniforms.starts","i",t.length)};
            var output_index = ${r.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Rw=(e,r)=>{let t=e[0].dims,s=we.size(t),n=r.axes.length>0?we.normalizeAxes(r.axes,t.length):[...Array(t.length).keys()],o=jo(e,4);o.forEach(M=>M!==0||(()=>{throw new Error("step cannot be 0")})),o.length===0&&(o=Array(n.length).fill(1));let a=r.starts.map((M,y)=>Pc(M,y,t,n,o)),i=r.ends.map((M,y)=>Pc(M,y,t,n,o));if(n.length!==a.length||n.length!==i.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==t.length)for(let M=0;M<t.length;++M)n.includes(M)||(a.splice(M,0,0),i.splice(M,0,t[M]),o.splice(M,0,1));let l=o.map(M=>Math.sign(M));o.forEach((M,y,$)=>{if(M<0){let x=(i[y]-a[y])/M,T=a[y],E=T+x*o[y];a[y]=E,i[y]=T,$[y]=-M}});let c=t.slice(0);n.forEach((M,y)=>{c[M]=Math.ceil((i[M]-a[M])/o[M])});let p={dims:c,dataType:e[0].dataType},d=it("output",e[0].dataType,c.length),u=Ce("input",e[0].dataType,e[0].dims.length),f=we.size(c),_=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:o.length}],v=[{type:12,data:f},{type:12,data:a},{type:6,data:l},{type:12,data:o},...ct(e[0].dims,c)],I=M=>`
      ${M.registerUniforms(_).declareVariables(u,d)}
        ${Bw(u,d,t)}
        ${M.mainStart()}
          ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${d.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${l.length}_${a.length}_${o.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[p],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:v})}},g0=(e,r)=>{Lw(e.inputs,r);let t=zw(e.inputs,r);e.compute(Rw(e.inputs,t),{inputs:[0]})},w0=e=>{let r=e.starts,t=e.ends,s=e.axes;return Bt({starts:r,ends:t,axes:s})}}),jw,Nw,M0,b0,pT=Re(()=>{ft(),yt(),lr(),rn(),xt(),jw=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Nw=(e,r)=>{let t=e.inputs[0],s=t.dims,n=we.size(s),o=s.length,a=we.normalizeAxis(r.axis,o),i=a<s.length-1,l,c=[];i?(c=Array.from({length:o},(b,S)=>S),c[a]=o-1,c[o-1]=a,l=e.compute(rs(t,c),{inputs:[t],outputs:[-1]})[0]):l=t;let p=l.dims,d=p[o-1],u=n/d,f=ar(d),_=d/f,v=64;u===1&&(v=256);let I=(b,S)=>S===4?`max(max(${b}.x, ${b}.y), max(${b}.z, ${b}.w))`:S===2?`max(${b}.x, ${b}.y)`:S===3?`max(max(${b}.x, ${b}.y), ${b}.z)`:b,M=Ce("x",l.dataType,l.dims,f),y=it("result",l.dataType,l.dims,f),$=M.type.value,x=kr(l.dataType)==="f32"?`var threadMax = ${$}(-3.402823e+38f);`:`var threadMax = ${$}(-65504.0h);`,T=b=>`
      var<workgroup> rowMaxShared : ${$};
      var<workgroup> rowSumShared : ${$};
      var<workgroup> threadShared : array<${$}, ${v}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${$} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${$}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${b.registerUniform("packedCols","i32").declareVariables(M,y)}
      ${b.mainStart(v)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${v};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${x}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${$}(${I("threadShared[0]",f)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${$}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${$}(${tn("threadShared[0]",f)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,E=e.compute({name:"Softmax",shaderCache:{hint:`${f};${v}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:p,dataType:l.dataType}],dispatchGroup:{x:u},programUniforms:[{type:6,data:_}]}),getShaderSource:T},{inputs:[l],outputs:[i?-1:0]})[0];i&&e.compute(rs(E,c),{inputs:[E]})},M0=(e,r)=>{jw(e.inputs),Nw(e,r)},b0=e=>Bt({axis:e.axis})}),Cc,Vw,Uw,Ww,y0,mT=Re(()=>{ft(),yt(),xt(),Cc=e=>Array.from(e.getBigInt64Array(),Number),Vw=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Cc(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Uw=(e,r)=>{let t=[];for(let s=0;s<e.length;++s)t.push(e[s]*r[s]);return t},Ww=(e,r)=>{let t=e[0].dims,s=r??Cc(e[1]),n=Uw(t,s),o=we.size(n),a=e[0].dataType,i=Ce("input",a,t.length),l=it("output",a,n.length),c=p=>`
      const inputShape = ${i.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(i,l)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${i.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${i.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${i.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",i.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${s}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},...ct(e[0].dims,n)]}),getShaderSource:c}},y0=e=>{Vw(e.inputs),e.compute(Ww(e.inputs),{inputs:[0]})}}),Gw,Kw,v0,hT=Re(()=>{ft(),yt(),xt(),Gw=(e,r,t,s,n)=>{let o=it("output_data",n,t.length,4),a=Ce("a_data",r[1].dataType,r[1].dims.length,4),i=Ce("b_data",r[2].dataType,r[2].dims.length,4),l=Ce("c_data",r[0].dataType,r[0].dims.length,4),c,p=(d,u,f)=>`select(${u}, ${d}, ${f})`;if(!s)c=o.setByOffset("global_idx",p(a.getByOffset("global_idx"),i.getByOffset("global_idx"),l.getByOffset("global_idx")));else{let d=(u,f,_="")=>{let v=`a_data[index_a${f}][component_a${f}]`,I=`b_data[index_b${f}][component_b${f}]`,M=`bool(c_data[index_c${f}] & (0xffu << (component_c${f} * 8)))`;return`
            let output_indices${f} = ${o.offsetToIndices(`global_idx * 4u + ${f}u`)};
            let offset_a${f} = ${a.broadcastedIndicesToOffset(`output_indices${f}`,o)};
            let offset_b${f} = ${i.broadcastedIndicesToOffset(`output_indices${f}`,o)};
            let offset_c${f} = ${l.broadcastedIndicesToOffset(`output_indices${f}`,o)};
            let index_a${f} = offset_a${f} / 4u;
            let index_b${f} = offset_b${f} / 4u;
            let index_c${f} = offset_c${f} / 4u;
            let component_a${f} = offset_a${f} % 4u;
            let component_b${f} = offset_b${f} % 4u;
            let component_c${f} = offset_c${f} % 4u;
            ${u}[${f}] = ${_}(${p(v,I,M)});
          `};n===9?c=`
            var data = vec4<u32>(0);
            ${d("data",0,"u32")}
            ${d("data",1,"u32")}
            ${d("data",2,"u32")}
            ${d("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:c=`
            ${d("output_data[global_idx]",0)}
            ${d("output_data[global_idx]",1)}
            ${d("output_data[global_idx]",2)}
            ${d("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(l,a,i,o)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${c}
      }`},Kw=e=>{let r=e[1].dims,t=e[2].dims,s=e[0].dims,n=e[1].dataType,o=!(we.areEqual(r,t)&&we.areEqual(t,s)),a=r,i=we.size(r);if(o){let c=eo.calcShape(eo.calcShape(r,t,!1),s,!1);if(!c)throw new Error("Can't perform where op on the given tensors");a=c,i=we.size(a)}let l=Math.ceil(i/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:c=>Gw(c,e,a,o,n),getRunData:()=>({outputs:[{dims:a,dataType:n}],dispatchGroup:{x:Math.ceil(i/64/4)},programUniforms:[{type:12,data:l},...ct(s,r,t,a)]})}},v0=e=>{e.compute(Kw(e.inputs))}}),x0,_T=Re(()=>{$x(),mu(),kx(),Ix(),Ax(),Fx(),Ox(),Rx(),Nx(),Vx(),Ux(),Wx(),Gx(),Kx(),Hx(),qx(),Qx(),Xx(),Jx(),Yx(),Zx(),eT(),tT(),rT(),sT(),Vy(),nT(),oT(),iT(),aT(),lT(),pu(),cT(),Hy(),uT(),dT(),pT(),Gy(),mT(),rn(),hu(),hT(),x0=new Map([["Abs",[fb]],["Acos",[gb]],["Acosh",[wb]],["Add",[Yb]],["ArgMax",[pb,Nc]],["ArgMin",[db,Nc]],["Asin",[Mb]],["Asinh",[bb]],["Atan",[yb]],["Atanh",[vb]],["Attention",[mb]],["AveragePool",[r0,t0]],["BatchNormalization",[hb]],["BiasAdd",[_b]],["BiasSplitGelu",[Jb]],["Cast",[Tb,xb]],["Ceil",[Pb]],["Clip",[Eb]],["Concat",[ly,cy]],["Conv",[Hc,Kc]],["ConvTranspose",[My,wy]],["Cos",[Cb]],["Cosh",[Sb]],["CumSum",[by,yy]],["DepthToSpace",[vy,xy]],["DequantizeLinear",[c0,u0]],["Div",[Zb]],["Einsum",[Ty,Ey]],["Elu",[$b,Go]],["Equal",[ey]],["Erf",[kb]],["Exp",[Ib]],["Expand",[Py]],["FastGelu",[Cy]],["Floor",[Ab]],["FusedConv",[Hc,Kc]],["Gather",[$y,Sy]],["GatherElements",[Dy,Oy]],["GatherBlockQuantized",[Ay,Fy]],["GatherND",[ky,Iy]],["Gelu",[Fb]],["Gemm",[zy,Ly]],["GlobalAveragePool",[n0,s0]],["GlobalMaxPool",[l0,a0]],["Greater",[ny]],["GreaterOrEqual",[iy]],["GridSample",[By,Ry]],["GroupQueryAttention",[qy]],["HardSigmoid",[Nb,jb]],["InstanceNormalization",[Qy]],["LayerNormalization",[Xy]],["LeakyRelu",[Ob,Go]],["Less",[oy]],["LessOrEqual",[ay]],["Log",[Qb]],["MatMul",[Jy]],["MatMulNBits",[Yy,Zy]],["MaxPool",[o0,i0]],["Mul",[ty]],["MultiHeadAttention",[Ny,jy]],["Neg",[Lb]],["Not",[Db]],["Pad",[e0]],["Pow",[ry]],["QuickGelu",[Xb,Go]],["Range",[d0]],["Reciprocal",[zb]],["ReduceMin",[ib]],["ReduceMean",[tb]],["ReduceMax",[ob]],["ReduceSum",[lb]],["ReduceProd",[ab]],["ReduceL1",[rb]],["ReduceL2",[sb]],["ReduceLogSum",[ub]],["ReduceLogSumExp",[nb]],["ReduceSumSquare",[cb]],["Relu",[Bb]],["Resize",[h0,_0]],["RotaryEmbedding",[Ky]],["ScatterND",[m0,p0]],["Sigmoid",[Rb]],["Sin",[Vb]],["Sinh",[Ub]],["Slice",[g0,w0]],["SkipLayerNormalization",[f0]],["Split",[Uy,Wy]],["Sqrt",[Wb]],["Softmax",[M0,b0]],["Sub",[sy]],["Tan",[Gb]],["Tanh",[Kb]],["ThresholdedRelu",[qb,Go]],["Tile",[y0]],["Transpose",[UM,WM]],["Where",[v0]]])}),T0,fT=Re(()=>{Es(),Vs(),xt(),T0=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,r){this.repo.set(e,r)}run(e,r,t,s,n){Ts(e.programInfo.name);let o=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let i=[];for(let c of r)i.push({binding:i.length,resource:{buffer:c.buffer}});for(let c of t)i.push({binding:i.length,resource:{buffer:c.buffer}});n&&i.push({binding:i.length,resource:n});let l=o.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:i,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let c={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:s};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(c)}a.setPipeline(e.computePipeline),a.setBindGroup(0,l),a.dispatchWorkgroups(...s),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),cs(e.programInfo.name)}dispose(){}build(e,r){Ts(e.name);let t=this.backend.device,s=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(c=>{t.features.has(c.feature)&&s.push(`enable ${c.extension};`)});let n=VM(r,this.backend.device.limits),o=e.getShaderSource(n),a=`${s.join(`
`)}
${n.additionalImplementations}
${o}`,i=t.createShaderModule({code:a,label:e.name});Ft("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let l=t.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:e.name});return cs(e.name),{programInfo:e,computePipeline:l,uniformVariablesInfo:n.variablesInfo}}normalizeDispatchGroupSize(e){let r=typeof e=="number"?e:e.x,t=typeof e=="number"?1:e.y||1,s=typeof e=="number"?1:e.z||1,n=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=n&&t<=n&&s<=n)return[r,t,s];let o=r*t*s,a=Math.ceil(Math.sqrt(o));if(a>n){if(a=Math.ceil(Math.cbrt(o)),a>n)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),E0={};ro(E0,{WebGpuBackend:()=>P0});var Hw,qw,Qw,P0,gT=Re(()=>{Es(),ft(),Vs(),zM(),Cx(),_T(),fT(),Hw=(e,r)=>{if(r.length!==e.length)throw new Error(`inputDependencies length ${r.length} is not equal to inputTensors length ${e.length}.`);let t=[];for(let s=0;s<e.length;++s){let n=e[s].dataType;switch(r[s]){case"none":{t.push("");break}case"type":{t.push(`${n}`);break}case"rank":{let o=e[s].dims.length;t.push(`${n};${o}`);break}case"dims":{let o=e[s].dims.join(",");t.push(`${n};${o}`);break}default:throw new Error(`unsupported input dependency: ${r[s]}`)}}return t.join("|")},qw=(e,r,t)=>{let s=e.name;return e.shaderCache?.hint&&(s+="["+e.shaderCache.hint+"]"),s+=":"+t+`:${Hw(r,e.shaderCache?.inputDependencies??new Array(r.length).fill("dims"))}`,s},Qw=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},P0=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,r){this.env=e;let t=[],s={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:t},n=o=>r.features.has(o)&&t.push(o)&&!0;n("chromium-experimental-timestamp-query-inside-passes")||n("timestamp-query"),n("shader-f16"),n("subgroups"),this.device=await r.requestDevice(s),this.adapterInfo=new Qw(r.info||await r.requestAdapterInfo()),this.gpuDataManager=jM(this),this.programManager=new T0(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,lu(e.logLevel,!!e.debug),this.device.onuncapturederror=o=>{o.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${o.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Ts(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(e.getMappedRange()),t=this.pendingQueries.get(e);for(let s=0;s<r.length/2;s++){let n=t[s],o=n.kernelId,a=this.kernels.get(o),i=a.kernelType,l=a.kernelName,c=n.programName,p=n.inputTensorViews,d=n.outputTensorViews,u=r[s*2],f=r[s*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=u);let _=Number(u-this.queryTimeBase),v=Number(f-this.queryTimeBase);if(!Number.isSafeInteger(_)||!Number.isSafeInteger(v))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:p.map(I=>({dims:I.dims,dataType:Ns(I.dataType)})),outputsMetadata:d.map(I=>({dims:I.dims,dataType:Ns(I.dataType)})),kernelId:o,kernelType:i,kernelName:l,programName:c,startTime:_,endTime:v});else{let I="";p.forEach((y,$)=>{I+=`input[${$}]: [${y.dims}] | ${Ns(y.dataType)}, `});let M="";d.forEach((y,$)=>{M+=`output[${$}]: [${y.dims}] | ${Ns(y.dataType)}, `}),console.log(`[profiling] kernel "${o}|${i}|${l}|${c}" ${I}${M}execution time: ${v-_} ns`)}Qo("GPU",`${c}::${u}::${f}`)}e.unmap(),this.pendingQueries.delete(e)}),cs()}run(e,r,t,s,n,o){Ts(e.name);let a=[];for(let y=0;y<r.length;++y){let $=r[y].data;if($===0)continue;let x=this.gpuDataManager.get($);if(!x)throw new Error(`no GPU data for input: ${$}`);a.push(x)}let{outputs:i,dispatchGroup:l,programUniforms:c}=e.getRunData(r),p=t.length===0?i.map((y,$)=>$):t;if(p.length!==i.length)throw new Error(`Output size ${p.length} must be equal to ${i.length}.`);let d=[],u=[];for(let y=0;y<i.length;++y){if(!Number.isInteger(p[y])||p[y]<-3||p[y]>=o)throw new Error(`Invalid output index: ${p[y]}`);if(p[y]===-3)continue;let $=p[y]===-1,x=p[y]===-2,T=$||x?n(i[y].dataType,i[y].dims):s(p[y],i[y].dataType,i[y].dims);if(d.push(T),T.data===0)continue;let E=this.gpuDataManager.get(T.data);if(!E)throw new Error(`no GPU data for output: ${T.data}`);if($&&this.temporaryData.push(E),x){let b=this.kernelPersistentData.get(this.currentKernelId);b||(b=[],this.kernelPersistentData.set(this.currentKernelId,b)),b.push(E)}u.push(E)}if(a.length!==r.length||u.length!==d.length){if(u.length===0)return cs(e.name),d;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let f;if(c){let y=0,$=[];c.forEach(b=>{let S=typeof b.data=="number"?[b.data]:b.data;if(S.length===0)return;let D=b.type===10?2:4,O,H;b.type===10?(H=S.length>4?16:S.length>2?8:S.length*D,O=S.length>4?16:D*S.length):(H=S.length<=2?S.length*D:16,O=16),y=Math.ceil(y/H)*H,$.push(y);let G=b.type===10?8:4;y+=S.length>4?Math.ceil(S.length/G)*O:S.length*D});let x=16;y=Math.ceil(y/x)*x;let T=new ArrayBuffer(y);c.forEach((b,S)=>{let D=$[S],O=typeof b.data=="number"?[b.data]:b.data;if(b.type===6)new Int32Array(T,D,O.length).set(O);else if(b.type===12)new Uint32Array(T,D,O.length).set(O);else if(b.type===10)new Uint16Array(T,D,O.length).set(O);else if(b.type===1)new Float32Array(T,D,O.length).set(O);else throw new Error(`Unsupported uniform type: ${Ns(b.type)}`)});let E=this.gpuDataManager.create(y,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(E.buffer,0,T,0,y),this.gpuDataManager.release(E.id),f={offset:0,size:y,buffer:E.buffer}}let _=this.programManager.normalizeDispatchGroupSize(l),v=_[1]===1&&_[2]===1,I=qw(e,r,v),M=this.programManager.getArtifact(I);if(M||(M=this.programManager.build(e,_),this.programManager.setArtifact(I,M),Ft("info",()=>`[artifact] key: ${I}, programName: ${e.name}`)),c&&M.uniformVariablesInfo){if(c.length!==M.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${M.uniformVariablesInfo.length}, got ${c.length} in program "${M.programInfo.name}".`);for(let y=0;y<c.length;y++){let $=c[y],x=$.type,T=typeof $.data=="number"?1:$.data.length,[E,b]=M.uniformVariablesInfo[y];if(x!==E||T!==b)throw new Error(`Uniform variable ${y} mismatch: expect type ${E} with size ${b}, got type ${x} with size ${T} in program "${M.programInfo.name}".`)}}if(Ft("info",()=>`[ProgramManager] run "${e.name}" (key=${I}) with ${_[0]}x${_[1]}x${_[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let y={kernelId:this.currentKernelId,programName:M.programInfo.name,inputTensorViews:r,outputTensorViews:d};this.pendingKernels.push(y),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(y)}return this.programManager.run(M,a,u,_,f),cs(e.name),d}upload(e,r){this.gpuDataManager.upload(e,r)}memcpy(e,r){this.gpuDataManager.memcpy(e,r)}async download(e,r){await this.gpuDataManager.download(e,r)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,r,t,s){let n=x0.get(e);if(!n)throw new Error(`kernel not implemented: ${e}`);let o={kernelType:e,kernelName:s,kernelEntry:n[0],attributes:[n[1],t]};this.kernels.set(r,o)}releaseKernel(e){let r=this.kernelPersistentData.get(e);if(r){for(let t of r)this.gpuDataManager.release(t.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,r,t){let s=this.kernels.get(e);if(!s)throw new Error(`kernel not created: ${e}`);let n=s.kernelType,o=s.kernelName,a=s.kernelEntry,i=s.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${n}] ${o}" is not allowed to be called recursively`);this.currentKernelId=e,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Ft("info",()=>`[WebGPU] Start to run kernel "[${n}] ${o}"...`);let l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),a(r,i[1]),0}catch(c){return t.push(Promise.resolve(`[WebGPU] Kernel "[${n}] ${o}" failed. ${c}`)),1}finally{l&&t.push(this.device.popErrorScope().then(c=>c?`GPU validation error for kernel "[${n}] ${o}": ${c.message}`:null));for(let c of this.temporaryData)this.gpuDataManager.release(c.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,r,t,s){let n=this.sessionExternalDataMapping.get(e);n||(n=new Map,this.sessionExternalDataMapping.set(e,n));let o=n.get(r),a=this.gpuDataManager.registerExternalBuffer(t,s,o);return n.set(r,[a,t]),a}unregisterBuffers(e){let r=this.sessionExternalDataMapping.get(e);r&&(r.forEach(t=>this.gpuDataManager.unregisterExternalBuffer(t[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let r=this.gpuDataManager.get(e);if(!r)throw new Error(`no GPU data for buffer: ${e}`);return r.buffer}createDownloader(e,r,t){return async()=>{let s=await Bc(this,e,r);return cu(s.buffer,t)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ft("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ft("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ft("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),t=e.length;this.pendingKernels=[];for(let s=0;s<t;s++){let n=this.getComputePassEncoder(),o=e[s];this.writeTimestamp(this.pendingDispatchNumber*2),n.setPipeline(o.computePipeline),n.setBindGroup(0,o.bindGroup),n.dispatchWorkgroups(...o.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(r[s]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),C0={};ro(C0,{init:()=>S0});var Xi,Xw,S0,wT=Re(()=>{ft(),Vs(),yt(),Px(),Xi=class $0{constructor(r,t,s,n){this.module=r,this.dataType=t,this.data=s,this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let r=we.size(this.dims);return r===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,r)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let r=we.size(this.dims);return r===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,r)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let r=we.size(this.dims);return r===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,r)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let r=we.size(this.dims);return r===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,r)}reshape(r){if(we.size(r)!==we.size(this.dims))throw new Error("Invalid new shape");return new $0(this.module,this.dataType,this.data,r)}},Xw=class{constructor(e,r,t){this.module=e,this.backend=r,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=r.adapterInfo;let s=e.PTR_SIZE,n=t/e.PTR_SIZE,o=s===4?"i32":"i64";this.opKernelContext=Number(e.getValue(s*n++,o));let a=Number(e.getValue(s*n++,o));this.outputCount=Number(e.getValue(s*n++,o)),this.customDataOffset=Number(e.getValue(s*n++,"*")),this.customDataSize=Number(e.getValue(s*n++,o));let i=[];for(let l=0;l<a;l++){let c=Number(e.getValue(s*n++,o)),p=Number(e.getValue(s*n++,"*")),d=Number(e.getValue(s*n++,o)),u=[];for(let f=0;f<d;f++)u.push(Number(e.getValue(s*n++,o)));i.push(new Xi(e,c,p,u))}this.inputs=i}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,r){let t=r?.inputs?.map(a=>typeof a=="number"?this.inputs[a]:a)??this.inputs,s=r?.outputs??[],n=(a,i,l)=>new Xi(this.module,i,this.output(a,l),l),o=(a,i)=>{let l=vn(a,i);if(!l)throw new Error(`Unsupported data type: ${a}`);let c=l>0?this.backend.gpuDataManager.create(l).id:0;return new Xi(this.module,a,c,i)};return this.backend.run(e,t,s,n,o,this.outputCount)}output(e,r){let t=this.module.stackSave();try{let s=this.module.PTR_SIZE,n=s===4?"i32":"i64",o=this.module.stackAlloc((1+r.length)*s);this.module.setValue(o,r.length,n);for(let a=0;a<r.length;a++)this.module.setValue(o+s*(a+1),r[a],n);return this.module._JsepOutput(this.opKernelContext,e,o)}catch(s){throw new Error(`Failed to generate kernel's output[${e}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${s}`)}finally{this.module.stackRestore(t)}}},S0=async(e,r,t,s)=>{let n=r.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let o=(gT(),qo(E0)).WebGpuBackend,a=new o;await a.initialize(t,s),n("webgpu",[a,i=>a.alloc(Number(i)),i=>a.free(i),(i,l,c,p=!1)=>{if(p)Ft("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(i)}, dst=${Number(l)}, size=${Number(c)}`),a.memcpy(Number(i),Number(l));else{Ft("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(i)}, gpuDataId=${Number(l)}, size=${Number(c)}`);let d=r.HEAPU8.subarray(Number(i>>>0),Number(i>>>0)+Number(c));a.upload(Number(l),d)}},async(i,l,c)=>{Ft("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${i}, dataOffset=${l}, size=${c}`),await a.download(Number(i),()=>r.HEAPU8.subarray(Number(l)>>>0,Number(l+c)>>>0))},(i,l,c)=>a.createKernel(i,Number(l),c,r.UTF8ToString(r._JsepGetNodeName(Number(l)))),i=>a.releaseKernel(i),(i,l,c,p)=>{Ft("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${c}, kernel=${i}, contextDataOffset=${l}`);let d=new Xw(r,a,Number(l));return a.computeKernel(Number(i),d,p)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else{let o=new RM(t);n("webnn",[o,()=>o.reserveTensorId(),a=>o.releaseTensorId(a),async(a,i,l,c,p)=>o.ensureTensor(a,i,l,c,p),(a,i)=>{o.uploadTensor(a,i)},async(a,i)=>o.downloadTensor(a,i)])}}}),Jw,bu,yu,Zs,Yw,Sc,ca,vu,xu,$c,Tu,Eu,Pu,k0=Re(()=>{xx(),Tx(),ft(),Cn(),su(),FM(),Jw=(e,r)=>{Kt()._OrtInit(e,r)!==0&&Nt("Can't initialize onnxruntime.")},bu=async e=>{Jw(e.wasm.numThreads,na(e.logLevel))},yu=async(e,r)=>{Kt().asyncInit?.();{let t=(wT(),qo(C0)).init;if(r==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let s=e.webgpu.adapter;if(s){if(typeof s.limits!="object"||typeof s.features!="object"||typeof s.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let n=e.webgpu.powerPreference;if(n!==void 0&&n!=="low-power"&&n!=="high-performance")throw new Error(`Invalid powerPreference setting: "${n}"`);let o=e.webgpu.forceFallbackAdapter;if(o!==void 0&&typeof o!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${o}"`);if(s=await navigator.gpu.requestAdapter({powerPreference:n,forceFallbackAdapter:o}),!s)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await t("webgpu",Kt(),e,s)}if(r==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await t("webnn",Kt(),e)}}},Zs=new Map,Yw=e=>{let r=Kt(),t=r.stackSave();try{let s=r.PTR_SIZE,n=r.stackAlloc(2*s);r._OrtGetInputOutputCount(e,n,n+s)!==0&&Nt("Can't get session input/output count.");let o=s===4?"i32":"i64";return[Number(r.getValue(n,o)),Number(r.getValue(n+s,o))]}finally{r.stackRestore(t)}},Sc=(e,r)=>{let t=Kt(),s=t.stackSave(),n=0;try{let o=t.PTR_SIZE,a=t.stackAlloc(2*o);t._OrtGetInputOutputMetadata(e,r,a,a+o)!==0&&Nt("Can't get session input/output metadata.");let i=Number(t.getValue(a,"*"));n=Number(t.getValue(a+o,"*"));let l=t.HEAP32[n/4];if(l===0)return[i,0];let c=t.HEAPU32[n/4+1],p=[];for(let d=0;d<c;d++){let u=Number(t.getValue(n+8+d*o,"*"));p.push(u!==0?t.UTF8ToString(u):Number(t.getValue(n+8+(d+c)*o,"*")))}return[i,l,p]}finally{t.stackRestore(s),n!==0&&t._OrtFree(n)}},ca=e=>{let r=Kt(),t=r._malloc(e.byteLength);if(t===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return r.HEAPU8.set(e,t),[t,e.byteLength]},vu=async(e,r)=>{let t,s,n=Kt();Array.isArray(e)?[t,s]=e:e.buffer===n.HEAPU8.buffer?[t,s]=[e.byteOffset,e.byteLength]:[t,s]=ca(e);let o=0,a=0,i=0,l=[],c=[],p=[];try{if([a,l]=await AM(r),r?.externalData&&n.mountExternalData){let x=[];for(let T of r.externalData){let E=typeof T=="string"?T:T.path;x.push(au(typeof T=="string"?T:T.data).then(b=>{n.mountExternalData(E,b)}))}await Promise.all(x)}for(let x of r?.executionProviders??[])if((typeof x=="string"?x:x.name)==="webnn"){if(n.shouldTransferToMLTensor=!1,typeof x!="string"){let T=x,E=T?.context,b=T?.gpuDevice,S=T?.deviceType,D=T?.powerPreference;E?n.currentContext=E:b?n.currentContext=await n.webnnCreateMLContext(b):n.currentContext=await n.webnnCreateMLContext({deviceType:S,powerPreference:D})}else n.currentContext=await n.webnnCreateMLContext();break}o=await n._OrtCreateSession(t,s,a),n.webgpuOnCreateSession?.(o),o===0&&Nt("Can't create a session."),n.jsepOnCreateSession?.(),n.currentContext&&(n.webnnRegisterMLContext(o,n.currentContext),n.currentContext=void 0,n.shouldTransferToMLTensor=!0);let[d,u]=Yw(o),f=!!r?.enableGraphCapture,_=[],v=[],I=[],M=[],y=[];for(let x=0;x<d;x++){let[T,E,b]=Sc(o,x);T===0&&Nt("Can't get an input name."),c.push(T);let S=n.UTF8ToString(T);_.push(S),I.push(E===0?{name:S,isTensor:!1}:{name:S,isTensor:!0,type:Ns(E),shape:b})}for(let x=0;x<u;x++){let[T,E,b]=Sc(o,x+d);T===0&&Nt("Can't get an output name."),p.push(T);let S=n.UTF8ToString(T);v.push(S),M.push(E===0?{name:S,isTensor:!1}:{name:S,isTensor:!0,type:Ns(E),shape:b});{if(f&&r?.preferredOutputLocation===void 0){y.push("gpu-buffer");continue}let D=typeof r?.preferredOutputLocation=="string"?r.preferredOutputLocation:r?.preferredOutputLocation?.[S]??"cpu";if(D!=="cpu"&&D!=="cpu-pinned"&&D!=="gpu-buffer"&&D!=="ml-tensor")throw new Error(`Not supported preferred output location: ${D}.`);if(f&&D!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${D}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);y.push(D)}}let $=null;return y.some(x=>x==="gpu-buffer"||x==="ml-tensor")&&(i=n._OrtCreateBinding(o),i===0&&Nt("Can't create IO binding."),$={handle:i,outputPreferredLocations:y,outputPreferredLocationsEncoded:y.map(x=>Lc(x))}),Zs.set(o,[o,c,p,$,f,!1]),[o,_,v,I,M]}catch(d){throw c.forEach(u=>n._OrtFree(u)),p.forEach(u=>n._OrtFree(u)),i!==0&&n._OrtReleaseBinding(i)!==0&&Nt("Can't release IO binding."),o!==0&&n._OrtReleaseSession(o)!==0&&Nt("Can't release session."),d}finally{n._free(t),a!==0&&n._OrtReleaseSessionOptions(a)!==0&&Nt("Can't release session options."),l.forEach(d=>n._free(d)),n.unmountExternalData?.()}},xu=e=>{let r=Kt(),t=Zs.get(e);if(!t)throw new Error(`cannot release session. invalid session id: ${e}`);let[s,n,o,a,i]=t;a&&(i&&r._OrtClearBoundOutputs(a.handle)!==0&&Nt("Can't clear bound outputs."),r._OrtReleaseBinding(a.handle)!==0&&Nt("Can't release IO binding.")),r.jsepOnReleaseSession?.(e),r.webnnOnReleaseSession?.(e),r.webgpuOnReleaseSession?.(e),n.forEach(l=>r._OrtFree(l)),o.forEach(l=>r._OrtFree(l)),r._OrtReleaseSession(s)!==0&&Nt("Can't release session."),Zs.delete(e)},$c=async(e,r,t,s,n,o,a=!1)=>{if(!e){r.push(0);return}let i=Kt(),l=i.PTR_SIZE,c=e[0],p=e[1],d=e[3],u=d,f,_;if(c==="string"&&(d==="gpu-buffer"||d==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(a&&d!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${o} when enableGraphCapture is true.`);if(d==="gpu-buffer"){let M=e[2].gpuBuffer;_=vn(Jn(c),p);{let y=i.jsepRegisterBuffer;if(!y)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');f=y(s,o,M,_)}}else if(d==="ml-tensor"){let M=e[2].mlTensor;_=vn(Jn(c),p);let y=i.webnnRegisterMLTensor;if(!y)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');f=y(s,M,Jn(c),p)}else{let M=e[2];if(Array.isArray(M)){_=l*M.length,f=i._malloc(_),t.push(f);for(let y=0;y<M.length;y++){if(typeof M[y]!="string")throw new TypeError(`tensor data at index ${y} is not a string`);i.setValue(f+y*l,ys(M[y],t),"*")}}else{let y=i.webnnIsGraphInput;if(c!=="string"&&y){let $=i.UTF8ToString(n);if(y(s,$)){let x=Jn(c);_=vn(x,p),u="ml-tensor";let T=i.webnnCreateTemporaryTensor,E=i.webnnUploadTensor;if(!T||!E)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let b=await T(s,x,p);E(b,new Uint8Array(M.buffer,M.byteOffset,M.byteLength)),f=b}else _=M.byteLength,f=i._malloc(_),t.push(f),i.HEAPU8.set(new Uint8Array(M.buffer,M.byteOffset,_),f)}else _=M.byteLength,f=i._malloc(_),t.push(f),i.HEAPU8.set(new Uint8Array(M.buffer,M.byteOffset,_),f)}}let v=i.stackSave(),I=i.stackAlloc(4*p.length);try{p.forEach((y,$)=>i.setValue(I+$*l,y,l===4?"i32":"i64"));let M=i._OrtCreateTensor(Jn(c),f,_,I,p.length,Lc(u));M===0&&Nt(`Can't create tensor for input/output. session=${s}, index=${o}.`),r.push(M)}finally{i.stackRestore(v)}},Tu=async(e,r,t,s,n,o)=>{let a=Kt(),i=a.PTR_SIZE,l=Zs.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let c=l[0],p=l[1],d=l[2],u=l[3],f=l[4],_=l[5],v=r.length,I=s.length,M=0,y=[],$=[],x=[],T=[],E=a.stackSave(),b=a.stackAlloc(v*i),S=a.stackAlloc(v*i),D=a.stackAlloc(I*i),O=a.stackAlloc(I*i);try{[M,y]=IM(o);for(let z=0;z<v;z++)await $c(t[z],$,T,e,p[r[z]],r[z],f);for(let z=0;z<I;z++)await $c(n[z],x,T,e,d[s[z]],v+s[z],f);for(let z=0;z<v;z++)a.setValue(b+z*i,$[z],"*"),a.setValue(S+z*i,p[r[z]],"*");for(let z=0;z<I;z++)a.setValue(D+z*i,x[z],"*"),a.setValue(O+z*i,d[s[z]],"*");if(u&&!_){let{handle:z,outputPreferredLocations:Z,outputPreferredLocationsEncoded:Q}=u;if(p.length!==v)throw new Error(`input count from feeds (${v}) is expected to be always equal to model's input count (${p.length}).`);for(let Y=0;Y<v;Y++){let re=r[Y];await a._OrtBindInput(z,p[re],$[Y])!==0&&Nt(`Can't bind input[${Y}] for session=${e}.`)}for(let Y=0;Y<I;Y++){let re=s[Y];n[Y]?.[3]?a._OrtBindOutput(z,d[re],x[Y],0)!==0&&Nt(`Can't bind pre-allocated output[${Y}] for session=${e}.`):a._OrtBindOutput(z,d[re],0,Q[re])!==0&&Nt(`Can't bind output[${Y}] to ${Z[Y]} for session=${e}.`)}Zs.set(e,[c,p,d,u,f,!0])}a.jsepOnRunStart?.(c),a.webnnOnRunStart?.(c);let H;u?H=await a._OrtRunWithBinding(c,u.handle,I,D,M):H=await a._OrtRun(c,S,b,v,O,I,D,M),H!==0&&Nt("failed to call OrtRun().");let G=[];for(let z=0;z<I;z++){let Z=Number(a.getValue(D+z*i,"*"));if(Z===x[z]){G.push(n[z]);continue}let Q=a.stackSave(),Y=a.stackAlloc(4*i),re=!1,te,le=0;try{a._OrtGetTensorData(Z,Y,Y+i,Y+2*i,Y+3*i)!==0&&Nt(`Can't access output tensor data on index ${z}.`);let ue=i===4?"i32":"i64",B=Number(a.getValue(Y,ue));le=a.getValue(Y+i,"*");let F=a.getValue(Y+i*2,"*"),K=Number(a.getValue(Y+i*3,ue)),j=[];for(let be=0;be<K;be++)j.push(Number(a.getValue(F+be*i,ue)));a._OrtFree(F)!==0&&Nt("Can't free memory for tensor dims.");let ie=j.reduce((be,Fe)=>be*Fe,1);te=Ns(B);let ke=u?.outputPreferredLocations[s[z]];if(te==="string"){if(ke==="gpu-buffer"||ke==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let be=[];for(let Fe=0;Fe<ie;Fe++){let Ke=a.getValue(le+Fe*i,"*"),ve=a.getValue(le+(Fe+1)*i,"*"),q=Fe===ie-1?void 0:ve-Ke;be.push(a.UTF8ToString(Ke,q))}G.push([te,j,be,"cpu"])}else if(ke==="gpu-buffer"&&ie>0){let be=a.jsepGetBuffer;if(!be)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let Fe=be(le),Ke=vn(B,ie);if(Ke===void 0||!ou(te))throw new Error(`Unsupported data type: ${te}`);re=!0,G.push([te,j,{gpuBuffer:Fe,download:a.jsepCreateDownloader(Fe,Ke,te),dispose:()=>{a._OrtReleaseTensor(Z)!==0&&Nt("Can't release tensor.")}},"gpu-buffer"])}else if(ke==="ml-tensor"&&ie>0){let be=a.webnnEnsureTensor,Fe=a.webnnIsInt64Supported;if(!be||!Fe)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(vn(B,ie)===void 0||!iu(te))throw new Error(`Unsupported data type: ${te}`);if(te==="int64"&&!Fe(e))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let Ke=await be(e,le,B,j,!1);re=!0,G.push([te,j,{mlTensor:Ke,download:a.webnnCreateMLTensorDownloader(le,te),dispose:()=>{a.webnnReleaseTensorId(le),a._OrtReleaseTensor(Z)}},"ml-tensor"])}else{let be=nu(te),Fe=new be(ie);new Uint8Array(Fe.buffer,Fe.byteOffset,Fe.byteLength).set(a.HEAPU8.subarray(le,le+Fe.byteLength)),G.push([te,j,Fe,"cpu"])}}finally{a.stackRestore(Q),te==="string"&&le&&a._free(le),re||a._OrtReleaseTensor(Z),a.webnnOnRunEnd?.(c)}}return u&&!f&&(a._OrtClearBoundOutputs(u.handle)!==0&&Nt("Can't clear bound outputs."),Zs.set(e,[c,p,d,u,f,!1])),G}finally{a.stackRestore(E),$.forEach(H=>a._OrtReleaseTensor(H)),x.forEach(H=>a._OrtReleaseTensor(H)),T.forEach(H=>a._free(H)),M!==0&&a._OrtReleaseRunOptions(M),y.forEach(H=>a._free(H))}},Eu=e=>{let r=Kt(),t=Zs.get(e);if(!t)throw new Error("invalid session id");let s=t[0],n=r._OrtEndProfiling(s);n===0&&Nt("Can't get an profile file name."),r._OrtFree(n)},Pu=e=>{let r=[];for(let t of e){let s=t[2];!Array.isArray(s)&&"buffer"in s&&r.push(s.buffer)}return r}}),en,is,Qn,No,Vo,Ji,kc,Yi,wn,Mn,Zw,I0,A0,F0,O0,D0,L0,z0,B0=Re(()=>{Es(),k0(),Cn(),tu(),en=()=>!!Xt.wasm.proxy&&typeof document<"u",Qn=!1,No=!1,Vo=!1,Yi=new Map,wn=(e,r)=>{let t=Yi.get(e);t?t.push(r):Yi.set(e,[r])},Mn=()=>{if(Qn||!No||Vo||!is)throw new Error("worker not ready")},Zw=e=>{switch(e.data.type){case"init-wasm":Qn=!1,e.data.err?(Vo=!0,kc[1](e.data.err)):(No=!0,kc[0]()),Ji&&(URL.revokeObjectURL(Ji),Ji=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let r=Yi.get(e.data.type);e.data.err?r.shift()[1](e.data.err):r.shift()[0](e.data.out);break}}},I0=async()=>{if(!No){if(Qn)throw new Error("multiple calls to 'initWasm()' detected.");if(Vo)throw new Error("previous call to 'initWasm()' failed.");if(Qn=!0,en())return new Promise((e,r)=>{is?.terminate(),$M().then(([t,s])=>{try{is=s,is.onerror=o=>r(o),is.onmessage=Zw,kc=[e,r];let n={type:"init-wasm",in:Xt};!n.in.wasm.wasmPaths&&(t||Dc)&&(n.in.wasm.wasmPaths={wasm:new URL("/assets/ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href}),is.postMessage(n),Ji=t}catch(n){r(n)}},r)});try{await ru(Xt.wasm),await bu(Xt),No=!0}catch(e){throw Vo=!0,e}finally{Qn=!1}}},A0=async e=>{if(en())return Mn(),new Promise((r,t)=>{wn("init-ep",[r,t]);let s={type:"init-ep",in:{epName:e,env:Xt}};is.postMessage(s)});await yu(Xt,e)},F0=async e=>en()?(Mn(),new Promise((r,t)=>{wn("copy-from",[r,t]);let s={type:"copy-from",in:{buffer:e}};is.postMessage(s,[e.buffer])})):ca(e),O0=async(e,r)=>{if(en()){if(r?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Mn(),new Promise((t,s)=>{wn("create",[t,s]);let n={type:"create",in:{model:e,options:{...r}}},o=[];e instanceof Uint8Array&&o.push(e.buffer),is.postMessage(n,o)})}else return vu(e,r)},D0=async e=>{if(en())return Mn(),new Promise((r,t)=>{wn("release",[r,t]);let s={type:"release",in:e};is.postMessage(s)});xu(e)},L0=async(e,r,t,s,n,o)=>{if(en()){if(t.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return Mn(),new Promise((a,i)=>{wn("run",[a,i]);let l=t,c={type:"run",in:{sessionId:e,inputIndices:r,inputs:l,outputIndices:s,options:o}};is.postMessage(c,Pu(l))})}else return Tu(e,r,t,s,n,o)},z0=async e=>{if(en())return Mn(),new Promise((r,t)=>{wn("end-profiling",[r,t]);let s={type:"end-profiling",in:e};is.postMessage(s)});Eu(e)}}),Ic,eM,R0,MT=Re(()=>{Es(),B0(),ft(),eu(),FM(),Ic=(e,r)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${r()}`)}},eM=e=>{switch(e[3]){case"cpu":return new vs(e[0],e[2],e[1]);case"gpu-buffer":{let r=e[0];if(!ou(r))throw new Error(`not supported data type: ${r} for deserializing GPU tensor`);let{gpuBuffer:t,download:s,dispose:n}=e[2];return vs.fromGpuBuffer(t,{dataType:r,dims:e[1],download:s,dispose:n})}case"ml-tensor":{let r=e[0];if(!iu(r))throw new Error(`not supported data type: ${r} for deserializing MLTensor tensor`);let{mlTensor:t,download:s,dispose:n}=e[2];return vs.fromMLTensor(t,{dataType:r,dims:e[1],download:s,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},R0=class{async fetchModelAndCopyToWasmMemory(e){return F0(await au(e))}async loadModel(e,r){Ts();let t;typeof e=="string"?t=await this.fetchModelAndCopyToWasmMemory(e):t=e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await O0(t,r),cs()}async dispose(){return D0(this.sessionId)}async run(e,r,t){Ts();let s=[],n=[];Object.entries(e).forEach(d=>{let u=d[0],f=d[1],_=this.inputNames.indexOf(u);if(_===-1)throw new Error(`invalid input '${u}'`);s.push(f),n.push(_)});let o=[],a=[];Object.entries(r).forEach(d=>{let u=d[0],f=d[1],_=this.outputNames.indexOf(u);if(_===-1)throw new Error(`invalid output '${u}'`);o.push(f),a.push(_)});let i=s.map((d,u)=>Ic(d,()=>`input "${this.inputNames[n[u]]}"`)),l=o.map((d,u)=>d?Ic(d,()=>`output "${this.outputNames[a[u]]}"`):null),c=await L0(this.sessionId,n,i,a,l,t),p={};for(let d=0;d<c.length;d++)p[this.outputNames[a[d]]]=o[d]??eM(c[d]);return cs(),p}startProfiling(){}endProfiling(){z0(this.sessionId)}}}),j0={};ro(j0,{OnnxruntimeWebAssemblyBackend:()=>Xc,initializeFlags:()=>Qc,wasmBackend:()=>N0});var Qc,Xc,N0,bT=Re(()=>{Es(),B0(),MT(),Qc=()=>{(typeof Xt.wasm.initTimeout!="number"||Xt.wasm.initTimeout<0)&&(Xt.wasm.initTimeout=0);let e=Xt.wasm.simd;if(typeof e!="boolean"&&e!==void 0&&e!=="fixed"&&e!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),Xt.wasm.simd=!1),typeof Xt.wasm.proxy!="boolean"&&(Xt.wasm.proxy=!1),typeof Xt.wasm.trace!="boolean"&&(Xt.wasm.trace=!1),typeof Xt.wasm.numThreads!="number"||!Number.isInteger(Xt.wasm.numThreads)||Xt.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)Xt.wasm.numThreads=1;else{let r=typeof navigator>"u"?ix("node:os").cpus().length:navigator.hardwareConcurrency;Xt.wasm.numThreads=Math.min(4,Math.ceil((r||1)/2))}},Xc=class{async init(e){Qc(),await I0(),await A0(e)}async createInferenceSessionHandler(e,r){let t=new R0;return await t.loadModel(e,r),t}},N0=new Xc});Es();Es();Es();var yT="1.22.0-dev.20250409-89f8206ba4",vT=xM;{let e=(bT(),qo(j0)).wasmBackend;xn("webgpu",e,5),xn("webnn",e,5),xn("cpu",e,10),xn("wasm",e,10)}Object.defineProperty(Xt.versions,"web",{value:yT,enumerable:!0});/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */const xT=Object.freeze(Object.defineProperty({__proto__:null,get InferenceSession(){return Zc},get TRACE(){return Qo},get TRACE_FUNC_BEGIN(){return Ts},get TRACE_FUNC_END(){return cs},get Tensor(){return vs},default:vT,get env(){return Xt},get registerBackend(){return xn}},Symbol.toStringTag,{value:"Module"}));var Ac={},TT={"onnxruntime-common":(e=>{e.exports=rx}),"onnxruntime-web":(e=>{e.exports=xT}),"?2ce3":(()=>{}),"?7992":(()=>{}),"?5af5":(()=>{}),"?2b25":(()=>{}),"?db59":(()=>{}),"?383f":(()=>{}),"?fa4b":(()=>{}),"./node_modules/@huggingface/jinja/dist/index.js":((e,r,t)=>{t.r(r),t.d(r,{Environment:()=>Xe,Interpreter:()=>et,Template:()=>Cs,parse:()=>ke,tokenize:()=>p});var s=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Comment:"Comment"}),n=class{constructor(C,X){this.value=C,this.type=X}};function o(C){return/\w/.test(C)}function a(C){return/[0-9]/.test(C)}var i=[["{%",s.OpenStatement],["%}",s.CloseStatement],["{{",s.OpenExpression],["}}",s.CloseExpression],["(",s.OpenParen],[")",s.CloseParen],["{",s.OpenCurlyBracket],["}",s.CloseCurlyBracket],["[",s.OpenSquareBracket],["]",s.CloseSquareBracket],[",",s.Comma],[".",s.Dot],[":",s.Colon],["|",s.Pipe],["<=",s.ComparisonBinaryOperator],[">=",s.ComparisonBinaryOperator],["==",s.ComparisonBinaryOperator],["!=",s.ComparisonBinaryOperator],["<",s.ComparisonBinaryOperator],[">",s.ComparisonBinaryOperator],["+",s.AdditiveBinaryOperator],["-",s.AdditiveBinaryOperator],["~",s.AdditiveBinaryOperator],["*",s.MultiplicativeBinaryOperator],["/",s.MultiplicativeBinaryOperator],["%",s.MultiplicativeBinaryOperator],["=",s.Equals]],l=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function c(C,X={}){return C.endsWith(`
`)&&(C=C.slice(0,-1)),X.lstrip_blocks&&(C=C.replace(/^[ \t]*({[#%-])/gm,"$1")),X.trim_blocks&&(C=C.replace(/([#%-]})\n/g,"$1")),C.replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{").replace(/-#}\s*/g,"#}").replace(/\s*{#-/g,"{#").replace(/{%\s*(end)?generation\s*%}/gs,"")}function p(C,X={}){const V=[],J=c(C,X);let ne=0,me=0;const Se=tt=>{let lt="";for(;tt(J[ne]);){if(J[ne]==="\\"){if(++ne,ne>=J.length)throw new SyntaxError("Unexpected end of input");const We=J[ne++],St=l.get(We);if(St===void 0)throw new SyntaxError(`Unexpected escaped character: ${We}`);lt+=St;continue}if(lt+=J[ne++],ne>=J.length)throw new SyntaxError("Unexpected end of input")}return lt};e:for(;ne<J.length;){const tt=V.at(-1)?.type;if(tt===void 0||tt===s.CloseStatement||tt===s.CloseExpression||tt===s.Comment){let We="";for(;ne<J.length&&!(J[ne]==="{"&&(J[ne+1]==="%"||J[ne+1]==="{"||J[ne+1]==="#"));)We+=J[ne++];if(We.length>0){V.push(new n(We,s.Text));continue}}if(J[ne]==="{"&&J[ne+1]==="#"){ne+=2;let We="";for(;J[ne]!=="#"||J[ne+1]!=="}";){if(ne+2>=J.length)throw new SyntaxError("Missing end of comment tag");We+=J[ne++]}V.push(new n(We,s.Comment)),ne+=2;continue}Se(We=>/\s/.test(We));const lt=J[ne];if(lt==="-"||lt==="+"){const We=V.at(-1)?.type;if(We===s.Text||We===void 0)throw new SyntaxError(`Unexpected character: ${lt}`);switch(We){case s.Identifier:case s.NumericLiteral:case s.StringLiteral:case s.CloseParen:case s.CloseSquareBracket:break;default:{++ne;const St=Se(a);V.push(new n(`${lt}${St}`,St.length>0?s.NumericLiteral:s.UnaryOperator));continue}}}for(const[We,St]of i){if(We==="}}"&&me>0)continue;if(J.slice(ne,ne+We.length)===We){V.push(new n(We,St)),St===s.OpenExpression?me=0:St===s.OpenCurlyBracket?++me:St===s.CloseCurlyBracket&&--me,ne+=We.length;continue e}}if(lt==="'"||lt==='"'){++ne;const We=Se(St=>St!==lt);V.push(new n(We,s.StringLiteral)),++ne;continue}if(a(lt)){let We=Se(a);if(J[ne]==="."&&a(J[ne+1])){++ne;const St=Se(a);We=`${We}.${St}`}V.push(new n(We,s.NumericLiteral));continue}if(o(lt)){const We=Se(o);V.push(new n(We,s.Identifier));continue}throw new SyntaxError(`Unexpected character: ${lt}`)}return V}var d=class{type="Statement"},u=class extends d{constructor(C){super(),this.body=C}type="Program"},f=class extends d{constructor(C,X,V){super(),this.test=C,this.body=X,this.alternate=V}type="If"},_=class extends d{constructor(C,X,V,J){super(),this.loopvar=C,this.iterable=X,this.body=V,this.defaultBlock=J}type="For"},v=class extends d{type="Break"},I=class extends d{type="Continue"},M=class extends d{constructor(C,X,V){super(),this.assignee=C,this.value=X,this.body=V}type="Set"},y=class extends d{constructor(C,X,V){super(),this.name=C,this.args=X,this.body=V}type="Macro"},$=class extends d{constructor(C){super(),this.value=C}type="Comment"},x=class extends d{type="Expression"},T=class extends x{constructor(C,X,V){super(),this.object=C,this.property=X,this.computed=V}type="MemberExpression"},E=class extends x{constructor(C,X){super(),this.callee=C,this.args=X}type="CallExpression"},b=class extends x{constructor(C){super(),this.value=C}type="Identifier"},S=class extends x{constructor(C){super(),this.value=C}type="Literal"},D=class extends S{type="IntegerLiteral"},O=class extends S{type="FloatLiteral"},H=class extends S{type="StringLiteral"},G=class extends S{type="ArrayLiteral"},z=class extends S{type="TupleLiteral"},Z=class extends S{type="ObjectLiteral"},Q=class extends x{constructor(C,X,V){super(),this.operator=C,this.left=X,this.right=V}type="BinaryExpression"},Y=class extends x{constructor(C,X){super(),this.operand=C,this.filter=X}type="FilterExpression"},re=class extends d{constructor(C,X){super(),this.filter=C,this.body=X}type="FilterStatement"},te=class extends x{constructor(C,X){super(),this.lhs=C,this.test=X}type="SelectExpression"},le=class extends x{constructor(C,X,V){super(),this.operand=C,this.negate=X,this.test=V}type="TestExpression"},ue=class extends x{constructor(C,X){super(),this.operator=C,this.argument=X}type="UnaryExpression"},B=class extends x{constructor(C=void 0,X=void 0,V=void 0){super(),this.start=C,this.stop=X,this.step=V}type="SliceExpression"},F=class extends x{constructor(C,X){super(),this.key=C,this.value=X}type="KeywordArgumentExpression"},K=class extends x{constructor(C){super(),this.argument=C}type="SpreadExpression"},j=class extends d{constructor(C,X,V){super(),this.call=C,this.callerArgs=X,this.body=V}type="CallStatement"},ie=class extends x{constructor(C,X,V){super(),this.condition=C,this.trueExpr=X,this.falseExpr=V}type="Ternary"};function ke(C){const X=new u([]);let V=0;function J(Le,Be){const st=C[V++];if(!st||st.type!==Le)throw new Error(`Parser Error: ${Be}. ${st.type} !== ${Le}.`);return st}function ne(Le){if(!lt(Le))throw new SyntaxError(`Expected ${Le}`);++V}function me(){switch(C[V].type){case s.Comment:return new $(C[V++].value);case s.Text:return We();case s.OpenStatement:return St();case s.OpenExpression:return $t();default:throw new SyntaxError(`Unexpected token type: ${C[V].type}`)}}function Se(...Le){return V+Le.length<=C.length&&Le.every((Be,st)=>Be===C[V+st].type)}function tt(...Le){return C[V]?.type===s.OpenStatement&&C[V+1]?.type===s.Identifier&&Le.includes(C[V+1]?.value)}function lt(...Le){return V+Le.length<=C.length&&Le.every((Be,st)=>C[V+st].type==="Identifier"&&Be===C[V+st].value)}function We(){return new H(J(s.Text,"Expected text token").value)}function St(){if(J(s.OpenStatement,"Expected opening statement token"),C[V].type!==s.Identifier)throw new SyntaxError(`Unknown statement, got ${C[V].type}`);const Le=C[V].value;let Be;switch(Le){case"set":++V,Be=er();break;case"if":++V,Be=Wt(),J(s.OpenStatement,"Expected {% token"),ne("endif"),J(s.CloseStatement,"Expected %} token");break;case"macro":++V,Be=cr(),J(s.OpenStatement,"Expected {% token"),ne("endmacro"),J(s.CloseStatement,"Expected %} token");break;case"for":++V,Be=Ht(),J(s.OpenStatement,"Expected {% token"),ne("endfor"),J(s.CloseStatement,"Expected %} token");break;case"call":{++V;let st=null;Se(s.OpenParen)&&(st=Hr());const qt=Rr();if(qt.type!=="Identifier")throw new SyntaxError("Expected identifier following call statement");const Ls=Hr();J(s.CloseStatement,"Expected closing statement token");const ks=[];for(;!tt("endcall");)ks.push(me());J(s.OpenStatement,"Expected '{%'"),ne("endcall"),J(s.CloseStatement,"Expected closing statement token");const Jr=new E(qt,Ls);Be=new j(Jr,st,ks);break}case"break":++V,J(s.CloseStatement,"Expected closing statement token"),Be=new v;break;case"continue":++V,J(s.CloseStatement,"Expected closing statement token"),Be=new I;break;case"filter":{++V;let st=Rr();st instanceof b&&Se(s.OpenParen)&&(st=yr(st)),J(s.CloseStatement,"Expected closing statement token");const qt=[];for(;!tt("endfilter");)qt.push(me());J(s.OpenStatement,"Expected '{%'"),ne("endfilter"),J(s.CloseStatement,"Expected '%}'"),Be=new re(st,qt);break}default:throw new SyntaxError(`Unknown statement type: ${Le}`)}return Be}function $t(){J(s.OpenExpression,"Expected opening expression token");const Le=hr();return J(s.CloseExpression,"Expected closing expression token"),Le}function er(){const Le=Kr();let Be=null;const st=[];if(Se(s.Equals))++V,Be=Kr();else{for(J(s.CloseStatement,"Expected %} token");!tt("endset");)st.push(me());J(s.OpenStatement,"Expected {% token"),ne("endset")}return J(s.CloseStatement,"Expected closing statement token"),new M(Le,Be,st)}function Wt(){const Le=hr();J(s.CloseStatement,"Expected closing statement token");const Be=[],st=[];for(;!tt("elif","else","endif");)Be.push(me());if(tt("elif")){++V,++V;const qt=Wt();st.push(qt)}else if(tt("else"))for(++V,++V,J(s.CloseStatement,"Expected closing statement token");!tt("endif");)st.push(me());return new f(Le,Be,st)}function cr(){const Le=Rr();if(Le.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const Be=Hr();J(s.CloseStatement,"Expected closing statement token");const st=[];for(;!tt("endmacro");)st.push(me());return new y(Le,Be,st)}function Kr(Le=!1){const Be=Le?Rr:hr,st=[Be()],qt=Se(s.Comma);for(;qt&&(++V,st.push(Be()),!!Se(s.Comma)););return qt?new z(st):st[0]}function Ht(){const Le=Kr(!0);if(!(Le instanceof b||Le instanceof z))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${Le.type} instead`);if(!lt("in"))throw new SyntaxError("Expected `in` keyword following loop variable");++V;const Be=hr();J(s.CloseStatement,"Expected closing statement token");const st=[];for(;!tt("endfor","else");)st.push(me());const qt=[];if(tt("else"))for(++V,++V,J(s.CloseStatement,"Expected closing statement token");!tt("endfor");)qt.push(me());return new _(Le,Be,st,qt)}function hr(){return zr()}function zr(){const Le=Ar();if(lt("if")){++V;const Be=Ar();if(lt("else")){++V;const st=zr();return new ie(Be,Le,st)}else return new te(Le,Be)}return Le}function Ar(){let Le=us();for(;lt("or");){const Be=C[V];++V;const st=us();Le=new Q(Be,Le,st)}return Le}function us(){let Le=ds();for(;lt("and");){const Be=C[V];++V;const st=ds();Le=new Q(Be,Le,st)}return Le}function ds(){let Le;for(;lt("not");){const Be=C[V];++V;const st=ds();Le=new ue(Be,st)}return Le??Br()}function Br(){let Le=Ss();for(;;){let Be;if(lt("not","in"))Be=new n("not in",s.Identifier),V+=2;else if(lt("in"))Be=C[V++];else if(Se(s.ComparisonBinaryOperator))Be=C[V++];else break;const st=Ss();Le=new Q(Be,Le,st)}return Le}function Ss(){let Le=Xr();for(;Se(s.AdditiveBinaryOperator);){const Be=C[V];++V;const st=Xr();Le=new Q(Be,Le,st)}return Le}function Nr(){const Le=ss(Rr());return Se(s.OpenParen)?yr(Le):Le}function yr(Le){let Be=new E(Le,Hr());return Be=ss(Be),Se(s.OpenParen)&&(Be=yr(Be)),Be}function Hr(){J(s.OpenParen,"Expected opening parenthesis for arguments list");const Le=ur();return J(s.CloseParen,"Expected closing parenthesis for arguments list"),Le}function ur(){const Le=[];for(;!Se(s.CloseParen);){let Be;if(C[V].type===s.MultiplicativeBinaryOperator&&C[V].value==="*"){++V;const st=hr();Be=new K(st)}else if(Be=hr(),Se(s.Equals)){if(++V,!(Be instanceof b))throw new SyntaxError("Expected identifier for keyword argument");const st=hr();Be=new F(Be,st)}Le.push(Be),Se(s.Comma)&&++V}return Le}function vr(){const Le=[];let Be=!1;for(;!Se(s.CloseSquareBracket);)Se(s.Colon)?(Le.push(void 0),++V,Be=!0):(Le.push(hr()),Se(s.Colon)&&(++V,Be=!0));if(Le.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(Be){if(Le.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new B(...Le)}return Le[0]}function ss(Le){for(;Se(s.Dot)||Se(s.OpenSquareBracket);){const Be=C[V];++V;let st;const qt=Be.type===s.OpenSquareBracket;if(qt)st=vr(),J(s.CloseSquareBracket,"Expected closing square bracket");else if(st=Rr(),st.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");Le=new T(Le,st,qt)}return Le}function Xr(){let Le=$s();for(;Se(s.MultiplicativeBinaryOperator);){const Be=C[V++],st=$s();Le=new Q(Be,Le,st)}return Le}function $s(){let Le=Ds();for(;lt("is");){++V;const Be=lt("not");Be&&++V;const st=Rr();if(!(st instanceof b))throw new SyntaxError("Expected identifier for the test");Le=new le(Le,Be,st)}return Le}function Ds(){let Le=Nr();for(;Se(s.Pipe);){++V;let Be=Rr();if(!(Be instanceof b))throw new SyntaxError("Expected identifier for the filter");Se(s.OpenParen)&&(Be=yr(Be)),Le=new Y(Le,Be)}return Le}function Rr(){const Le=C[V++];switch(Le.type){case s.NumericLiteral:{const Be=Le.value;return Be.includes(".")?new O(Number(Be)):new D(Number(Be))}case s.StringLiteral:{let Be=Le.value;for(;Se(s.StringLiteral);)Be+=C[V++].value;return new H(Be)}case s.Identifier:return new b(Le.value);case s.OpenParen:{const Be=Kr();return J(s.CloseParen,"Expected closing parenthesis, got ${tokens[current].type} instead."),Be}case s.OpenSquareBracket:{const Be=[];for(;!Se(s.CloseSquareBracket);)Be.push(hr()),Se(s.Comma)&&++V;return++V,new G(Be)}case s.OpenCurlyBracket:{const Be=new Map;for(;!Se(s.CloseCurlyBracket);){const st=hr();J(s.Colon,"Expected colon between key and value in object literal");const qt=hr();Be.set(st,qt),Se(s.Comma)&&++V}return++V,new Z(Be)}default:throw new SyntaxError(`Unexpected token: ${Le.type}`)}}for(;V<C.length;)X.body.push(me());return X}function be(C,X,V=1){X===void 0&&(X=C,C=0);const J=[];for(let ne=C;ne<X;ne+=V)J.push(ne);return J}function Fe(C,X,V,J=1){const ne=Math.sign(J);ne>=0?(X=(X??=0)<0?Math.max(C.length+X,0):Math.min(X,C.length),V=(V??=C.length)<0?Math.max(C.length+V,0):Math.min(V,C.length)):(X=(X??=C.length-1)<0?Math.max(C.length+X,-1):Math.min(X,C.length-1),V=(V??=-1)<-1?Math.max(C.length+V,-1):Math.min(V,C.length-1));const me=[];for(let Se=X;ne*Se<ne*V;Se+=J)me.push(C[Se]);return me}function Ke(C){return C.replace(/\b\w/g,X=>X.toUpperCase())}function ve(C){return q(new Date,C)}function q(C,X){const V=new Intl.DateTimeFormat(void 0,{month:"long"}),J=new Intl.DateTimeFormat(void 0,{month:"short"}),ne=me=>me<10?"0"+me:me.toString();return X.replace(/%[YmdbBHM%]/g,me=>{switch(me){case"%Y":return C.getFullYear().toString();case"%m":return ne(C.getMonth()+1);case"%d":return ne(C.getDate());case"%b":return J.format(C);case"%B":return V.format(C);case"%H":return ne(C.getHours());case"%M":return ne(C.getMinutes());case"%%":return"%";default:return me}})}function N(C){return C.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function de(C,X,V,J){if(J===0)return C;let ne=J==null||J<0?1/0:J;const me=X.length===0?new RegExp("(?=)","gu"):new RegExp(N(X),"gu");return C.replaceAll(me,Se=>ne>0?(--ne,V):Se)}var xe=class extends Error{},$e=class extends Error{},ye=class{type="RuntimeValue";value;builtins=new Map;constructor(C=void 0){this.value=C}__bool__(){return new Ae(!!this.value)}toString(){return String(this.value)}},fe=class extends ye{type="IntegerValue"},Ee=class extends ye{type="FloatValue";toString(){return this.value%1===0?this.value.toFixed(1):this.value.toString()}},ge=class extends ye{type="StringValue";builtins=new Map([["upper",new Ne(()=>new ge(this.value.toUpperCase()))],["lower",new Ne(()=>new ge(this.value.toLowerCase()))],["strip",new Ne(()=>new ge(this.value.trim()))],["title",new Ne(()=>new ge(Ke(this.value)))],["capitalize",new Ne(()=>new ge(this.value.charAt(0).toUpperCase()+this.value.slice(1)))],["length",new fe(this.value.length)],["rstrip",new Ne(()=>new ge(this.value.trimEnd()))],["lstrip",new Ne(()=>new ge(this.value.trimStart()))],["startswith",new Ne(C=>{if(C.length===0)throw new Error("startswith() requires at least one argument");const X=C[0];if(X instanceof ge)return new Ae(this.value.startsWith(X.value));if(X instanceof Me){for(const V of X.value){if(!(V instanceof ge))throw new Error("startswith() tuple elements must be strings");if(this.value.startsWith(V.value))return new Ae(!0)}return new Ae(!1)}throw new Error("startswith() argument must be a string or tuple of strings")})],["endswith",new Ne(C=>{if(C.length===0)throw new Error("endswith() requires at least one argument");const X=C[0];if(X instanceof ge)return new Ae(this.value.endsWith(X.value));if(X instanceof Me){for(const V of X.value){if(!(V instanceof ge))throw new Error("endswith() tuple elements must be strings");if(this.value.endsWith(V.value))return new Ae(!0)}return new Ae(!1)}throw new Error("endswith() argument must be a string or tuple of strings")})],["split",new Ne(C=>{const X=C[0]??new je;if(!(X instanceof ge||X instanceof je))throw new Error("sep argument must be a string or null");const V=C[1]??new fe(-1);if(!(V instanceof fe))throw new Error("maxsplit argument must be a number");let J=[];if(X instanceof je){const ne=this.value.trimStart();for(const{0:me,index:Se}of ne.matchAll(/\S+/g)){if(V.value!==-1&&J.length>=V.value&&Se!==void 0){J.push(me+ne.slice(Se+me.length));break}J.push(me)}}else{if(X.value==="")throw new Error("empty separator");J=this.value.split(X.value),V.value!==-1&&J.length>V.value&&J.push(J.splice(V.value).join(X.value))}return new Me(J.map(ne=>new ge(ne)))})],["replace",new Ne(C=>{if(C.length<2)throw new Error("replace() requires at least two arguments");const X=C[0],V=C[1];if(!(X instanceof ge&&V instanceof ge))throw new Error("replace() arguments must be strings");let J;if(C.length>2?C[2].type==="KeywordArgumentsValue"?J=C[2].value.get("count")??new je:J=C[2]:J=new je,!(J instanceof fe||J instanceof je))throw new Error("replace() count argument must be a number or null");return new ge(de(this.value,X.value,V.value,J.value))})]])},Ae=class extends ye{type="BooleanValue"},Oe=class extends ye{type="ObjectValue";__bool__(){return new Ae(this.value.size>0)}builtins=new Map([["get",new Ne(([C,X])=>{if(!(C instanceof ge))throw new Error(`Object key must be a string: got ${C.type}`);return this.value.get(C.value)??X??new je})],["items",new Ne(()=>this.items())],["keys",new Ne(()=>this.keys())],["values",new Ne(()=>this.values())]]);items(){return new Me(Array.from(this.value.entries()).map(([C,X])=>new Me([new ge(C),X])))}keys(){return new Me(Array.from(this.value.keys()).map(C=>new ge(C)))}values(){return new Me(Array.from(this.value.values()))}},He=class extends Oe{type="KeywordArgumentsValue"},Me=class extends ye{type="ArrayValue";builtins=new Map([["length",new fe(this.value.length)]]);__bool__(){return new Ae(this.value.length>0)}},rt=class extends Me{type="TupleValue"},Ne=class extends ye{type="FunctionValue"},je=class extends ye{type="NullValue"},Ze=class extends ye{type="UndefinedValue"},Xe=class{constructor(C){this.parent=C}variables=new Map([["namespace",new Ne(C=>{if(C.length===0)return new Oe(new Map);if(C.length!==1||!(C[0]instanceof Oe))throw new Error("`namespace` expects either zero arguments or a single object argument");return C[0]})]]);tests=new Map([["boolean",C=>C.type==="BooleanValue"],["callable",C=>C instanceof Ne],["odd",C=>{if(!(C instanceof fe))throw new Error(`cannot odd on ${C.type}`);return C.value%2!==0}],["even",C=>{if(!(C instanceof fe))throw new Error(`cannot even on ${C.type}`);return C.value%2===0}],["false",C=>C.type==="BooleanValue"&&!C.value],["true",C=>C.type==="BooleanValue"&&C.value],["none",C=>C.type==="NullValue"],["string",C=>C.type==="StringValue"],["number",C=>C instanceof fe||C instanceof Ee],["integer",C=>C instanceof fe],["iterable",C=>C.type==="ArrayValue"||C.type==="StringValue"],["mapping",C=>C.type==="ObjectValue"],["lower",C=>{const X=C.value;return C.type==="StringValue"&&X===X.toLowerCase()}],["upper",C=>{const X=C.value;return C.type==="StringValue"&&X===X.toUpperCase()}],["none",C=>C.type==="NullValue"],["defined",C=>C.type!=="UndefinedValue"],["undefined",C=>C.type==="UndefinedValue"],["equalto",(C,X)=>C.value===X.value],["eq",(C,X)=>C.value===X.value]]);set(C,X){return this.declareVariable(C,Ct(X))}declareVariable(C,X){if(this.variables.has(C))throw new SyntaxError(`Variable already declared: ${C}`);return this.variables.set(C,X),X}setVariable(C,X){return this.variables.set(C,X),X}resolve(C){if(this.variables.has(C))return this;if(this.parent)return this.parent.resolve(C);throw new Error(`Unknown variable: ${C}`)}lookupVariable(C){try{return this.resolve(C).variables.get(C)??new Ze}catch{return new Ze}}};function Ye(C){C.set("false",!1),C.set("true",!0),C.set("none",null),C.set("raise_exception",X=>{throw new Error(X)}),C.set("range",be),C.set("strftime_now",ve),C.set("True",!0),C.set("False",!1),C.set("None",null)}var et=class{global;constructor(C){this.global=C??new Xe}run(C){return this.evaluate(C,this.global)}evaluateBinaryExpression(C,X){const V=this.evaluate(C.left,X);switch(C.operator.value){case"and":return V.__bool__().value?this.evaluate(C.right,X):V;case"or":return V.__bool__().value?V:this.evaluate(C.right,X)}const J=this.evaluate(C.right,X);switch(C.operator.value){case"==":return new Ae(V.value==J.value);case"!=":return new Ae(V.value!=J.value)}if(V instanceof Ze||J instanceof Ze){if(J instanceof Ze&&["in","not in"].includes(C.operator.value))return new Ae(C.operator.value==="not in");throw new Error(`Cannot perform operation ${C.operator.value} on undefined values`)}else{if(V instanceof je||J instanceof je)throw new Error("Cannot perform operation on null values");if(C.operator.value==="~")return new ge(V.value.toString()+J.value.toString());if((V instanceof fe||V instanceof Ee)&&(J instanceof fe||J instanceof Ee)){const ne=V.value,me=J.value;switch(C.operator.value){case"+":case"-":case"*":{const Se=C.operator.value==="+"?ne+me:C.operator.value==="-"?ne-me:ne*me;return V instanceof Ee||J instanceof Ee?new Ee(Se):new fe(Se)}case"/":return new Ee(ne/me);case"%":{const Se=ne%me;return V instanceof Ee||J instanceof Ee?new Ee(Se):new fe(Se)}case"<":return new Ae(ne<me);case">":return new Ae(ne>me);case">=":return new Ae(ne>=me);case"<=":return new Ae(ne<=me)}}else if(V instanceof Me&&J instanceof Me)switch(C.operator.value){case"+":return new Me(V.value.concat(J.value))}else if(J instanceof Me){const ne=J.value.find(me=>me.value===V.value)!==void 0;switch(C.operator.value){case"in":return new Ae(ne);case"not in":return new Ae(!ne)}}}if(V instanceof ge||J instanceof ge)switch(C.operator.value){case"+":return new ge(V.value.toString()+J.value.toString())}if(V instanceof ge&&J instanceof ge)switch(C.operator.value){case"in":return new Ae(J.value.includes(V.value));case"not in":return new Ae(!J.value.includes(V.value))}if(V instanceof ge&&J instanceof Oe)switch(C.operator.value){case"in":return new Ae(J.value.has(V.value));case"not in":return new Ae(!J.value.has(V.value))}throw new SyntaxError(`Unknown operator "${C.operator.value}" between ${V.type} and ${J.type}`)}evaluateArguments(C,X){const V=[],J=new Map;for(const ne of C)if(ne.type==="SpreadExpression"){const me=ne,Se=this.evaluate(me.argument,X);if(!(Se instanceof Me))throw new Error(`Cannot unpack non-iterable type: ${Se.type}`);for(const tt of Se.value)V.push(tt)}else if(ne.type==="KeywordArgumentExpression"){const me=ne;J.set(me.key.value,this.evaluate(me.value,X))}else{if(J.size>0)throw new Error("Positional arguments must come before keyword arguments");V.push(this.evaluate(ne,X))}return[V,J]}applyFilter(C,X,V){if(X.type==="Identifier"){const J=X;if(J.value==="tojson")return new ge(It(C));if(C instanceof Me)switch(J.value){case"list":return C;case"first":return C.value[0];case"last":return C.value[C.value.length-1];case"length":return new fe(C.value.length);case"reverse":return new Me(C.value.reverse());case"sort":return new Me(C.value.sort((ne,me)=>{if(ne.type!==me.type)throw new Error(`Cannot compare different types: ${ne.type} and ${me.type}`);switch(ne.type){case"IntegerValue":case"FloatValue":return ne.value-me.value;case"StringValue":return ne.value.localeCompare(me.value);default:throw new Error(`Cannot compare type: ${ne.type}`)}}));case"join":return new ge(C.value.map(ne=>ne.value).join(""));case"string":return new ge(It(C));case"unique":{const ne=new Set,me=[];for(const Se of C.value)ne.has(Se.value)||(ne.add(Se.value),me.push(Se));return new Me(me)}default:throw new Error(`Unknown ArrayValue filter: ${J.value}`)}else if(C instanceof ge)switch(J.value){case"length":case"upper":case"lower":case"title":case"capitalize":{const ne=C.builtins.get(J.value);if(ne instanceof Ne)return ne.value([],V);if(ne instanceof fe)return ne;throw new Error(`Unknown StringValue filter: ${J.value}`)}case"trim":return new ge(C.value.trim());case"indent":return new ge(C.value.split(`
`).map((ne,me)=>me===0||ne.length===0?ne:"    "+ne).join(`
`));case"join":case"string":return C;case"int":{const ne=parseInt(C.value,10);return new fe(isNaN(ne)?0:ne)}case"float":{const ne=parseFloat(C.value);return new Ee(isNaN(ne)?0:ne)}default:throw new Error(`Unknown StringValue filter: ${J.value}`)}else if(C instanceof fe||C instanceof Ee)switch(J.value){case"abs":return C instanceof fe?new fe(Math.abs(C.value)):new Ee(Math.abs(C.value));case"int":return new fe(Math.floor(C.value));case"float":return new Ee(C.value);default:throw new Error(`Unknown NumericValue filter: ${J.value}`)}else if(C instanceof Oe)switch(J.value){case"items":return new Me(Array.from(C.value.entries()).map(([ne,me])=>new Me([new ge(ne),me])));case"length":return new fe(C.value.size);default:throw new Error(`Unknown ObjectValue filter: ${J.value}`)}else if(C instanceof Ae)switch(J.value){case"bool":return new Ae(C.value);case"int":return new fe(C.value?1:0);case"float":return new Ee(C.value?1:0);case"string":return new ge(C.value?"true":"false");default:throw new Error(`Unknown BooleanValue filter: ${J.value}`)}throw new Error(`Cannot apply filter "${J.value}" to type: ${C.type}`)}else if(X.type==="CallExpression"){const J=X;if(J.callee.type!=="Identifier")throw new Error(`Unknown filter: ${J.callee.type}`);const ne=J.callee.value;if(ne==="tojson"){const[,me]=this.evaluateArguments(J.args,V),Se=me.get("indent")??new je;if(!(Se instanceof fe||Se instanceof je))throw new Error("If set, indent must be a number");return new ge(It(C,Se.value))}else if(ne==="join"){let me;if(C instanceof ge)me=Array.from(C.value);else if(C instanceof Me)me=C.value.map(We=>We.value);else throw new Error(`Cannot apply filter "${ne}" to type: ${C.type}`);const[Se,tt]=this.evaluateArguments(J.args,V),lt=Se.at(0)??tt.get("separator")??new ge("");if(!(lt instanceof ge))throw new Error("separator must be a string");return new ge(me.join(lt.value))}else if(ne==="int"||ne==="float"){const[me,Se]=this.evaluateArguments(J.args,V),tt=me.at(0)??Se.get("default")??(ne==="int"?new fe(0):new Ee(0));if(C instanceof ge){const lt=ne==="int"?parseInt(C.value,10):parseFloat(C.value);return isNaN(lt)?tt:ne==="int"?new fe(lt):new Ee(lt)}else{if(C instanceof fe||C instanceof Ee)return C;if(C instanceof Ae)return ne==="int"?new fe(C.value?1:0):new Ee(C.value?1:0);throw new Error(`Cannot apply filter "${ne}" to type: ${C.type}`)}}else if(ne==="default"){const[me,Se]=this.evaluateArguments(J.args,V),tt=me[0]??new ge(""),lt=me[1]??Se.get("boolean")??new Ae(!1);if(!(lt instanceof Ae))throw new Error("`default` filter flag must be a boolean");return C instanceof Ze||lt.value&&!C.__bool__().value?tt:C}if(C instanceof Me){switch(ne){case"selectattr":case"rejectattr":{const me=ne==="selectattr";if(C.value.some($t=>!($t instanceof Oe)))throw new Error(`\`${ne}\` can only be applied to array of objects`);if(J.args.some($t=>$t.type!=="StringLiteral"))throw new Error(`arguments of \`${ne}\` must be strings`);const[Se,tt,lt]=J.args.map($t=>this.evaluate($t,V));let We;if(tt){const $t=V.tests.get(tt.value);if(!$t)throw new Error(`Unknown test: ${tt.value}`);We=$t}else We=(...$t)=>$t[0].__bool__().value;const St=C.value.filter($t=>{const er=$t.value.get(Se.value),Wt=er?We(er,lt):!1;return me?Wt:!Wt});return new Me(St)}case"map":{const[,me]=this.evaluateArguments(J.args,V);if(me.has("attribute")){const Se=me.get("attribute");if(!(Se instanceof ge))throw new Error("attribute must be a string");const tt=me.get("default"),lt=C.value.map(We=>{if(!(We instanceof Oe))throw new Error("items in map must be an object");return We.value.get(Se.value)??tt??new Ze});return new Me(lt)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${ne}`)}else if(C instanceof ge){switch(ne){case"indent":{const[me,Se]=this.evaluateArguments(J.args,V),tt=me.at(0)??Se.get("width")??new fe(4);if(!(tt instanceof fe))throw new Error("width must be a number");const lt=me.at(1)??Se.get("first")??new Ae(!1),We=me.at(2)??Se.get("blank")??new Ae(!1),St=C.value.split(`
`),$t=" ".repeat(tt.value),er=St.map((Wt,cr)=>!lt.value&&cr===0||!We.value&&Wt.length===0?Wt:$t+Wt);return new ge(er.join(`
`))}case"replace":{const me=C.builtins.get("replace");if(!(me instanceof Ne))throw new Error("replace filter not available");const[Se,tt]=this.evaluateArguments(J.args,V);return me.value([...Se,new He(tt)],V)}}throw new Error(`Unknown StringValue filter: ${ne}`)}else throw new Error(`Cannot apply filter "${ne}" to type: ${C.type}`)}throw new Error(`Unknown filter: ${X.type}`)}evaluateFilterExpression(C,X){const V=this.evaluate(C.operand,X);return this.applyFilter(V,C.filter,X)}evaluateTestExpression(C,X){const V=this.evaluate(C.operand,X),J=X.tests.get(C.test.value);if(!J)throw new Error(`Unknown test: ${C.test.value}`);const ne=J(V);return new Ae(C.negate?!ne:ne)}evaluateSelectExpression(C,X){return this.evaluate(C.test,X).__bool__().value?this.evaluate(C.lhs,X):new Ze}evaluateUnaryExpression(C,X){const V=this.evaluate(C.argument,X);switch(C.operator.value){case"not":return new Ae(!V.value);default:throw new SyntaxError(`Unknown operator: ${C.operator.value}`)}}evaluateTernaryExpression(C,X){return this.evaluate(C.condition,X).__bool__().value?this.evaluate(C.trueExpr,X):this.evaluate(C.falseExpr,X)}evalProgram(C,X){return this.evaluateBlock(C.body,X)}evaluateBlock(C,X){let V="";for(const J of C){const ne=this.evaluate(J,X);ne.type!=="NullValue"&&ne.type!=="UndefinedValue"&&(V+=ne.toString())}return new ge(V)}evaluateIdentifier(C,X){return X.lookupVariable(C.value)}evaluateCallExpression(C,X){const[V,J]=this.evaluateArguments(C.args,X);J.size>0&&V.push(new He(J));const ne=this.evaluate(C.callee,X);if(ne.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${ne.type}`);return ne.value(V,X)}evaluateSliceExpression(C,X,V){if(!(C instanceof Me||C instanceof ge))throw new Error("Slice object must be an array or string");const J=this.evaluate(X.start,V),ne=this.evaluate(X.stop,V),me=this.evaluate(X.step,V);if(!(J instanceof fe||J instanceof Ze))throw new Error("Slice start must be numeric or undefined");if(!(ne instanceof fe||ne instanceof Ze))throw new Error("Slice stop must be numeric or undefined");if(!(me instanceof fe||me instanceof Ze))throw new Error("Slice step must be numeric or undefined");return C instanceof Me?new Me(Fe(C.value,J.value,ne.value,me.value)):new ge(Fe(Array.from(C.value),J.value,ne.value,me.value).join(""))}evaluateMemberExpression(C,X){const V=this.evaluate(C.object,X);let J;if(C.computed){if(C.property.type==="SliceExpression")return this.evaluateSliceExpression(V,C.property,X);J=this.evaluate(C.property,X)}else J=new ge(C.property.value);let ne;if(V instanceof Oe){if(!(J instanceof ge))throw new Error(`Cannot access property with non-string: got ${J.type}`);ne=V.value.get(J.value)??V.builtins.get(J.value)}else if(V instanceof Me||V instanceof ge)if(J instanceof fe)ne=V.value.at(J.value),V instanceof ge&&(ne=new ge(V.value.at(J.value)));else if(J instanceof ge)ne=V.builtins.get(J.value);else throw new Error(`Cannot access property with non-string/non-number: got ${J.type}`);else{if(!(J instanceof ge))throw new Error(`Cannot access property with non-string: got ${J.type}`);ne=V.builtins.get(J.value)}return ne instanceof ye?ne:new Ze}evaluateSet(C,X){const V=C.value?this.evaluate(C.value,X):this.evaluateBlock(C.body,X);if(C.assignee.type==="Identifier"){const J=C.assignee.value;X.setVariable(J,V)}else if(C.assignee.type==="TupleLiteral"){const J=C.assignee;if(!(V instanceof Me))throw new Error(`Cannot unpack non-iterable type in set: ${V.type}`);const ne=V.value;if(ne.length!==J.value.length)throw new Error(`Too ${J.value.length>ne.length?"few":"many"} items to unpack in set`);for(let me=0;me<J.value.length;++me){const Se=J.value[me];if(Se.type!=="Identifier")throw new Error(`Cannot unpack to non-identifier in set: ${Se.type}`);X.setVariable(Se.value,ne[me])}}else if(C.assignee.type==="MemberExpression"){const J=C.assignee,ne=this.evaluate(J.object,X);if(!(ne instanceof Oe))throw new Error("Cannot assign to member of non-object");if(J.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");ne.value.set(J.property.value,V)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(C.assignee)}`);return new je}evaluateIf(C,X){const V=this.evaluate(C.test,X);return this.evaluateBlock(V.__bool__().value?C.body:C.alternate,X)}evaluateFor(C,X){const V=new Xe(X);let J,ne;if(C.iterable.type==="SelectExpression"){const We=C.iterable;ne=this.evaluate(We.lhs,V),J=We.test}else ne=this.evaluate(C.iterable,V);if(!(ne instanceof Me||ne instanceof Oe))throw new Error(`Expected iterable or object type in for loop: got ${ne.type}`);ne instanceof Oe&&(ne=ne.keys());const me=[],Se=[];for(let We=0;We<ne.value.length;++We){const St=new Xe(V),$t=ne.value[We];let er;if(C.loopvar.type==="Identifier")er=Wt=>Wt.setVariable(C.loopvar.value,$t);else if(C.loopvar.type==="TupleLiteral"){const Wt=C.loopvar;if($t.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${$t.type}`);const cr=$t;if(Wt.value.length!==cr.value.length)throw new Error(`Too ${Wt.value.length>cr.value.length?"few":"many"} items to unpack`);er=Kr=>{for(let Ht=0;Ht<Wt.value.length;++Ht){if(Wt.value[Ht].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Wt.value[Ht].type}`);Kr.setVariable(Wt.value[Ht].value,cr.value[Ht])}}}else throw new Error(`Invalid loop variable(s): ${C.loopvar.type}`);J&&(er(St),!this.evaluate(J,St).__bool__().value)||(me.push($t),Se.push(er))}let tt="",lt=!0;for(let We=0;We<me.length;++We){const St=new Map([["index",new fe(We+1)],["index0",new fe(We)],["revindex",new fe(me.length-We)],["revindex0",new fe(me.length-We-1)],["first",new Ae(We===0)],["last",new Ae(We===me.length-1)],["length",new fe(me.length)],["previtem",We>0?me[We-1]:new Ze],["nextitem",We<me.length-1?me[We+1]:new Ze]]);V.setVariable("loop",new Oe(St)),Se[We](V);try{const $t=this.evaluateBlock(C.body,V);tt+=$t.value}catch($t){if($t instanceof $e)continue;if($t instanceof xe)break;throw $t}lt=!1}if(lt){const We=this.evaluateBlock(C.defaultBlock,V);tt+=We.value}return new ge(tt)}evaluateMacro(C,X){return X.setVariable(C.name.value,new Ne((V,J)=>{const ne=new Xe(J);V=V.slice();let me;V.at(-1)?.type==="KeywordArgumentsValue"&&(me=V.pop());for(let Se=0;Se<C.args.length;++Se){const tt=C.args[Se],lt=V[Se];if(tt.type==="Identifier"){const We=tt;if(!lt)throw new Error(`Missing positional argument: ${We.value}`);ne.setVariable(We.value,lt)}else if(tt.type==="KeywordArgumentExpression"){const We=tt,St=lt??me?.value.get(We.key.value)??this.evaluate(We.value,ne);ne.setVariable(We.key.value,St)}else throw new Error(`Unknown argument type: ${tt.type}`)}return this.evaluateBlock(C.body,ne)})),new je}evaluateCallStatement(C,X){const V=new Ne((tt,lt)=>{const We=new Xe(lt);if(C.callerArgs)for(let St=0;St<C.callerArgs.length;++St){const $t=C.callerArgs[St];if($t.type!=="Identifier")throw new Error(`Caller parameter must be an identifier, got ${$t.type}`);We.setVariable($t.value,tt[St]??new Ze)}return this.evaluateBlock(C.body,We)}),[J,ne]=this.evaluateArguments(C.call.args,X);J.push(new He(ne));const me=this.evaluate(C.call.callee,X);if(me.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${me.type}`);const Se=new Xe(X);return Se.setVariable("caller",V),me.value(J,Se)}evaluateFilterStatement(C,X){const V=this.evaluateBlock(C.body,X);return this.applyFilter(V,C.filter,X)}evaluate(C,X){if(!C)return new Ze;switch(C.type){case"Program":return this.evalProgram(C,X);case"Set":return this.evaluateSet(C,X);case"If":return this.evaluateIf(C,X);case"For":return this.evaluateFor(C,X);case"Macro":return this.evaluateMacro(C,X);case"CallStatement":return this.evaluateCallStatement(C,X);case"Break":throw new xe;case"Continue":throw new $e;case"IntegerLiteral":return new fe(C.value);case"FloatLiteral":return new Ee(C.value);case"StringLiteral":return new ge(C.value);case"ArrayLiteral":return new Me(C.value.map(V=>this.evaluate(V,X)));case"TupleLiteral":return new rt(C.value.map(V=>this.evaluate(V,X)));case"ObjectLiteral":{const V=new Map;for(const[J,ne]of C.value){const me=this.evaluate(J,X);if(!(me instanceof ge))throw new Error(`Object keys must be strings: got ${me.type}`);V.set(me.value,this.evaluate(ne,X))}return new Oe(V)}case"Identifier":return this.evaluateIdentifier(C,X);case"CallExpression":return this.evaluateCallExpression(C,X);case"MemberExpression":return this.evaluateMemberExpression(C,X);case"UnaryExpression":return this.evaluateUnaryExpression(C,X);case"BinaryExpression":return this.evaluateBinaryExpression(C,X);case"FilterExpression":return this.evaluateFilterExpression(C,X);case"FilterStatement":return this.evaluateFilterStatement(C,X);case"TestExpression":return this.evaluateTestExpression(C,X);case"SelectExpression":return this.evaluateSelectExpression(C,X);case"Ternary":return this.evaluateTernaryExpression(C,X);case"Comment":return new je;default:throw new SyntaxError(`Unknown node type: ${C.type}`)}}};function Ct(C){switch(typeof C){case"number":return Number.isInteger(C)?new fe(C):new Ee(C);case"string":return new ge(C);case"boolean":return new Ae(C);case"undefined":return new Ze;case"object":return C===null?new je:Array.isArray(C)?new Me(C.map(Ct)):new Oe(new Map(Object.entries(C).map(([X,V])=>[X,Ct(V)])));case"function":return new Ne((X,V)=>{const J=C(...X.map(ne=>ne.value))??null;return Ct(J)});default:throw new Error(`Cannot convert to runtime value: ${C}`)}}function It(C,X,V){const J=V??0;switch(C.type){case"NullValue":case"UndefinedValue":return"null";case"IntegerValue":case"FloatValue":case"StringValue":case"BooleanValue":return JSON.stringify(C.value);case"ArrayValue":case"ObjectValue":{const ne=X?" ".repeat(X):"",me=`
`+ne.repeat(J),Se=me+ne;if(C.type==="ArrayValue"){const tt=C.value.map(lt=>It(lt,X,J+1));return X?`[${Se}${tt.join(`,${Se}`)}${me}]`:`[${tt.join(", ")}]`}else{const tt=Array.from(C.value.entries()).map(([lt,We])=>{const St=`"${lt}": ${It(We,X,J+1)}`;return X?`${Se}${St}`:St});return X?`{${tt.join(",")}${me}}`:`{${tt.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${C.type}`)}}var ht=`
`,br="{%- ",Gr=" -%}";function Dr(C){switch(C.operator.type){case"MultiplicativeBinaryOperator":return 4;case"AdditiveBinaryOperator":return 3;case"ComparisonBinaryOperator":return 2;case"Identifier":return C.operator.value==="and"?1:C.operator.value==="in"||C.operator.value==="not in"?2:0}return 0}function Lr(C,X="	"){const V=typeof X=="number"?" ".repeat(X):X;return Ir(C.body,0,V).replace(/\n$/,"")}function sr(...C){return br+C.join(" ")+Gr}function Ir(C,X,V){return C.map(J=>Us(J,X,V)).join(ht)}function Us(C,X,V){const J=V.repeat(X);switch(C.type){case"Program":return Ir(C.body,X,V);case"If":return Ws(C,X,V);case"For":return Os(C,X,V);case"Set":return Qr(C,X,V);case"Macro":return pt(C,X,V);case"Break":return J+sr("break");case"Continue":return J+sr("continue");case"CallStatement":return Ps(C,X,V);case"FilterStatement":return Ut(C,X,V);case"Comment":return J+"{# "+C.value+" #}";default:return J+"{{- "+Tt(C)+" -}}"}}function Ws(C,X,V){const J=V.repeat(X),ne=[];let me=C;for(;me&&(ne.push({test:me.test,body:me.body}),me.alternate.length===1&&me.alternate[0].type==="If");)me=me.alternate[0];let Se=J+sr("if",Tt(ne[0].test))+ht+Ir(ne[0].body,X+1,V);for(let tt=1;tt<ne.length;++tt)Se+=ht+J+sr("elif",Tt(ne[tt].test))+ht+Ir(ne[tt].body,X+1,V);return me&&me.alternate.length>0&&(Se+=ht+J+sr("else")+ht+Ir(me.alternate,X+1,V)),Se+=ht+J+sr("endif"),Se}function Os(C,X,V){const J=V.repeat(X);let ne="";if(C.iterable.type==="SelectExpression"){const Se=C.iterable;ne=`${Tt(Se.lhs)} if ${Tt(Se.test)}`}else ne=Tt(C.iterable);let me=J+sr("for",Tt(C.loopvar),"in",ne)+ht+Ir(C.body,X+1,V);return C.defaultBlock.length>0&&(me+=ht+J+sr("else")+ht+Ir(C.defaultBlock,X+1,V)),me+=ht+J+sr("endfor"),me}function Qr(C,X,V){const J=V.repeat(X),ne=Tt(C.assignee),me=C.value?Tt(C.value):"",Se=J+sr("set",`${ne}${C.value?" = "+me:""}`);return C.body.length===0?Se:Se+ht+Ir(C.body,X+1,V)+ht+J+sr("endset")}function pt(C,X,V){const J=V.repeat(X),ne=C.args.map(Tt).join(", ");return J+sr("macro",`${C.name.value}(${ne})`)+ht+Ir(C.body,X+1,V)+ht+J+sr("endmacro")}function Ps(C,X,V){const J=V.repeat(X),ne=C.callerArgs&&C.callerArgs.length>0?`(${C.callerArgs.map(Tt).join(", ")})`:"",me=Tt(C.call);let Se=J+sr(`call${ne}`,me)+ht;return Se+=Ir(C.body,X+1,V)+ht,Se+=J+sr("endcall"),Se}function Ut(C,X,V){const J=V.repeat(X),ne=C.filter.type==="Identifier"?C.filter.value:Tt(C.filter);let me=J+sr("filter",ne)+ht;return me+=Ir(C.body,X+1,V)+ht,me+=J+sr("endfilter"),me}function Tt(C,X=-1){switch(C.type){case"SpreadExpression":return`*${Tt(C.argument)}`;case"Identifier":return C.value;case"IntegerLiteral":return`${C.value}`;case"FloatLiteral":return`${C.value}`;case"StringLiteral":return JSON.stringify(C.value);case"BinaryExpression":{const V=C,J=Dr(V),ne=Tt(V.left,J),me=Tt(V.right,J+1),Se=`${ne} ${V.operator.value} ${me}`;return J<X?`(${Se})`:Se}case"UnaryExpression":{const V=C;return V.operator.value+(V.operator.value==="not"?" ":"")+Tt(V.argument,1/0)}case"CallExpression":{const V=C,J=V.args.map(Tt).join(", ");return`${Tt(V.callee)}(${J})`}case"MemberExpression":{const V=C;let J=Tt(V.object);["Identifier","MemberExpression","CallExpression","StringLiteral","IntegerLiteral","FloatLiteral","ArrayLiteral","TupleLiteral","ObjectLiteral"].includes(V.object.type)||(J=`(${J})`);let ne=Tt(V.property);return!V.computed&&V.property.type!=="Identifier"&&(ne=`(${ne})`),V.computed?`${J}[${ne}]`:`${J}.${ne}`}case"FilterExpression":{const V=C,J=Tt(V.operand,1/0);return V.filter.type==="CallExpression"?`${J} | ${Tt(V.filter)}`:`${J} | ${V.filter.value}`}case"SelectExpression":{const V=C;return`${Tt(V.lhs)} if ${Tt(V.test)}`}case"TestExpression":{const V=C;return`${Tt(V.operand)} is${V.negate?" not":""} ${V.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const V=C.value.map(Tt),J=C.type==="ArrayLiteral"?"[]":"()";return`${J[0]}${V.join(", ")}${J[1]}`}case"ObjectLiteral":return`{${Array.from(C.value.entries()).map(([J,ne])=>`${Tt(J)}: ${Tt(ne)}`).join(", ")}}`;case"SliceExpression":{const V=C,J=V.start?Tt(V.start):"",ne=V.stop?Tt(V.stop):"",me=V.step?`:${Tt(V.step)}`:"";return`${J}:${ne}${me}`}case"KeywordArgumentExpression":{const V=C;return`${V.key.value}=${Tt(V.value)}`}case"Ternary":{const V=C,J=`${Tt(V.trueExpr)} if ${Tt(V.condition,0)} else ${Tt(V.falseExpr)}`;return X>-1?`(${J})`:J}default:throw new Error(`Unknown expression type: ${C.type}`)}}var Cs=class{parsed;constructor(C){const X=p(C,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=ke(X)}render(C){const X=new Xe;if(Ye(X),C)for(const[ne,me]of Object.entries(C))X.set(ne,me);return new et(X).run(this.parsed).value}format(C){return Lr(this.parsed,C?.indent||"	")}}}),"./src/backends/onnx.js":((e,r,t)=>{var s;t.r(r),t.d(r,{Tensor:()=>i.Tensor,createInferenceSession:()=>I,deviceToExecutionProviders:()=>_,isONNXProxy:()=>E,isONNXTensor:()=>x,runInferenceSession:()=>$});var n=t("./src/env.js"),o=t("?2ce3"),a=t("onnxruntime-web"),i=t("onnxruntime-common");const l=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),c=[];let p,d;const u=Symbol.for("onnxruntime");if(u in globalThis)d=globalThis[u];else if(n.apis.IS_NODE_ENV){switch(d=o??(s||(s=t.t(o,2))),process.platform){case"win32":c.push("dml");break;case"linux":process.arch==="x64"&&c.push("cuda");break}c.push("cpu"),p=["cpu"]}else d=a,n.apis.IS_WEBNN_AVAILABLE&&c.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),n.apis.IS_WEBGPU_AVAILABLE&&c.push("webgpu"),c.push("wasm"),p=["wasm"];const f=d.InferenceSession;function _(b=null){if(!b)return p;switch(b){case"auto":return c;case"gpu":return c.filter(S=>["webgpu","cuda","dml","webnn-gpu"].includes(S))}if(c.includes(b))return[l[b]??b];throw new Error(`Unsupported device: "${b}". Should be one of: ${c.join(", ")}.`)}let v=null;async function I(b,S,D){v&&await v;const O=f.create(b,S);v??=O;const H=await O;return H.config=D,H}let M=Promise.resolve();const y=n.apis.IS_BROWSER_ENV||n.apis.IS_WEBWORKER_ENV;async function $(b,S){const D=()=>b.run(S);return await(y?M=M.then(D):D())}function x(b){return b instanceof d.Tensor}const T=d?.env;T?.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!T.wasm.wasmPaths&&(T.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${n.env.version}/dist/`),T.wasm.proxy=!1),T?.webgpu&&(T.webgpu.powerPreference="high-performance");function E(){return T?.wasm?.proxy}n.env.backends.onnx=T}),"./src/base/feature_extraction_utils.js":((e,r,t)=>{t.r(r),t.d(r,{FeatureExtractor:()=>a,validate_audio_inputs:()=>i});var s=t("./src/utils/constants.js"),n=t("./src/utils/generic.js"),o=t("./src/utils/hub.js");class a extends n.Callable{constructor(c){super(),this.config=c}static async from_pretrained(c,p={}){const d=await(0,o.getModelJSON)(c,s.FEATURE_EXTRACTOR_NAME,!0,p);return new this(d)}}function i(l,c){if(!(l instanceof Float32Array||l instanceof Float64Array))throw new Error(`${c} expects input to be a Float32Array or a Float64Array, but got ${l?.constructor?.name??typeof l} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}}),"./src/base/image_processors_utils.js":((e,r,t)=>{t.r(r),t.d(r,{ImageProcessor:()=>x,center_to_corners_format:()=>d,post_process_instance_segmentation:()=>$,post_process_object_detection:()=>u,post_process_panoptic_segmentation:()=>y,post_process_semantic_segmentation:()=>f});var s=t("./src/utils/generic.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/maths.js");t("./src/utils/image.js");var a=t("./src/utils/core.js"),i=t("./src/utils/hub.js"),l=t("./src/utils/constants.js");function c(T,E,b=0,S=null){const D=T/E;let O=(0,o.bankers_round)(D)*E;return S!==null&&O>S&&(O=Math.floor(D)*E),O<b&&(O=Math.ceil(D)*E),O}function p([T,E],b){return[Math.max(Math.floor(T/b),1)*b,Math.max(Math.floor(E/b),1)*b]}function d([T,E,b,S]){return[T-b/2,E-S/2,T+b/2,E+S/2]}function u(T,E=.5,b=null,S=!1){const D=T.logits,O=T.pred_boxes,[H,G,z]=D.dims;if(b!==null&&b.length!==H)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Z=[];for(let Q=0;Q<H;++Q){let Y=b!==null?b[Q]:null,re={boxes:[],classes:[],scores:[]},te=D[Q],le=O[Q];for(let ue=0;ue<G;++ue){let B=te[ue],F=[],K;if(S){K=B.sigmoid().data;for(let j=0;j<K.length;++j)K[j]>E&&F.push(j)}else{let j=(0,o.max)(B.data)[1];if(j===z-1||(K=(0,o.softmax)(B.data),K[j]<E))continue;F.push(j)}for(const j of F){let ie=le[ue].data;ie=d(ie),Y!==null&&(ie=ie.map((ke,be)=>ke*Y[(be+1)%2])),re.boxes.push(ie),re.classes.push(j),re.scores.push(K[j])}}Z.push(re)}return Z}function f(T,E=null){const b=T.logits,S=b.dims[0];if(E!==null&&E.length!==S)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const D=[];for(let O=0;O<S;++O){const H=E!==null?E[O]:null;let G=b[O];H!==null&&(G=(0,n.interpolate)(G,H,"bilinear",!1));const[z,Z]=H??G.dims.slice(-2),Q=new n.Tensor("int32",new Int32Array(z*Z),[z,Z]),Y=G[0].data,re=Q.data;for(let ue=1;ue<G.dims[0];++ue){const B=G[ue].data;for(let F=0;F<B.length;++F)B[F]>Y[F]&&(Y[F]=B[F],re[F]=ue)}const te=new Array(G.dims[0]);for(let ue=0;ue<re.length;++ue){const B=re[ue];te[B]=B}const le=te.filter(ue=>ue!==void 0);D.push({segmentation:Q,labels:le})}return D}function _(T,E,b,S){const D=[],O=[],H=[];for(let G=0;G<T.dims[0];++G){const z=T[G],Z=E[G],Q=(0,o.max)(z.data)[1];if(Q===S)continue;const re=(0,o.softmax)(z.data)[Q];re>b&&(D.push(Z),O.push(re),H.push(Q))}return[D,O,H]}function v(T,E,b,S=.5,D=.8){const O=[];let H=0,G=0;const z=E[b].data;for(let Q=0;Q<T.length;++Q)T[Q]===b&&(O.push(Q),++H),z[Q]>=S&&++G;let Z=H>0&&G>0;return Z&&(Z=H/G>D),[Z,O]}function I(T,E,b,S,D,O=null,H=null){const[G,z]=H??T[0].dims,Z=new n.Tensor("int32",new Int32Array(G*z),[G,z]),Q=[];if(H!==null)for(let ue=0;ue<T.length;++ue)T[ue]=(0,n.interpolate)(T[ue],H,"bilinear",!1);const Y=new Int32Array(T[0].data.length),re=new Float32Array(T[0].data.length);for(let ue=0;ue<T.length;++ue){let B=E[ue];const F=T[ue].data;for(let K=0;K<F.length;++K)F[K]*=B,F[K]>re[K]&&(Y[K]=ue,re[K]=F[K])}let te=0;const le=Z.data;for(let ue=0;ue<b.length;++ue){const B=b[ue],[F,K]=v(Y,T,ue,S,D);if(F){++te;for(const j of K)le[j]=te;Q.push({id:te,label_id:B,score:E[ue]})}}return[Z,Q]}function M(T,E,b=28,S=3136,D=784*1280){if(T<b||E<b)throw new Error(`height:${T} or width:${E} must be larger than factor:${b}`);if(Math.max(T,E)/Math.min(T,E)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max(T,E)/Math.min(T,E)}`);let O=Math.round(T/b)*b,H=Math.round(E/b)*b;if(O*H>D){const G=Math.sqrt(T*E/D);O=Math.floor(T/G/b)*b,H=Math.floor(E/G/b)*b}else if(O*H<S){const G=Math.sqrt(S/(T*E));O=Math.ceil(T*G/b)*b,H=Math.ceil(E*G/b)*b}return[O,H]}function y(T,E=.5,b=.5,S=.8,D=null,O=null){D===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),D=new Set);const H=T.class_queries_logits??T.logits,z=(T.masks_queries_logits??T.pred_masks).sigmoid();let[Z,Q,Y]=H.dims;if(Y-=1,O!==null&&O.length!==Z)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let re=[];for(let te=0;te<Z;++te){let le=O!==null?O[te]:null,ue=H[te],B=z[te],[F,K,j]=_(ue,B,E,Y);if(j.length===0){let[be,Fe]=le??B.dims.slice(-2),Ke=new n.Tensor("int32",new Int32Array(be*Fe).fill(-1),[be,Fe]);re.push({segmentation:Ke,segments_info:[]});continue}let[ie,ke]=I(F,K,j,b,S,D,le);re.push({segmentation:ie,segments_info:ke})}return re}function $(T,E=.5,b=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class x extends s.Callable{constructor(E){super(),this.image_mean=E.image_mean??E.mean,this.image_std=E.image_std??E.std,this.resample=E.resample??2,this.do_rescale=E.do_rescale??!0,this.rescale_factor=E.rescale_factor??1/255,this.do_normalize=E.do_normalize,this.do_thumbnail=E.do_thumbnail,this.size=E.size??E.image_size,this.do_resize=E.do_resize??this.size!==void 0,this.size_divisibility=E.size_divisibility??E.size_divisor,this.do_center_crop=E.do_center_crop,this.crop_size=E.crop_size,this.do_convert_rgb=E.do_convert_rgb??!0,this.do_crop_margin=E.do_crop_margin,this.pad_size=E.pad_size,this.do_pad=E.do_pad,this.min_pixels=E.min_pixels,this.max_pixels=E.max_pixels,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=E.do_flip_channel_order??!1,this.config=E}async thumbnail(E,b,S=2){const D=E.height,O=E.width,H=b.height,G=b.width;let z=Math.min(D,H),Z=Math.min(O,G);return z===D&&Z===O?E:(D>O?Z=Math.floor(O*z/D):O>D&&(z=Math.floor(D*Z/O)),await E.resize(Z,z,{resample:S}))}async crop_margin(E,b=200){const S=E.clone().grayscale(),D=(0,o.min)(S.data)[0],H=(0,o.max)(S.data)[0]-D;if(H===0)return E;const G=b/255;let z=S.width,Z=S.height,Q=0,Y=0;const re=S.data;for(let te=0;te<S.height;++te){const le=te*S.width;for(let ue=0;ue<S.width;++ue)(re[le+ue]-D)/H<G&&(z=Math.min(z,ue),Z=Math.min(Z,te),Q=Math.max(Q,ue),Y=Math.max(Y,te))}return E=await E.crop([z,Z,Q,Y]),E}pad_image(E,b,S,{mode:D="constant",center:O=!1,constant_values:H=0}={}){const[G,z,Z]=b;let Q,Y;if(typeof S=="number"?(Q=S,Y=S):S==="square"?Q=Y=Math.max(G,z):(Q=S.width,Y=S.height),Q!==z||Y!==G){const re=new Float32Array(Q*Y*Z);if(Array.isArray(H))for(let ue=0;ue<re.length;++ue)re[ue]=H[ue%Z];else H!==0&&re.fill(H);const[te,le]=O?[Math.floor((Q-z)/2),Math.floor((Y-G)/2)]:[0,0];for(let ue=0;ue<G;++ue){const B=(ue+le)*Q,F=ue*z;for(let K=0;K<z;++K){const j=(B+K+te)*Z,ie=(F+K)*Z;for(let ke=0;ke<Z;++ke)re[j+ke]=E[ie+ke]}}if(D==="symmetric"){if(O)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const ue=G-1,B=z-1;for(let F=0;F<Y;++F){const K=F*Q,j=(0,a.calculateReflectOffset)(F,ue)*z;for(let ie=0;ie<Q;++ie){if(F<G&&ie<z)continue;const ke=(K+ie)*Z,be=(j+(0,a.calculateReflectOffset)(ie,B))*Z;for(let Fe=0;Fe<Z;++Fe)re[ke+Fe]=E[be+Fe]}}}E=re,b=[Y,Q,Z]}return[E,b]}rescale(E){for(let b=0;b<E.length;++b)E[b]=this.rescale_factor*E[b]}get_resize_output_image_size(E,b){const[S,D]=E.size;let O,H;if(this.do_thumbnail){const{height:G,width:z}=b;O=Math.min(G,z)}else Number.isInteger(b)?(O=b,H=this.config.max_size??O):b!==void 0&&(O=b.shortest_edge,H=b.longest_edge);if(O!==void 0||H!==void 0){const G=O===void 0?1:Math.max(O/S,O/D),z=S*G,Z=D*G,Q=H===void 0?1:Math.min(H/z,H/Z);let Y=Math.floor(Number((z*Q).toFixed(2))),re=Math.floor(Number((Z*Q).toFixed(2)));return this.size_divisibility!==void 0&&([Y,re]=p([Y,re],this.size_divisibility)),[Y,re]}else if(b!==void 0&&b.width!==void 0&&b.height!==void 0){let G=b.width,z=b.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let Z=z/D,Q=G/S;Math.abs(1-Q)<Math.abs(1-Z)?Z=Q:Q=Z,z=c(Z*D,this.config.ensure_multiple_of),G=c(Q*S,this.config.ensure_multiple_of)}return[G,z]}else{if(this.size_divisibility!==void 0)return p([S,D],this.size_divisibility);if(this.min_pixels!==void 0&&this.max_pixels!==void 0){const G=this.config.patch_size*this.config.merge_size;return M(D,S,G,this.min_pixels,this.max_pixels)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(b)}`)}}async resize(E){const[b,S]=this.get_resize_output_image_size(E,this.size);return await E.resize(b,S,{resample:this.resample})}async preprocess(E,{do_normalize:b=null,do_pad:S=null,do_convert_rgb:D=null,do_convert_grayscale:O=null,do_flip_channel_order:H=null}={}){this.do_crop_margin&&(E=await this.crop_margin(E));const[G,z]=E.size;if(D??this.do_convert_rgb?E=E.rgb():O&&(E=E.grayscale()),this.do_resize&&(E=await this.resize(E)),this.do_thumbnail&&(E=await this.thumbnail(E,this.size,this.resample)),this.do_center_crop){let te,le;Number.isInteger(this.crop_size)?(te=this.crop_size,le=this.crop_size):(te=this.crop_size.width,le=this.crop_size.height),E=await E.center_crop(te,le)}const Z=[E.height,E.width];let Q=Float32Array.from(E.data),Y=[E.height,E.width,E.channels];if(this.do_rescale&&this.rescale(Q),b??this.do_normalize){let te=this.image_mean;Array.isArray(this.image_mean)||(te=new Array(E.channels).fill(te));let le=this.image_std;if(Array.isArray(this.image_std)||(le=new Array(E.channels).fill(te)),te.length!==E.channels||le.length!==E.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${te.length}) and \`image_std\` (${le.length}) must match the number of channels in the image (${E.channels}).`);for(let ue=0;ue<Q.length;ue+=E.channels)for(let B=0;B<E.channels;++B)Q[ue+B]=(Q[ue+B]-te[B])/le[B]}if(S??this.do_pad){if(this.pad_size)[Q,Y]=this.pad_image(Q,[E.height,E.width,E.channels],this.pad_size);else if(this.size_divisibility){const[te,le]=p([Y[1],Y[0]],this.size_divisibility);[Q,Y]=this.pad_image(Q,Y,{width:te,height:le})}}if(H??this.do_flip_channel_order){if(Y[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let te=0;te<Q.length;te+=3){const le=Q[te];Q[te]=Q[te+2],Q[te+2]=le}}const re=new n.Tensor("float32",Q,Y).permute(2,0,1);return{original_size:[z,G],reshaped_input_size:Z,pixel_values:re}}async _call(E,...b){Array.isArray(E)||(E=[E]);const S=await Promise.all(E.map(O=>this.preprocess(O)));return{pixel_values:(0,n.stack)(S.map(O=>O.pixel_values),0),original_sizes:S.map(O=>O.original_size),reshaped_input_sizes:S.map(O=>O.reshaped_input_size)}}static async from_pretrained(E,b={}){const S=await(0,i.getModelJSON)(E,l.IMAGE_PROCESSOR_NAME,!0,b);return new this(S)}}}),"./src/base/processing_utils.js":((e,r,t)=>{t.r(r),t.d(r,{Processor:()=>a});var s=t("./src/utils/constants.js"),n=t("./src/utils/generic.js"),o=t("./src/utils/hub.js");class a extends n.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;static uses_chat_template_file=!1;constructor(l,c,p){super(),this.config=l,this.components=c,this.chat_template=p}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(l,c={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(l,{tokenize:!1,chat_template:this.chat_template??void 0,...c})}batch_decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...l)}decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...l)}async _call(l,...c){for(const p of[this.image_processor,this.feature_extractor,this.tokenizer])if(p)return p(l,...c);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(l,c={}){const[p,d,u]=await Promise.all([this.uses_processor_config?(0,o.getModelJSON)(l,s.PROCESSOR_NAME,!0,c):{},Promise.all(this.classes.filter(f=>f in this).map(async f=>{const _=await this[f].from_pretrained(l,c);return[f.replace(/_class$/,""),_]})).then(Object.fromEntries),this.uses_chat_template_file?(0,o.getModelText)(l,s.CHAT_TEMPLATE_NAME,!0,c):null]);return new this(p,d,u)}}}),"./src/configs.js":((e,r,t)=>{t.r(r),t.d(r,{AutoConfig:()=>p,PretrainedConfig:()=>c,getCacheShapes:()=>i});var s=t("./src/utils/core.js"),n=t("./src/utils/hub.js");async function o(d,u){return await(0,n.getModelJSON)(d,"config.json",!0,u)}function a(d){const u={};let f={};switch(d.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"voxtral":case"smolvlm":case"gemma3n":f=a(d.text_config);break;case"moondream1":f=a(d.phi_config);break;case"musicgen":f=a(d.decoder);break;case"multi_modality":f=a(d.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":u.num_heads="n_head",u.num_layers="n_layer",u.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":case"modernbert-decoder":u.num_heads="num_attention_heads",u.num_layers="num_hidden_layers",u.hidden_size="hidden_size";break;case"llama":case"llama4_text":case"arcee":case"lfm2":case"smollm3":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":case"llava_qwen2":u.num_heads="num_key_value_heads",u.num_layers="num_hidden_layers",u.hidden_size="hidden_size",u.num_attention_heads="num_attention_heads",u.dim_kv="head_dim";break;case"qwen3":case"gemma":case"gemma2":case"vaultgemma":case"gemma3_text":case"gemma3n_text":case"glm":case"helium":case"ernie4_5":u.num_heads="num_key_value_heads",u.num_layers="num_hidden_layers",u.dim_kv="head_dim";break;case"openelm":u.num_heads="num_kv_heads",u.num_layers="num_transformer_layers",u.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":u.num_heads="num_heads",u.num_layers="num_layers",u.hidden_size="hidden_size";break;case"bloom":u.num_heads="n_head",u.num_layers="n_layer",u.hidden_size="hidden_size";break;case"mpt":u.num_heads="n_heads",u.num_layers="n_layers",u.hidden_size="d_model";break;case"exaone":u.num_heads="num_key_value_heads",u.num_layers="num_layers",u.dim_kv="head_dim",u.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":u.num_decoder_layers="num_decoder_layers",u.num_decoder_heads="num_heads",u.decoder_dim_kv="d_kv",u.num_encoder_layers="num_layers",u.num_encoder_heads="num_heads",u.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":u.num_decoder_layers="decoder_layers",u.num_decoder_heads="decoder_attention_heads",u.decoder_hidden_size="d_model",u.num_encoder_layers="encoder_layers",u.num_encoder_heads="encoder_attention_heads",u.encoder_hidden_size="d_model";break;case"speecht5":u.num_decoder_layers="decoder_layers",u.num_decoder_heads="decoder_attention_heads",u.decoder_hidden_size="hidden_size",u.num_encoder_layers="encoder_layers",u.num_encoder_heads="encoder_attention_heads",u.encoder_hidden_size="hidden_size";break;case"trocr":u.num_encoder_layers=u.num_decoder_layers="decoder_layers",u.num_encoder_heads=u.num_decoder_heads="decoder_attention_heads",u.encoder_hidden_size=u.decoder_hidden_size="d_model";break;case"musicgen_decoder":u.num_encoder_layers=u.num_decoder_layers="num_hidden_layers",u.num_encoder_heads=u.num_decoder_heads="num_attention_heads",u.encoder_hidden_size=u.decoder_hidden_size="hidden_size";break;case"moonshine":u.num_decoder_layers="decoder_num_hidden_layers",u.num_decoder_heads="decoder_num_key_value_heads",u.num_encoder_layers="encoder_num_hidden_layers",u.num_encoder_heads="encoder_num_key_value_heads",u.encoder_hidden_size=u.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const v=a(d.decoder),I="num_decoder_layers"in v,M=(0,s.pick)(d,["model_type","is_encoder_decoder"]);return I?(M.num_decoder_layers=v.num_decoder_layers,M.num_decoder_heads=v.num_decoder_heads,M.decoder_hidden_size=v.decoder_hidden_size,M.num_encoder_layers=v.num_encoder_layers,M.num_encoder_heads=v.num_encoder_heads,M.encoder_hidden_size=v.encoder_hidden_size):(M.num_layers=v.num_layers,M.num_heads=v.num_heads,M.hidden_size=v.hidden_size),M}const _={...f,...(0,s.pick)(d,["model_type","multi_query","is_encoder_decoder"])};for(const v in u)_[v]=d[u[v]];return _}function i(d,u){if(d.model_type==="lfm2"){const f=u?.prefix??"past_key_values",_=f==="present"?"present":"past",v={},{layer_types:I,num_attention_heads:M,num_key_value_heads:y,hidden_size:$,conv_L_cache:x}=d,T=$/M,E=u?.batch_size??1;for(let b=0;b<I.length;++b)if(I[b]==="full_attention")for(const S of["key","value"])v[`${f}.${b}.${S}`]=[E,y,0,T];else if(I[b]==="conv")v[`${_}_conv.${b}`]=[E,$,x];else throw new Error(`Unsupported layer type: ${I[b]}`);return v}return l(d,u)}function l(d,{prefix:u="past_key_values",batch_size:f=1}={}){const _={},v=d.normalized_config;if(v.is_encoder_decoder&&"num_encoder_heads"in v&&"num_decoder_heads"in v){const I=v.encoder_dim_kv??v.encoder_hidden_size/v.num_encoder_heads,M=v.decoder_dim_kv??v.decoder_hidden_size/v.num_decoder_heads,y=[f,v.num_encoder_heads,0,I],$=[f,v.num_decoder_heads,0,M];for(let x=0;x<v.num_decoder_layers;++x)_[`${u}.${x}.encoder.key`]=y,_[`${u}.${x}.encoder.value`]=y,_[`${u}.${x}.decoder.key`]=$,_[`${u}.${x}.decoder.value`]=$}else{const I=v.num_heads,M=v.num_layers,y=v.dim_kv??v.hidden_size/(v.num_attention_heads??I);if(v.model_type==="falcon"){const $=[f*I,0,y];for(let x=0;x<M;++x)_[`${u}.${x}.key`]=$,_[`${u}.${x}.value`]=$}else if(v.multi_query){const $=[f*I,0,2*y];for(let x=0;x<M;++x)_[`${u}.${x}.key_value`]=$}else if(v.model_type==="bloom"){const $=[f*I,y,0],x=[f*I,0,y];for(let T=0;T<M;++T)_[`${u}.${T}.key`]=$,_[`${u}.${T}.value`]=x}else if(v.model_type==="openelm")for(let $=0;$<M;++$){const x=[f,I[$],0,y];_[`${u}.${$}.key`]=x,_[`${u}.${$}.value`]=x}else{const $=[f,I,0,y];for(let x=0;x<M;++x)_[`${u}.${x}.key`]=$,_[`${u}.${x}.value`]=$}}return _}class c{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(u){Object.assign(this,u),this.normalized_config=a(this)}static async from_pretrained(u,{progress_callback:f=null,config:_=null,cache_dir:v=null,local_files_only:I=!1,revision:M="main"}={}){_&&!(_ instanceof c)&&(_=new c(_));const y=_??await o(u,{progress_callback:f,config:_,cache_dir:v,local_files_only:I,revision:M});return new this(y)}}class p{static async from_pretrained(...u){return c.from_pretrained(...u)}}}),"./src/env.js":((e,r,t)=>{t.r(r),t.d(r,{apis:()=>M,env:()=>b});var s=t("?db59"),n=t("?383f"),o=t("?fa4b");const a="3.7.3",i=typeof window<"u"&&typeof window.document<"u",l=typeof self<"u"&&["DedicatedWorkerGlobalScope","ServiceWorkerGlobalScope","SharedWorkerGlobalScope"].includes(self.constructor?.name),c=typeof self<"u"&&"caches"in self,p=typeof navigator<"u"&&"gpu"in navigator,d=typeof navigator<"u"&&"ml"in navigator,u=typeof process<"u",f=u&&process?.release?.name==="node",_=!S(s),v=!S(n),I=typeof globalThis.Deno<"u",M=Object.freeze({IS_BROWSER_ENV:i,IS_WEBWORKER_ENV:l,IS_WEB_CACHE_AVAILABLE:c,IS_WEBGPU_AVAILABLE:p,IS_WEBNN_AVAILABLE:d,IS_PROCESS_AVAILABLE:u,IS_NODE_ENV:f,IS_FS_AVAILABLE:_,IS_PATH_AVAILABLE:v}),y=_&&v;let $="./";if(y){const D=Object(import.meta).url;D?$=n.dirname(n.dirname(o.fileURLToPath(D))):typeof __dirname<"u"&&($=n.dirname(__dirname))}const x=y?n.join($,"/.cache/"):null,T="/models/",E=y?n.join($,T):T,b={version:a,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(i||l),localModelPath:E,useFS:_,useBrowserCache:c&&!I,useFSCache:_,cacheDir:x,useCustomCache:!1,customCache:null};function S(D){return Object.keys(D).length===0}}),"./src/generation/configuration_utils.js":((e,r,t)=>{t.r(r),t.d(r,{GenerationConfig:()=>n});var s=t("./src/utils/core.js");class n{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(a){Object.assign(this,(0,s.pick)(a,Object.getOwnPropertyNames(this)))}}}),"./src/generation/logits_process.js":((e,r,t)=>{t.r(r),t.d(r,{ClassifierFreeGuidanceLogitsProcessor:()=>M,ForcedBOSTokenLogitsProcessor:()=>l,ForcedEOSTokenLogitsProcessor:()=>c,LogitsProcessor:()=>o,LogitsProcessorList:()=>i,LogitsWarper:()=>a,MinLengthLogitsProcessor:()=>_,MinNewTokensLengthLogitsProcessor:()=>v,NoBadWordsLogitsProcessor:()=>I,NoRepeatNGramLogitsProcessor:()=>u,RepetitionPenaltyLogitsProcessor:()=>f,SuppressTokensAtBeginLogitsProcessor:()=>p,TemperatureLogitsWarper:()=>y,TopKLogitsWarper:()=>x,TopPLogitsWarper:()=>$,WhisperTimeStampLogitsProcessor:()=>d});var s=t("./src/utils/generic.js");t("./src/utils/tensor.js");var n=t("./src/utils/maths.js");class o extends s.Callable{_call(E,b){throw Error("`_call` should be implemented in a subclass")}}class a extends s.Callable{_call(E,b){throw Error("`_call` should be implemented in a subclass")}}class i extends s.Callable{constructor(){super(),this.processors=[]}push(E){this.processors.push(E)}extend(E){this.processors.push(...E)}_call(E,b){let S=b;for(const D of this.processors)S=D(E,S);return S}[Symbol.iterator](){return this.processors.values()}}class l extends o{constructor(E){super(),this.bos_token_id=E}_call(E,b){for(let S=0;S<E.length;++S)if(E[S].length===1){const D=b[S].data;D.fill(-1/0),D[this.bos_token_id]=0}return b}}class c extends o{constructor(E,b){super(),this.max_length=E,this.eos_token_id=Array.isArray(b)?b:[b]}_call(E,b){for(let S=0;S<E.length;++S)if(E[S].length===this.max_length-1){const D=b[S].data;D.fill(-1/0);for(const O of this.eos_token_id)D[O]=0}return b}}class p extends o{constructor(E,b){super(),this.begin_suppress_tokens=E,this.begin_index=b}_call(E,b){for(let S=0;S<E.length;++S)if(E[S].length===this.begin_index){const D=b[S].data;for(const O of this.begin_suppress_tokens)D[O]=-1/0}return b}}class d extends o{constructor(E,b){super(),this.eos_token_id=Array.isArray(E.eos_token_id)?E.eos_token_id[0]:E.eos_token_id,this.no_timestamps_token_id=E.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=b.length,b.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=E.max_initial_timestamp_index}_call(E,b){for(let S=0;S<E.length;++S){const D=b[S].data;if(D[this.no_timestamps_token_id]=-1/0,E[S].length===this.begin_index-1){D.fill(-1/0),D[this.timestamp_begin]=0;continue}const O=E[S].slice(this.begin_index),H=O.length>=1&&O[O.length-1]>=this.timestamp_begin,G=O.length<2||O[O.length-2]>=this.timestamp_begin;if(H&&(G?D.subarray(this.timestamp_begin).fill(-1/0):D.subarray(0,this.eos_token_id).fill(-1/0)),E[S].length===this.begin_index&&this.max_initial_timestamp_index!==null){const Y=this.timestamp_begin+this.max_initial_timestamp_index;D.subarray(Y+1).fill(-1/0)}const z=(0,n.log_softmax)(D),Z=Math.log(z.subarray(this.timestamp_begin).map(Math.exp).reduce((Y,re)=>Y+re)),Q=(0,n.max)(z.subarray(0,this.timestamp_begin))[0];Z>Q&&D.subarray(0,this.timestamp_begin).fill(-1/0)}return b}}class u extends o{constructor(E){super(),this.no_repeat_ngram_size=E}getNgrams(E){const b=E.length,S=[];for(let O=0;O<b+1-this.no_repeat_ngram_size;++O){const H=[];for(let G=0;G<this.no_repeat_ngram_size;++G)H.push(E[O+G]);S.push(H.map(Number))}const D=new Map;for(const O of S){const H=O.slice(0,O.length-1),G=JSON.stringify(H),z=D.get(G)??[];z.push(O[O.length-1]),D.set(G,z)}return D}getGeneratedNgrams(E,b){const S=b.slice(b.length+1-this.no_repeat_ngram_size,b.length);return E.get(JSON.stringify(S.map(Number)))??[]}calcBannedNgramTokens(E){const b=[];if(E.length+1<this.no_repeat_ngram_size)return b;{const S=this.getNgrams(E);return this.getGeneratedNgrams(S,E)}}_call(E,b){for(let S=0;S<E.length;++S){const D=b[S].data,O=this.calcBannedNgramTokens(E[S]);for(const H of O)D[H]=-1/0}return b}}class f extends o{constructor(E){super(),this.penalty=E}_call(E,b){for(let S=0;S<E.length;++S){const D=b[S].data;for(const O of new Set(E[S])){const H=Number(O);D[H]<0?D[H]*=this.penalty:D[H]/=this.penalty}}return b}}class _ extends o{constructor(E,b){super(),this.min_length=E,this.eos_token_id=Array.isArray(b)?b:[b]}_call(E,b){for(let S=0;S<E.length;++S)if(E[S].length<this.min_length){const D=b[S].data;for(const O of this.eos_token_id)D[O]=-1/0}return b}}class v extends o{constructor(E,b,S){super(),this.prompt_length_to_skip=E,this.min_new_tokens=b,this.eos_token_id=Array.isArray(S)?S:[S]}_call(E,b){for(let S=0;S<E.length;++S)if(E[S].length-this.prompt_length_to_skip<this.min_new_tokens){const O=b[S].data;for(const H of this.eos_token_id)O[H]=-1/0}return b}}class I extends o{constructor(E,b){super(),this.bad_words_ids=E,this.eos_token_id=Array.isArray(b)?b:[b]}_call(E,b){for(let S=0;S<E.length;++S){const D=b[S].data,O=E[S];for(const H of this.bad_words_ids){if(O.length<H.length-1)continue;let G=!0;for(let z=1;z<=H.length-1;++z)if(H.at(-z-1)!=O.at(-z)){G=!1;break}G&&(D[H.at(-1)]=-1/0)}}return b}}class M extends o{constructor(E){if(super(),E<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${E}.`);this.guidance_scale=E}_call(E,b){if(b.dims[0]!==2*E.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${b.dims[0]} for the logits and ${E.length} for the input ids.`);const S=E.length,D=b.slice([0,S],null),O=b.slice([S,b.dims[0]],null);for(let H=0;H<O.data.length;++H)O.data[H]+=(D.data[H]-O.data[H])*this.guidance_scale;return O}}class y extends a{constructor(E){super(),this.temperature=E}_call(E,b){const S=b.data;for(let D=0;D<S.length;++D)S[D]/=this.temperature;return b}}class $ extends a{constructor(E,{filter_value:b=-1/0,min_tokens_to_keep:S=1}={}){if(super(),E<0||E>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${E}`);if(!Number.isInteger(S)||S<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${S}`);this.top_p=E,this.filter_value=b,this.min_tokens_to_keep=S}}class x extends a{constructor(E,{filter_value:b=-1/0,min_tokens_to_keep:S=1}={}){if(super(),!Number.isInteger(E)||E<0)throw new Error(`\`top_k\` must be a positive integer, but is ${E}`);this.top_k=Math.max(E,S),this.filter_value=b}}}),"./src/generation/logits_sampler.js":((e,r,t)=>{t.r(r),t.d(r,{LogitsSampler:()=>a});var s=t("./src/utils/generic.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/maths.js");t("./src/generation/configuration_utils.js");class a extends s.Callable{constructor(d){super(),this.generation_config=d}async _call(d){return this.sample(d)}async sample(d){throw Error("sample should be implemented in subclasses.")}getLogits(d,u){let f=d.dims.at(-1),_=d.data;if(u===-1)_=_.slice(-f);else{let v=u*f;_=_.slice(v,v+f)}return _}randomSelect(d){let u=0;for(let _=0;_<d.length;++_)u+=d[_];let f=Math.random()*u;for(let _=0;_<d.length;++_)if(f-=d[_],f<=0)return _;return 0}static getSampler(d){if(d.do_sample)return new l(d);if(d.num_beams>1)return new c(d);if(d.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${d.num_return_sequences}.`);return new i(d)}}class i extends a{async sample(d){const u=(0,o.max)(d.data)[1];return[[BigInt(u),0]]}}class l extends a{async sample(d){let u=d.dims.at(-1);this.generation_config.top_k>0&&(u=Math.min(this.generation_config.top_k,u));const[f,_]=await(0,n.topk)(d,u),v=(0,o.softmax)(f.data);return Array.from({length:this.generation_config.num_beams},()=>{const I=this.randomSelect(v);return[_.data[I],Math.log(v[I])]})}}class c extends a{async sample(d){let u=d.dims.at(-1);this.generation_config.top_k>0&&(u=Math.min(this.generation_config.top_k,u));const[f,_]=await(0,n.topk)(d,u),v=(0,o.softmax)(f.data);return Array.from({length:this.generation_config.num_beams},(I,M)=>[_.data[M],Math.log(v[M])])}}}),"./src/generation/stopping_criteria.js":((e,r,t)=>{t.r(r),t.d(r,{EosTokenCriteria:()=>i,InterruptableStoppingCriteria:()=>l,MaxLengthCriteria:()=>a,StoppingCriteria:()=>n,StoppingCriteriaList:()=>o});var s=t("./src/utils/generic.js");class n extends s.Callable{_call(p,d){throw Error("StoppingCriteria needs to be subclassed")}}class o extends s.Callable{constructor(){super(),this.criteria=[]}push(p){this.criteria.push(p)}extend(p){p instanceof o?p=p.criteria:p instanceof n&&(p=[p]),this.criteria.push(...p)}_call(p,d){const u=new Array(p.length).fill(!1);for(const f of this.criteria){const _=f(p,d);for(let v=0;v<u.length;++v)u[v]||=_[v]}return u}[Symbol.iterator](){return this.criteria.values()}}class a extends n{constructor(p,d=null){super(),this.max_length=p,this.max_position_embeddings=d}_call(p){return p.map(d=>d.length>=this.max_length)}}class i extends n{constructor(p){super(),Array.isArray(p)||(p=[p]),this.eos_token_id=p}_call(p,d){return p.map(u=>{const f=u.at(-1);return this.eos_token_id.some(_=>f==_)})}}class l extends n{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(p,d){return new Array(p.length).fill(this.interrupted)}}}),"./src/generation/streamers.js":((e,r,t)=>{t.r(r),t.d(r,{BaseStreamer:()=>a,TextStreamer:()=>l,WhisperTextStreamer:()=>c});var s=t("./src/utils/core.js"),n=t("./src/tokenizers.js"),o=t("./src/env.js");class a{put(d){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const i=o.apis.IS_PROCESS_AVAILABLE?p=>process.stdout.write(p):p=>console.log(p);class l extends a{constructor(d,{skip_prompt:u=!1,callback_function:f=null,token_callback_function:_=null,skip_special_tokens:v=!0,decode_kwargs:I={},...M}={}){super(),this.tokenizer=d,this.skip_prompt=u,this.callback_function=f??i,this.token_callback_function=_,this.decode_kwargs={skip_special_tokens:v,...I,...M},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(d){if(d.length>1)throw Error("TextStreamer only supports batch size of 1");const u=this.next_tokens_are_prompt;if(u&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const f=d[0];this.token_callback_function?.(f),this.token_cache=(0,s.mergeArrays)(this.token_cache,f);const _=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let v;u||_.endsWith(`
`)?(v=_.slice(this.print_len),this.token_cache=[],this.print_len=0):_.length>0&&(0,n.is_chinese_char)(_.charCodeAt(_.length-1))?(v=_.slice(this.print_len),this.print_len+=v.length):(v=_.slice(this.print_len,_.lastIndexOf(" ")+1),this.print_len+=v.length),this.on_finalized_text(v,!1)}end(){let d;this.token_cache.length>0?(d=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):d="",this.next_tokens_are_prompt=!0,this.on_finalized_text(d,!0)}on_finalized_text(d,u){d.length>0&&this.callback_function?.(d),u&&this.callback_function===i&&o.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class c extends l{constructor(d,{skip_prompt:u=!1,callback_function:f=null,token_callback_function:_=null,on_chunk_start:v=null,on_chunk_end:I=null,on_finalize:M=null,time_precision:y=.02,skip_special_tokens:$=!0,decode_kwargs:x={}}={}){super(d,{skip_prompt:u,skip_special_tokens:$,callback_function:f,token_callback_function:_,decode_kwargs:x}),this.timestamp_begin=d.timestamp_begin,this.on_chunk_start=v,this.on_chunk_end=I,this.on_finalize=M,this.time_precision=y,this.waiting_for_timestamp=!1}put(d){if(d.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const u=d[0];if(u.length===1){const f=Number(u[0])-this.timestamp_begin;if(f>=0){const _=f*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(_):this.on_chunk_start?.(_),this.waiting_for_timestamp=!this.waiting_for_timestamp,this.token_callback_function?.(u);return}}return super.put(d)}end(){super.end(),this.on_finalize?.()}}}),"./src/models.js":((e,r,t)=>{t.r(r),t.d(r,{ASTForAudioClassification:()=>co,ASTModel:()=>lo,ASTPreTrainedModel:()=>ao,AlbertForMaskedLM:()=>Ue,AlbertForQuestionAnswering:()=>Je,AlbertForSequenceClassification:()=>Qe,AlbertModel:()=>qe,AlbertPreTrainedModel:()=>Pe,ArceeForCausalLM:()=>Rs,ArceeModel:()=>Tr,ArceePreTrainedModel:()=>Lt,AutoModel:()=>tv,AutoModelForAudioClassification:()=>bv,AutoModelForAudioFrameClassification:()=>vv,AutoModelForAudioTextToText:()=>Iv,AutoModelForCTC:()=>Mv,AutoModelForCausalLM:()=>lv,AutoModelForDepthEstimation:()=>Pv,AutoModelForDocumentQuestionAnswering:()=>xv,AutoModelForImageClassification:()=>pv,AutoModelForImageFeatureExtraction:()=>$v,AutoModelForImageMatting:()=>Tv,AutoModelForImageSegmentation:()=>mv,AutoModelForImageTextToText:()=>kv,AutoModelForImageToImage:()=>Ev,AutoModelForMaskGeneration:()=>wv,AutoModelForMaskedLM:()=>cv,AutoModelForNormalEstimation:()=>Cv,AutoModelForObjectDetection:()=>fv,AutoModelForPoseEstimation:()=>Sv,AutoModelForQuestionAnswering:()=>uv,AutoModelForSemanticSegmentation:()=>hv,AutoModelForSeq2SeqLM:()=>nv,AutoModelForSequenceClassification:()=>rv,AutoModelForSpeechSeq2Seq:()=>ov,AutoModelForTextToSpectrogram:()=>iv,AutoModelForTextToWaveform:()=>av,AutoModelForTokenClassification:()=>sv,AutoModelForUniversalSegmentation:()=>_v,AutoModelForVision2Seq:()=>dv,AutoModelForXVector:()=>yv,AutoModelForZeroShotObjectDetection:()=>gv,BartForConditionalGeneration:()=>Jt,BartForSequenceClassification:()=>dr,BartModel:()=>ps,BartPretrainedModel:()=>xr,BaseModelOutput:()=>xe,BeitForImageClassification:()=>Kd,BeitModel:()=>Gd,BeitPreTrainedModel:()=>Na,BertForMaskedLM:()=>fe,BertForQuestionAnswering:()=>Ae,BertForSequenceClassification:()=>Ee,BertForTokenClassification:()=>ge,BertModel:()=>ye,BertPreTrainedModel:()=>$e,BlenderbotForConditionalGeneration:()=>pr,BlenderbotModel:()=>Yt,BlenderbotPreTrainedModel:()=>gr,BlenderbotSmallForConditionalGeneration:()=>Gs,BlenderbotSmallModel:()=>Vr,BlenderbotSmallPreTrainedModel:()=>nr,BloomForCausalLM:()=>hd,BloomModel:()=>md,BloomPreTrainedModel:()=>$a,CLIPModel:()=>_o,CLIPPreTrainedModel:()=>As,CLIPSegForImageSegmentation:()=>vo,CLIPSegModel:()=>Ln,CLIPSegPreTrainedModel:()=>qs,CLIPTextModel:()=>gi,CLIPTextModelWithProjection:()=>fo,CLIPVisionModel:()=>wi,CLIPVisionModelWithProjection:()=>go,CamembertForMaskedLM:()=>lt,CamembertForQuestionAnswering:()=>$t,CamembertForSequenceClassification:()=>We,CamembertForTokenClassification:()=>St,CamembertModel:()=>tt,CamembertPreTrainedModel:()=>Se,CausalLMOutput:()=>pn,CausalLMOutputWithPast:()=>Fv,ChineseCLIPModel:()=>Mi,ChineseCLIPPreTrainedModel:()=>ut,ClapAudioModelWithProjection:()=>Ym,ClapModel:()=>Xm,ClapPreTrainedModel:()=>Pi,ClapTextModelWithProjection:()=>Jm,CodeGenForCausalLM:()=>Te,CodeGenModel:()=>ae,CodeGenPreTrainedModel:()=>U,CohereForCausalLM:()=>Ku,CohereModel:()=>Gu,CoherePreTrainedModel:()=>Ma,ConvBertForMaskedLM:()=>Ps,ConvBertForQuestionAnswering:()=>Cs,ConvBertForSequenceClassification:()=>Ut,ConvBertForTokenClassification:()=>Tt,ConvBertModel:()=>pt,ConvBertPreTrainedModel:()=>Qr,ConvNextForImageClassification:()=>jp,ConvNextModel:()=>Rp,ConvNextPreTrainedModel:()=>rl,ConvNextV2ForImageClassification:()=>Vp,ConvNextV2Model:()=>Np,ConvNextV2PreTrainedModel:()=>sl,DFineForObjectDetection:()=>op,DFineModel:()=>np,DFinePreTrainedModel:()=>Ha,DINOv3ConvNextModel:()=>Xp,DINOv3ConvNextPreTrainedModel:()=>Qp,DINOv3ViTModel:()=>qp,DINOv3ViTPreTrainedModel:()=>Hp,DPTForDepthEstimation:()=>yp,DPTModel:()=>bp,DPTPreTrainedModel:()=>Za,DacDecoderModel:()=>jh,DacDecoderOutput:()=>zh,DacEncoderModel:()=>Rh,DacEncoderOutput:()=>Lh,DacModel:()=>Bh,DacPreTrainedModel:()=>Fi,DebertaForMaskedLM:()=>cr,DebertaForQuestionAnswering:()=>hr,DebertaForSequenceClassification:()=>Kr,DebertaForTokenClassification:()=>Ht,DebertaModel:()=>Wt,DebertaPreTrainedModel:()=>er,DebertaV2ForMaskedLM:()=>us,DebertaV2ForQuestionAnswering:()=>Ss,DebertaV2ForSequenceClassification:()=>ds,DebertaV2ForTokenClassification:()=>Br,DebertaV2Model:()=>Ar,DebertaV2PreTrainedModel:()=>zr,DecisionTransformerModel:()=>Mh,DecisionTransformerPreTrainedModel:()=>wh,DeiTForImageClassification:()=>up,DeiTModel:()=>cp,DeiTPreTrainedModel:()=>Qa,DepthAnythingForDepthEstimation:()=>xp,DepthAnythingPreTrainedModel:()=>vp,DepthProForDepthEstimation:()=>Sp,DepthProPreTrainedModel:()=>Cp,DetrForObjectDetection:()=>qd,DetrForSegmentation:()=>Va,DetrModel:()=>Hd,DetrObjectDetectionOutput:()=>Ua,DetrPreTrainedModel:()=>bi,DetrSegmentationOutput:()=>Qd,Dinov2ForImageClassification:()=>Wp,Dinov2Model:()=>Up,Dinov2PreTrainedModel:()=>nl,Dinov2WithRegistersForImageClassification:()=>Kp,Dinov2WithRegistersModel:()=>Gp,Dinov2WithRegistersPreTrainedModel:()=>ol,DistilBertForMaskedLM:()=>ss,DistilBertForQuestionAnswering:()=>vr,DistilBertForSequenceClassification:()=>Hr,DistilBertForTokenClassification:()=>ur,DistilBertModel:()=>yr,DistilBertPreTrainedModel:()=>Nr,DonutSwinModel:()=>Bp,DonutSwinPreTrainedModel:()=>zp,EfficientNetForImageClassification:()=>oh,EfficientNetModel:()=>nh,EfficientNetPreTrainedModel:()=>fl,ElectraForMaskedLM:()=>V,ElectraForQuestionAnswering:()=>me,ElectraForSequenceClassification:()=>J,ElectraForTokenClassification:()=>ne,ElectraModel:()=>X,ElectraPreTrainedModel:()=>C,Ernie4_5_ForCausalLM:()=>Gm,Ernie4_5_Model:()=>Wm,Ernie4_5_PretrainedModel:()=>dl,EsmForMaskedLM:()=>Ds,EsmForSequenceClassification:()=>Rr,EsmForTokenClassification:()=>Le,EsmModel:()=>$s,EsmPreTrainedModel:()=>Xr,ExaoneForCausalLM:()=>Lu,ExaoneModel:()=>Du,ExaonePreTrainedModel:()=>ha,FalconForCausalLM:()=>Qm,FalconModel:()=>qm,FalconPreTrainedModel:()=>ml,FastViTForImageClassification:()=>Od,FastViTModel:()=>Fd,FastViTPreTrainedModel:()=>La,Florence2ForConditionalGeneration:()=>mi,Florence2PreTrainedModel:()=>pi,GLPNForDepthEstimation:()=>Lp,GLPNModel:()=>Dp,GLPNPreTrainedModel:()=>tl,GPT2LMHeadModel:()=>Bn,GPT2Model:()=>xo,GPT2PreTrainedModel:()=>zn,GPTBigCodeForCausalLM:()=>L,GPTBigCodeModel:()=>A,GPTBigCodePreTrainedModel:()=>P,GPTJForCausalLM:()=>m,GPTJModel:()=>So,GPTJPreTrainedModel:()=>Un,GPTNeoForCausalLM:()=>Nn,GPTNeoModel:()=>jn,GPTNeoPreTrainedModel:()=>Qs,GPTNeoXForCausalLM:()=>Co,GPTNeoXModel:()=>Po,GPTNeoXPreTrainedModel:()=>Vn,Gemma2ForCausalLM:()=>Xu,Gemma2Model:()=>Qu,Gemma2PreTrainedModel:()=>ya,Gemma3ForCausalLM:()=>ed,Gemma3Model:()=>Zu,Gemma3PreTrainedModel:()=>xa,Gemma3nForConditionalGeneration:()=>Bs,Gemma3nPreTrainedModel:()=>an,GemmaForCausalLM:()=>qu,GemmaModel:()=>Hu,GemmaPreTrainedModel:()=>ba,GlmForCausalLM:()=>Ou,GlmModel:()=>Fu,GlmPreTrainedModel:()=>ma,GraniteForCausalLM:()=>Wu,GraniteModel:()=>Uu,GranitePreTrainedModel:()=>wa,GroundingDinoForObjectDetection:()=>Yp,GroundingDinoPreTrainedModel:()=>Jp,GroupViTModel:()=>Ad,GroupViTPreTrainedModel:()=>Id,HeliumForCausalLM:()=>Au,HeliumModel:()=>Iu,HeliumPreTrainedModel:()=>pa,HieraForImageClassification:()=>pp,HieraModel:()=>dp,HieraPreTrainedModel:()=>Xa,HubertForCTC:()=>Sm,HubertForSequenceClassification:()=>$m,HubertModel:()=>Cm,HubertPreTrainedModel:()=>V0,IJepaForImageClassification:()=>vd,IJepaModel:()=>yd,IJepaPreTrainedModel:()=>Fa,Idefics3ForConditionalGeneration:()=>On,Idefics3PreTrainedModel:()=>mo,ImageMattingOutput:()=>g_,JAISLMHeadModel:()=>Eo,JAISModel:()=>To,JAISPreTrainedModel:()=>Rn,JinaCLIPModel:()=>yo,JinaCLIPPreTrainedModel:()=>un,JinaCLIPTextModel:()=>dn,JinaCLIPVisionModel:()=>Zr,Lfm2ForCausalLM:()=>Su,Lfm2Model:()=>Cu,Lfm2PreTrainedModel:()=>$o,LiteWhisperForConditionalGeneration:()=>ci,Llama4ForCausalLM:()=>At,Llama4PreTrainedModel:()=>gt,LlamaForCausalLM:()=>ot,LlamaModel:()=>Ge,LlamaPreTrainedModel:()=>De,LlavaForConditionalGeneration:()=>Fn,LlavaOnevisionForConditionalGeneration:()=>ui,LlavaPreTrainedModel:()=>po,LlavaQwen2ForCausalLM:()=>fi,LongT5ForConditionalGeneration:()=>rr,LongT5Model:()=>Qt,LongT5PreTrainedModel:()=>_r,M2M100ForConditionalGeneration:()=>lm,M2M100Model:()=>am,M2M100PreTrainedModel:()=>ll,MBartForCausalLM:()=>os,MBartForConditionalGeneration:()=>ms,MBartForSequenceClassification:()=>fr,MBartModel:()=>Yr,MBartPreTrainedModel:()=>Cr,MPNetForMaskedLM:()=>nn,MPNetForQuestionAnswering:()=>ce,MPNetForSequenceClassification:()=>on,MPNetForTokenClassification:()=>$n,MPNetModel:()=>sn,MPNetPreTrainedModel:()=>Jr,MT5ForConditionalGeneration:()=>ns,MT5Model:()=>qr,MT5PreTrainedModel:()=>Vt,MarianMTModel:()=>im,MarianModel:()=>om,MarianPreTrainedModel:()=>al,MaskFormerForInstanceSegmentation:()=>Op,MaskFormerModel:()=>Fp,MaskFormerPreTrainedModel:()=>el,MaskedLMOutput:()=>Sr,Metric3DForDepthEstimation:()=>kp,Metric3DPreTrainedModel:()=>$p,Metric3Dv2ForDepthEstimation:()=>Ap,Metric3Dv2PreTrainedModel:()=>Ip,MgpstrForSceneTextRecognition:()=>Th,MgpstrModelOutput:()=>vh,MgpstrPreTrainedModel:()=>xh,MimiDecoderModel:()=>Dh,MimiDecoderOutput:()=>Ah,MimiEncoderModel:()=>Oh,MimiEncoderOutput:()=>Ih,MimiModel:()=>Fh,MimiPreTrainedModel:()=>Ai,MistralForCausalLM:()=>Um,MistralModel:()=>Vm,MistralPreTrainedModel:()=>ul,MobileBertForMaskedLM:()=>qt,MobileBertForQuestionAnswering:()=>ks,MobileBertForSequenceClassification:()=>Ls,MobileBertModel:()=>st,MobileBertPreTrainedModel:()=>Be,MobileLLMForCausalLM:()=>Bu,MobileLLMModel:()=>zu,MobileLLMPreTrainedModel:()=>_a,MobileNetV1ForImageClassification:()=>ah,MobileNetV1ForSemanticSegmentation:()=>lh,MobileNetV1Model:()=>ih,MobileNetV1PreTrainedModel:()=>Si,MobileNetV2ForImageClassification:()=>uh,MobileNetV2ForSemanticSegmentation:()=>dh,MobileNetV2Model:()=>ch,MobileNetV2PreTrainedModel:()=>$i,MobileNetV3ForImageClassification:()=>mh,MobileNetV3ForSemanticSegmentation:()=>hh,MobileNetV3Model:()=>ph,MobileNetV3PreTrainedModel:()=>ki,MobileNetV4ForImageClassification:()=>fh,MobileNetV4ForSemanticSegmentation:()=>gh,MobileNetV4Model:()=>_h,MobileNetV4PreTrainedModel:()=>Ii,MobileViTForImageClassification:()=>Bd,MobileViTModel:()=>zd,MobileViTPreTrainedModel:()=>za,MobileViTV2ForImageClassification:()=>jd,MobileViTV2Model:()=>Rd,MobileViTV2PreTrainedModel:()=>Ba,ModelOutput:()=>de,ModernBertDecoderForCausalLM:()=>br,ModernBertDecoderModel:()=>ht,ModernBertDecoderPreTrainedModel:()=>It,ModernBertForMaskedLM:()=>Ye,ModernBertForSequenceClassification:()=>et,ModernBertForTokenClassification:()=>Ct,ModernBertModel:()=>Xe,ModernBertPreTrainedModel:()=>Ze,Moondream1ForConditionalGeneration:()=>di,MoonshineForConditionalGeneration:()=>In,MoonshineModel:()=>ua,MoonshinePreTrainedModel:()=>uo,MptForCausalLM:()=>fd,MptModel:()=>_d,MptPreTrainedModel:()=>ka,MultiModalityCausalLM:()=>yh,MultiModalityPreTrainedModel:()=>bh,MusicgenForCausalLM:()=>K0,MusicgenForConditionalGeneration:()=>wl,MusicgenModel:()=>G0,MusicgenPreTrainedModel:()=>gl,NeoBertForMaskedLM:()=>Me,NeoBertForQuestionAnswering:()=>je,NeoBertForSequenceClassification:()=>rt,NeoBertForTokenClassification:()=>Ne,NeoBertModel:()=>He,NeoBertPreTrainedModel:()=>Oe,NomicBertModel:()=>Dr,NomicBertPreTrainedModel:()=>Gr,OPTForCausalLM:()=>wd,OPTModel:()=>gd,OPTPreTrainedModel:()=>Ia,Olmo2ForCausalLM:()=>Vu,Olmo2Model:()=>Nu,Olmo2PreTrainedModel:()=>ga,OlmoForCausalLM:()=>ju,OlmoModel:()=>Ru,OlmoPreTrainedModel:()=>fa,OpenELMForCausalLM:()=>rd,OpenELMModel:()=>td,OpenELMPreTrainedModel:()=>Ta,OwlViTForObjectDetection:()=>Vd,OwlViTModel:()=>Nd,OwlViTPreTrainedModel:()=>Ra,Owlv2ForObjectDetection:()=>Wd,Owlv2Model:()=>Ud,Owlv2PreTrainedModel:()=>ja,PaliGemmaForConditionalGeneration:()=>_i,PaliGemmaPreTrainedModel:()=>hi,PatchTSMixerForPrediction:()=>Sh,PatchTSMixerModel:()=>Ch,PatchTSMixerPreTrainedModel:()=>bl,PatchTSTForPrediction:()=>Ph,PatchTSTModel:()=>Eh,PatchTSTPreTrainedModel:()=>Ml,Phi3ForCausalLM:()=>pd,Phi3Model:()=>dd,Phi3PreTrainedModel:()=>Sa,Phi3VForCausalLM:()=>ln,Phi3VPreTrainedModel:()=>Dn,PhiForCausalLM:()=>ud,PhiModel:()=>cd,PhiPreTrainedModel:()=>Ca,PreTrainedModel:()=>N,PretrainedMixin:()=>Rt,PvtForImageClassification:()=>Pd,PvtModel:()=>Ed,PvtPreTrainedModel:()=>Oa,PyAnnoteForAudioFrameClassification:()=>hm,PyAnnoteModel:()=>mm,PyAnnotePreTrainedModel:()=>cl,QuestionAnsweringModelOutput:()=>Or,Qwen2ForCausalLM:()=>nd,Qwen2Model:()=>sd,Qwen2PreTrainedModel:()=>Ea,Qwen2VLForConditionalGeneration:()=>ld,Qwen2VLPreTrainedModel:()=>ad,Qwen3ForCausalLM:()=>id,Qwen3Model:()=>od,Qwen3PreTrainedModel:()=>Pa,RFDetrForObjectDetection:()=>rp,RFDetrModel:()=>tp,RFDetrObjectDetectionOutput:()=>sp,RFDetrPreTrainedModel:()=>Ka,RTDetrForObjectDetection:()=>Jd,RTDetrModel:()=>Xd,RTDetrObjectDetectionOutput:()=>ko,RTDetrPreTrainedModel:()=>Wa,RTDetrV2ForObjectDetection:()=>Zd,RTDetrV2Model:()=>Yd,RTDetrV2ObjectDetectionOutput:()=>ep,RTDetrV2PreTrainedModel:()=>Ga,ResNetForImageClassification:()=>hp,ResNetModel:()=>mp,ResNetPreTrainedModel:()=>Ja,RoFormerForMaskedLM:()=>Ir,RoFormerForQuestionAnswering:()=>Os,RoFormerForSequenceClassification:()=>Us,RoFormerForTokenClassification:()=>Ws,RoFormerModel:()=>sr,RoFormerPreTrainedModel:()=>Lr,RobertaForMaskedLM:()=>Jo,RobertaForQuestionAnswering:()=>ei,RobertaForSequenceClassification:()=>Yo,RobertaForTokenClassification:()=>Zo,RobertaModel:()=>so,RobertaPreTrainedModel:()=>Is,SamImageSegmentationOutput:()=>nm,SamModel:()=>sm,SamPreTrainedModel:()=>rm,SapiensForDepthEstimation:()=>Ep,SapiensForNormalEstimation:()=>Pp,SapiensForSemanticSegmentation:()=>Tp,SapiensPreTrainedModel:()=>vi,SegformerForImageClassification:()=>eh,SegformerForSemanticSegmentation:()=>th,SegformerModel:()=>W0,SegformerPreTrainedModel:()=>Ci,Seq2SeqLMOutput:()=>Av,SequenceClassifierOutput:()=>wt,SiglipModel:()=>Mo,SiglipPreTrainedModel:()=>wo,SiglipTextModel:()=>bo,SiglipVisionModel:()=>cn,SmolLM3ForCausalLM:()=>ku,SmolLM3Model:()=>$u,SmolLM3PreTrainedModel:()=>da,SmolVLMForConditionalGeneration:()=>ho,SnacDecoderModel:()=>Uh,SnacEncoderModel:()=>Vh,SnacModel:()=>Nh,SnacPreTrainedModel:()=>Oi,SpeechT5ForSpeechToText:()=>zm,SpeechT5ForTextToSpeech:()=>Bm,SpeechT5HifiGan:()=>Rm,SpeechT5Model:()=>U0,SpeechT5PreTrainedModel:()=>Ei,SqueezeBertForMaskedLM:()=>ee,SqueezeBertForQuestionAnswering:()=>he,SqueezeBertForSequenceClassification:()=>se,SqueezeBertModel:()=>W,SqueezeBertPreTrainedModel:()=>k,StableLmForCausalLM:()=>sh,StableLmModel:()=>rh,StableLmPreTrainedModel:()=>_l,Starcoder2ForCausalLM:()=>Hm,Starcoder2Model:()=>Km,Starcoder2PreTrainedModel:()=>pl,StyleTextToSpeech2Model:()=>Lm,StyleTextToSpeech2PreTrainedModel:()=>Dm,Swin2SRForImageSuperResolution:()=>Mp,Swin2SRModel:()=>wp,Swin2SRPreTrainedModel:()=>Ya,SwinForImageClassification:()=>fp,SwinForSemanticSegmentation:()=>gp,SwinModel:()=>_p,SwinPreTrainedModel:()=>yi,T5ForConditionalGeneration:()=>tr,T5Model:()=>bt,T5PreTrainedModel:()=>Et,TableTransformerForObjectDetection:()=>ap,TableTransformerModel:()=>ip,TableTransformerObjectDetectionOutput:()=>lp,TableTransformerPreTrainedModel:()=>qa,TokenClassifierOutput:()=>Er,TrOCRForCausalLM:()=>Nm,TrOCRPreTrainedModel:()=>jm,UltravoxModel:()=>yl,UltravoxPreTrainedModel:()=>$h,UniSpeechForCTC:()=>wm,UniSpeechForSequenceClassification:()=>Mm,UniSpeechModel:()=>gm,UniSpeechPreTrainedModel:()=>xi,UniSpeechSatForAudioFrameClassification:()=>xm,UniSpeechSatForCTC:()=>ym,UniSpeechSatForSequenceClassification:()=>vm,UniSpeechSatModel:()=>bm,UniSpeechSatPreTrainedModel:()=>Io,VaultGemmaForCausalLM:()=>Yu,VaultGemmaModel:()=>Ju,VaultGemmaPreTrainedModel:()=>va,ViTForImageClassification:()=>bd,ViTMAEModel:()=>Sd,ViTMAEPreTrainedModel:()=>Cd,ViTMSNForImageClassification:()=>kd,ViTMSNModel:()=>$d,ViTMSNPreTrainedModel:()=>Da,ViTModel:()=>Md,ViTPreTrainedModel:()=>Aa,VisionEncoderDecoderModel:()=>An,VitMatteForImageMatting:()=>Ld,VitMattePreTrainedModel:()=>Dd,VitPoseForPoseEstimation:()=>Td,VitPosePreTrainedModel:()=>xd,VitsModel:()=>hl,VitsModelOutput:()=>w_,VitsPreTrainedModel:()=>Zm,VoxtralForConditionalGeneration:()=>kh,Wav2Vec2BertForCTC:()=>Em,Wav2Vec2BertForSequenceClassification:()=>Pm,Wav2Vec2BertModel:()=>Tm,Wav2Vec2BertPreTrainedModel:()=>Ti,Wav2Vec2ForAudioFrameClassification:()=>pm,Wav2Vec2ForCTC:()=>um,Wav2Vec2ForSequenceClassification:()=>dm,Wav2Vec2Model:()=>cm,Wav2Vec2PreTrainedModel:()=>Xs,WavLMForAudioFrameClassification:()=>Om,WavLMForCTC:()=>Im,WavLMForSequenceClassification:()=>Am,WavLMForXVector:()=>Fm,WavLMModel:()=>km,WavLMPreTrainedModel:()=>Wn,WeSpeakerResNetModel:()=>fm,WeSpeakerResNetPreTrainedModel:()=>_m,WhisperForConditionalGeneration:()=>kn,WhisperModel:()=>li,WhisperPreTrainedModel:()=>zs,XLMForQuestionAnswering:()=>oi,XLMForSequenceClassification:()=>si,XLMForTokenClassification:()=>ni,XLMModel:()=>ti,XLMPreTrainedModel:()=>Ks,XLMRobertaForMaskedLM:()=>no,XLMRobertaForQuestionAnswering:()=>ai,XLMRobertaForSequenceClassification:()=>oo,XLMRobertaForTokenClassification:()=>io,XLMRobertaModel:()=>ii,XLMRobertaPreTrainedModel:()=>Hs,XLMWithLMHeadModel:()=>ri,XVectorOutput:()=>f_,YolosForObjectDetection:()=>em,YolosModel:()=>Zp,YolosObjectDetectionOutput:()=>tm,YolosPreTrainedModel:()=>il});var s=t("./src/configs.js"),n=t("./src/backends/onnx.js"),o=t("./src/utils/dtypes.js"),a=t("./src/utils/generic.js"),i=t("./src/utils/core.js"),l=t("./src/utils/hub.js"),c=t("./src/utils/constants.js"),p=t("./src/generation/logits_process.js"),d=t("./src/generation/configuration_utils.js"),u=t("./src/utils/tensor.js"),f=t("./src/utils/image.js"),_=t("./src/utils/maths.js"),v=t("./src/generation/stopping_criteria.js"),I=t("./src/generation/logits_sampler.js"),M=t("./src/env.js"),y=t("./src/models/whisper/generation_whisper.js"),$=t("./src/models/whisper/common_whisper.js");const x={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9,AudioTextToText:10,AutoEncoder:11,ImageAudioTextToText:12},T=new Map,E=new Map,b=new Map;async function S(g,w,R){let oe=R.config?.["transformers.js_config"]??{},pe=R.device??oe.device;pe&&typeof pe!="string"&&(pe.hasOwnProperty(w)?pe=pe[w]:(console.warn(`device not specified for "${w}". Using the default device.`),pe=null));const _e=pe??(M.apis.IS_NODE_ENV?"cpu":"wasm"),Ie=(0,n.deviceToExecutionProviders)(_e),ze=oe.device_config??{};ze.hasOwnProperty(_e)&&(oe={...oe,...ze[_e]});let Ve=R.dtype??oe.dtype;if(typeof Ve!="string"&&(Ve&&Ve.hasOwnProperty(w)?Ve=Ve[w]:(Ve=o.DEFAULT_DEVICE_DTYPE_MAPPING[_e]??o.DATA_TYPES.fp32,console.warn(`dtype not specified for "${w}". Using the default dtype (${Ve}) for this device (${_e}).`))),Ve===o.DATA_TYPES.auto){let kt=oe.dtype;typeof kt!="string"&&(kt=kt?.[w]),kt&&kt!==o.DATA_TYPES.auto&&o.DATA_TYPES.hasOwnProperty(kt)?Ve=kt:Ve=o.DEFAULT_DEVICE_DTYPE_MAPPING[_e]??o.DATA_TYPES.fp32}const nt=Ve;if(o.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(nt)){if(nt===o.DATA_TYPES.fp16&&_e==="webgpu"&&!await(0,o.isWebGpuFp16Supported)())throw new Error(`The device (${_e}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${nt}. Should be one of: ${Object.keys(o.DATA_TYPES).join(", ")}`);const Mt=oe.kv_cache_dtype,vt=Mt?typeof Mt=="string"?Mt:Mt[nt]??"float32":void 0;if(vt&&!["float32","float16"].includes(vt))throw new Error(`Invalid kv_cache_dtype: ${vt}. Should be one of: float32, float16`);const Pt={dtype:nt,kv_cache_dtype:vt,device:_e},mt=o.DEFAULT_DTYPE_SUFFIX_MAPPING[nt],jt=`${w}${mt}.onnx`,_t=`${R.subfolder??""}/${jt}`,dt={...R.session_options};dt.executionProviders??=Ie;const Ot=oe.free_dimension_overrides;Ot?dt.freeDimensionOverrides??=Ot:_e.startsWith("webnn")&&!dt.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${_e}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const Gt=M.apis.IS_NODE_ENV&&M.env.useFSCache,or=(0,l.getModelFile)(g,_t,!0,R,Gt),wr=R.use_external_data_format??oe.use_external_data_format;let Mr=[];if(wr){let kt;typeof wr=="object"?wr.hasOwnProperty(jt)?kt=wr[jt]:wr.hasOwnProperty(w)?kt=wr[w]:kt=!1:kt=wr;const ir=+kt;if(ir>l.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${ir}) exceeds the maximum allowed value (${l.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let $r=0;$r<ir;++$r){const mn=`${jt}_data${$r===0?"":"_"+$r}`,Ur=`${R.subfolder??""}/${mn}`;Mr.push(new Promise(async(hs,Kn)=>{const Hn=await(0,l.getModelFile)(g,Ur,!0,R,Gt);hs(Hn instanceof Uint8Array?{path:mn,data:Hn}:mn)}))}}else dt.externalData!==void 0&&(Mr=dt.externalData.map(async kt=>{if(typeof kt.data=="string"){const ir=await(0,l.getModelFile)(g,kt.data,!0,R);return{...kt,data:ir}}return kt}));if(Mr.length>0){const kt=await Promise.all(Mr);M.apis.IS_NODE_ENV||(dt.externalData=kt)}if(_e==="webgpu"){const kt=(0,s.getCacheShapes)(R.config,{prefix:"present"});if(Object.keys(kt).length>0&&!(0,n.isONNXProxy)()){const ir={};for(const $r in kt)ir[$r]="gpu-buffer";dt.preferredOutputLocation=ir}}return{buffer_or_path:await or,session_options:dt,session_config:Pt}}async function D(g,w,R){return Object.fromEntries(await Promise.all(Object.keys(w).map(async oe=>{const{buffer_or_path:pe,session_options:_e,session_config:Ie}=await S(g,w[oe],R),ze=await(0,n.createInferenceSession)(pe,_e,Ie);return[oe,ze]})))}async function O(g,w,R){return Object.fromEntries(await Promise.all(Object.keys(w).map(async oe=>{const pe=await(0,l.getModelJSON)(g,w[oe],!1,R);return[oe,pe]})))}function H(g,w){const R=Object.create(null),oe=[];for(const Ie of g.inputNames){const ze=w[Ie];if(!(ze instanceof u.Tensor)){oe.push(Ie);continue}R[Ie]=(0,n.isONNXProxy)()?ze.clone():ze}if(oe.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${oe.join(", ")}.`);const pe=Object.keys(w).length,_e=g.inputNames.length;if(pe>_e){let Ie=Object.keys(w).filter(ze=>!g.inputNames.includes(ze));console.warn(`WARNING: Too many inputs were provided (${pe} > ${_e}). The following inputs will be ignored: "${Ie.join(", ")}".`)}return R}async function G(g,w){const R=H(g,w);try{const oe=Object.fromEntries(Object.entries(R).map(([_e,Ie])=>[_e,Ie.ort_tensor])),pe=await(0,n.runInferenceSession)(g,oe);return z(pe)}catch(oe){const pe=Object.fromEntries(Object.entries(R).map(([_e,Ie])=>{const ze={type:Ie.type,dims:Ie.dims,location:Ie.location};return ze.location!=="gpu-buffer"&&(ze.data=Ie.data),[_e,ze]}));throw console.error(`An error occurred during model execution: "${oe}".`),console.error("Inputs given to model:",pe),oe}}function z(g){for(let w in g)(0,n.isONNXTensor)(g[w])?g[w]=new u.Tensor(g[w]):typeof g[w]=="object"&&z(g[w]);return g}function Z(g){if(g instanceof u.Tensor)return g;if(g.length===0)throw Error("items must be non-empty");if(Array.isArray(g[0])){if(g.some(w=>w.length!==g[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new u.Tensor("int64",BigInt64Array.from(g.flat().map(w=>BigInt(w))),[g.length,g[0].length])}else return new u.Tensor("int64",BigInt64Array.from(g.map(w=>BigInt(w))),[1,g.length])}function Q(g){return new u.Tensor("bool",[g],[1])}async function Y(g,w){let{encoder_outputs:R,input_ids:oe,decoder_input_ids:pe,..._e}=w;if(!R){const ze=(0,i.pick)(w,g.sessions.model.inputNames);R=(await re(g,ze)).last_hidden_state}return _e.input_ids=pe,_e.encoder_hidden_states=R,g.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(_e.encoder_attention_mask=w.attention_mask),await le(g,_e,!0)}async function re(g,w){const R=g.sessions.model,oe=(0,i.pick)(w,R.inputNames);if(R.inputNames.includes("inputs_embeds")&&!oe.inputs_embeds){if(!w.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");oe.inputs_embeds=await g.encode_text({input_ids:w.input_ids})}if(R.inputNames.includes("token_type_ids")&&!oe.token_type_ids){if(!oe.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");oe.token_type_ids=(0,u.zeros_like)(oe.input_ids)}if(R.inputNames.includes("pixel_mask")&&!oe.pixel_mask){if(!oe.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const pe=oe.pixel_values.dims;oe.pixel_mask=(0,u.ones)([pe[0],pe[2],pe[3]])}return await G(R,oe)}async function te(g,w){const R=await g.encode(w);return await g.decode(R)}async function le(g,w,R=!1){const oe=g.sessions[R?"decoder_model_merged":"model"],{past_key_values:pe,..._e}=w;if(oe.inputNames.includes("use_cache_branch")&&(_e.use_cache_branch=Q(!!pe)),oe.inputNames.includes("position_ids")&&_e.attention_mask&&!_e.position_ids){const ze=["paligemma","gemma3_text","gemma3"].includes(g.config.model_type)?1:0;_e.position_ids=be(_e,pe,ze)}g.addPastKeyValues(_e,pe);const Ie=(0,i.pick)(_e,oe.inputNames);return await G(oe,Ie)}function ue({modality_token_id:g,inputs_embeds:w,modality_features:R,input_ids:oe,attention_mask:pe}){const _e=oe.tolist().map(nt=>nt.reduce((Mt,vt,Pt)=>(vt==g&&Mt.push(Pt),Mt),[])),Ie=_e.reduce((nt,Mt)=>nt+Mt.length,0),ze=R.dims[0];if(Ie!==ze)throw new Error(`Number of tokens and features do not match: tokens: ${Ie}, features ${ze}`);let Ve=0;for(let nt=0;nt<_e.length;++nt){const Mt=_e[nt],vt=w[nt];for(let Pt=0;Pt<Mt.length;++Pt)vt[Mt[Pt]].data.set(R[Ve++].data)}return{inputs_embeds:w,attention_mask:pe}}function B({image_token_id:g,inputs_embeds:w,image_features:R,input_ids:oe,attention_mask:pe}){return ue({modality_token_id:g,inputs_embeds:w,modality_features:R,input_ids:oe,attention_mask:pe})}function F({audio_token_id:g,inputs_embeds:w,audio_features:R,input_ids:oe,attention_mask:pe}){return ue({modality_token_id:g,inputs_embeds:w,modality_features:R,input_ids:oe,attention_mask:pe})}async function K(g,{encode_function:w,merge_function:R,modality_input_name:oe,modality_output_name:pe,input_ids:_e=null,attention_mask:Ie=null,position_ids:ze=null,inputs_embeds:Ve=null,past_key_values:nt=null,generation_config:Mt=null,logits_processor:vt=null,...Pt}){const mt=Pt[oe];if(!Ve){if(Ve=await g.encode_text({input_ids:_e,...Pt}),mt&&_e.dims[1]!==1){const _t=await w({[oe]:mt,...Pt});({inputs_embeds:Ve,attention_mask:Ie}=R({[pe]:_t,inputs_embeds:Ve,input_ids:_e,attention_mask:Ie}))}else if(nt&&mt&&_e.dims[1]===1){const _t=_e.dims[1],dt=Object.values(nt)[0].dims.at(-2);Ie=(0,u.cat)([(0,u.ones)([_e.dims[0],dt]),Ie.slice(null,[Ie.dims[1]-_t,Ie.dims[1]])],1)}}if(!ze&&g.config.model_type==="qwen2_vl"){const{image_grid_thw:_t,video_grid_thw:dt}=Pt;[ze]=g.get_rope_index(_e,_t,dt,Ie)}return await le(g,{inputs_embeds:Ve,past_key_values:nt,attention_mask:Ie,position_ids:ze,generation_config:Mt,logits_processor:vt},!0)}async function j(g,w){return await K(g,{...w,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:g.encode_audio.bind(g),merge_function:g._merge_input_ids_with_audio_features.bind(g)})}async function ie(g,w){return await K(g,{...w,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:g.encode_image.bind(g),merge_function:g._merge_input_ids_with_image_features.bind(g)})}function ke(g,w=0){const[R,oe]=g.dims,pe=g.data,_e=new BigInt64Array(pe.length);for(let Ie=0;Ie<R;++Ie){const ze=Ie*oe;let Ve=BigInt(w);for(let nt=0;nt<oe;++nt){const Mt=ze+nt;pe[Mt]===0n?_e[Mt]=BigInt(1):(_e[Mt]=Ve,Ve+=pe[Mt])}}return{data:_e,dims:g.dims}}function be(g,w=null,R=0){const{input_ids:oe,inputs_embeds:pe,attention_mask:_e}=g,{data:Ie,dims:ze}=ke(_e,R);let Ve=new u.Tensor("int64",Ie,ze);if(w){const nt=-(oe??pe).dims.at(1);Ve=Ve.slice(null,[nt,null])}return Ve}function Fe(g,w,R,oe){const pe=R.past_key_values?Object.values(R.past_key_values)[0].dims.at(-2):0;if(!R.attention_mask){let _e;for(const Ie of["input_ids","inputs_embeds","position_ids"])if(R[Ie]){_e=R[Ie].dims;break}if(!_e)throw new Error("attention_mask is not provided, and unable to infer its shape from model inputs.");R.attention_mask=(0,u.ones)([_e[0],pe+_e[1]])}if(R.past_key_values){const{input_ids:_e,attention_mask:Ie}=R;Ie&&Ie.dims[1]>_e.dims[1]||pe<_e.dims[1]&&(R.input_ids=_e.slice(null,[pe,null]))}return R}function Ke(g,w,R,oe){return R.past_key_values&&(w=w.map(pe=>[pe.at(-1)])),{...R,decoder_input_ids:Z(w)}}function ve(g,...w){return g.config.is_encoder_decoder?Ke(g,...w):Fe(g,...w)}function q(g,w,R,oe){const pe=!!R.past_key_values;return oe.guidance_scale!==null&&oe.guidance_scale>1&&(pe?R.input_ids=(0,u.cat)([R.input_ids,R.input_ids],0):(R.input_ids=(0,u.cat)([R.input_ids,(0,u.full_like)(R.input_ids,BigInt(oe.pad_token_id))],0),R.attention_mask=(0,u.cat)([R.attention_mask,(0,u.full_like)(R.attention_mask,0n)],0))),(pe||!R.pixel_values)&&(R.pixel_values=(0,u.full)([0,0,3,384,384],1)),pe&&(R.images_seq_mask=new u.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),R.images_emb_mask=new u.Tensor("bool",new Array(0).fill(!1),[1,1,0])),R}class N extends a.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(w,R,oe){super(),this.config=w,this.sessions=R,this.configs=oe;const pe=b.get(this.constructor),_e=T.get(pe);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,_e){case x.DecoderOnly:this.can_generate=!0,this._forward=le,this._prepare_inputs_for_generation=Fe;break;case x.Seq2Seq:case x.Vision2Seq:case x.Musicgen:this.can_generate=!0,this._forward=Y,this._prepare_inputs_for_generation=Ke;break;case x.EncoderDecoder:this._forward=Y;break;case x.ImageTextToText:this.can_generate=!0,this._forward=ie,this._prepare_inputs_for_generation=ve;break;case x.AudioTextToText:this.can_generate=!0,this._forward=j,this._prepare_inputs_for_generation=ve;break;case x.Phi3V:case x.ImageAudioTextToText:this.can_generate=!0,this._prepare_inputs_for_generation=ve;break;case x.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=q;break;case x.AutoEncoder:this._forward=te;break;default:this._forward=re;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const w=[];for(const R of Object.values(this.sessions))R?.handler?.dispose&&w.push(R.handler.dispose());return await Promise.all(w)}static async from_pretrained(w,{progress_callback:R=null,config:oe=null,cache_dir:pe=null,local_files_only:_e=!1,revision:Ie="main",model_file_name:ze=null,subfolder:Ve="onnx",device:nt=null,dtype:Mt=null,use_external_data_format:vt=null,session_options:Pt={}}={}){let mt={progress_callback:R,config:oe,cache_dir:pe,local_files_only:_e,revision:Ie,model_file_name:ze,subfolder:Ve,device:nt,dtype:Mt,use_external_data_format:vt,session_options:Pt};const jt=b.get(this),_t=T.get(jt);oe=mt.config=await s.AutoConfig.from_pretrained(w,mt);let dt;if(_t===x.DecoderOnly)dt=await Promise.all([D(w,{model:mt.model_file_name??"model"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===x.Seq2Seq||_t===x.Vision2Seq)dt=await Promise.all([D(w,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===x.MaskGeneration)dt=await Promise.all([D(w,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},mt)]);else if(_t===x.EncoderDecoder)dt=await Promise.all([D(w,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},mt)]);else if(_t===x.ImageTextToText){const Ot={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};oe.is_encoder_decoder&&(Ot.model="encoder_model"),dt=await Promise.all([D(w,Ot,mt),O(w,{generation_config:"generation_config.json"},mt)])}else if(_t===x.AudioTextToText){const Ot={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};dt=await Promise.all([D(w,Ot,mt),O(w,{generation_config:"generation_config.json"},mt)])}else if(_t===x.ImageAudioTextToText){const Ot={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};dt=await Promise.all([D(w,Ot,mt),O(w,{generation_config:"generation_config.json"},mt)])}else if(_t===x.Musicgen)dt=await Promise.all([D(w,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===x.MultiModality)dt=await Promise.all([D(w,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===x.Phi3V)dt=await Promise.all([D(w,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},mt),O(w,{generation_config:"generation_config.json"},mt)]);else if(_t===x.AutoEncoder)dt=await Promise.all([D(w,{encoder_model:"encoder_model",decoder_model:"decoder_model"},mt)]);else{if(_t!==x.EncoderOnly){const Ot=jt??oe?.model_type;Ot!=="custom"&&console.warn(`Model type for '${Ot}' not found, assuming encoder-only architecture. Please report this at ${c.GITHUB_ISSUE_URL}.`)}dt=await Promise.all([D(w,{model:mt.model_file_name??"model"},mt)])}return new this(oe,...dt)}async _call(w){return await this.forward(w)}async forward(w){return await this._forward(this,w)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(w){const R=new p.LogitsProcessorList;return w.temperature!==null&&w.temperature!==1&&R.push(new p.TemperatureLogitsWarper(w.temperature)),w.top_k!==null&&w.top_k!==0&&R.push(new p.TopKLogitsWarper(w.top_k)),w.top_p!==null&&w.top_p<1&&R.push(new p.TopPLogitsWarper(w.top_p)),R}_get_logits_processor(w,R,oe=null){const pe=new p.LogitsProcessorList;if(w.repetition_penalty!==null&&w.repetition_penalty!==1&&pe.push(new p.RepetitionPenaltyLogitsProcessor(w.repetition_penalty)),w.no_repeat_ngram_size!==null&&w.no_repeat_ngram_size>0&&pe.push(new p.NoRepeatNGramLogitsProcessor(w.no_repeat_ngram_size)),w.bad_words_ids!==null&&pe.push(new p.NoBadWordsLogitsProcessor(w.bad_words_ids,w.eos_token_id)),w.min_length!==null&&w.eos_token_id!==null&&w.min_length>0&&pe.push(new p.MinLengthLogitsProcessor(w.min_length,w.eos_token_id)),w.min_new_tokens!==null&&w.eos_token_id!==null&&w.min_new_tokens>0&&pe.push(new p.MinNewTokensLengthLogitsProcessor(R,w.min_new_tokens,w.eos_token_id)),w.forced_bos_token_id!==null&&pe.push(new p.ForcedBOSTokenLogitsProcessor(w.forced_bos_token_id)),w.forced_eos_token_id!==null&&pe.push(new p.ForcedEOSTokenLogitsProcessor(w.max_length,w.forced_eos_token_id)),w.begin_suppress_tokens!==null){const _e=R>1||w.forced_bos_token_id===null?R:R+1;pe.push(new p.SuppressTokensAtBeginLogitsProcessor(w.begin_suppress_tokens,_e))}return w.guidance_scale!==null&&w.guidance_scale>1&&pe.push(new p.ClassifierFreeGuidanceLogitsProcessor(w.guidance_scale)),oe!==null&&pe.extend(oe),pe}_prepare_generation_config(w,R,oe=d.GenerationConfig){const pe={...this.config};for(const Ie of["decoder","generator","text_config"])Ie in pe&&Object.assign(pe,pe[Ie]);const _e=new oe(pe);return Object.assign(_e,this.generation_config??{}),w&&Object.assign(_e,w),R&&Object.assign(_e,(0,i.pick)(R,Object.getOwnPropertyNames(_e))),_e}_get_stopping_criteria(w,R=null){const oe=new v.StoppingCriteriaList;return w.max_length!==null&&oe.push(new v.MaxLengthCriteria(w.max_length,this.config.max_position_embeddings??null)),w.eos_token_id!==null&&oe.push(new v.EosTokenCriteria(w.eos_token_id)),R&&oe.extend(R),oe}_validate_model_class(){if(!this.can_generate){const w=[Tl,El,xl,vl],R=b.get(this.constructor),oe=new Set,pe=this.config.model_type;for(const Ie of w){const ze=Ie.get(pe);ze&&oe.add(ze[0])}let _e=`The current model class (${R}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw oe.size>0&&(_e+=` Please use the following class instead: ${[...oe].join(", ")}`),Error(_e)}}prepare_inputs_for_generation(...w){return this._prepare_inputs_for_generation(this,...w)}_update_model_kwargs_for_generation({generated_input_ids:w,outputs:R,model_inputs:oe,is_encoder_decoder:pe}){return oe.past_key_values=this.getPastKeyValues(R,oe.past_key_values),oe.input_ids=new u.Tensor("int64",w.flat(),[w.length,1]),pe||(oe.attention_mask=(0,u.cat)([oe.attention_mask,(0,u.ones)([oe.attention_mask.dims[0],1])],1)),oe.position_ids=null,oe}_prepare_model_inputs({inputs:w,bos_token_id:R,model_kwargs:oe}){const pe=(0,i.pick)(oe,this.forward_params),_e=this.main_input_name;if(_e in pe){if(w)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else pe[_e]=w;return{inputs_tensor:pe[_e],model_inputs:pe,model_input_name:_e}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:w,model_inputs:R,model_input_name:oe,generation_config:pe}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!R.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:Ie,pixel_values:ze,attention_mask:Ve,...nt}=R,Mt=await this._prepare_inputs_embeds(R);R={...nt,...(0,i.pick)(Mt,["inputs_embeds","attention_mask"])}}let{last_hidden_state:_e}=await re(this,R);if(pe.guidance_scale!==null&&pe.guidance_scale>1)_e=(0,u.cat)([_e,(0,u.full_like)(_e,0)],0),"attention_mask"in R&&(R.attention_mask=(0,u.cat)([R.attention_mask,(0,u.zeros_like)(R.attention_mask)],0));else if(R.decoder_input_ids){const Ie=Z(R.decoder_input_ids).dims[0];if(Ie!==_e.dims[0]){if(_e.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${_e.dims[0]}) than the decoder inputs (${Ie}).`);_e=(0,u.cat)(Array.from({length:Ie},()=>_e),0)}}return R.encoder_outputs=_e,R}_prepare_decoder_input_ids_for_generation({batch_size:w,model_input_name:R,model_kwargs:oe,decoder_start_token_id:pe,bos_token_id:_e,generation_config:Ie}){let{decoder_input_ids:ze,...Ve}=oe;if(!(ze instanceof u.Tensor)){if(ze)Array.isArray(ze[0])||(ze=Array.from({length:w},()=>ze));else if(pe??=_e,this.config.model_type==="musicgen")ze=Array.from({length:w*this.config.decoder.num_codebooks},()=>[pe]);else if(Array.isArray(pe)){if(pe.length!==w)throw new Error(`\`decoder_start_token_id\` expcted to have length ${w} but got ${pe.length}`);ze=pe}else ze=Array.from({length:w},()=>[pe]);ze=Z(ze)}return oe.decoder_attention_mask=(0,u.ones_like)(ze),{input_ids:ze,model_inputs:Ve}}async generate({inputs:w=null,generation_config:R=null,logits_processor:oe=null,stopping_criteria:pe=null,streamer:_e=null,...Ie}){this._validate_model_class(),R=this._prepare_generation_config(R,Ie);let{inputs_tensor:ze,model_inputs:Ve,model_input_name:nt}=this._prepare_model_inputs({inputs:w,model_kwargs:Ie});const Mt=this.config.is_encoder_decoder;Mt&&("encoder_outputs"in Ve||(Ve=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:ze,model_inputs:Ve,model_input_name:nt,generation_config:R})));let vt;Mt?{input_ids:vt,model_inputs:Ve}=this._prepare_decoder_input_ids_for_generation({batch_size:Ve[nt].dims.at(0),model_input_name:nt,model_kwargs:Ve,decoder_start_token_id:R.decoder_start_token_id,bos_token_id:R.bos_token_id,generation_config:R}):vt=Ve[nt];let Pt=vt.dims.at(-1);R.max_new_tokens!==null&&(R.max_length=Pt+R.max_new_tokens);const mt=this._get_logits_processor(R,Pt,oe),jt=this._get_stopping_criteria(R,pe),_t=Ve[nt].dims.at(0),dt=I.LogitsSampler.getSampler(R),Ot=new Array(_t).fill(0),Gt=vt.tolist();_e&&_e.put(Gt);let or,wr={};for(;;){if(Ve=this.prepare_inputs_for_generation(Gt,Ve,R),or=await this.forward(Ve),R.output_attentions&&R.return_dict_in_generate){const Ur=this.getAttentions(or);for(const hs in Ur)hs in wr||(wr[hs]=[]),wr[hs].push(Ur[hs])}const kt=or.logits.slice(null,-1,null),ir=mt(Gt,kt),$r=[];for(let Ur=0;Ur<ir.dims.at(0);++Ur){const hs=ir[Ur],Kn=await dt(hs);for(const[Hn,Di]of Kn){const Ao=BigInt(Hn);Ot[Ur]+=Di,Gt[Ur].push(Ao),$r.push([Ao]);break}}if(_e&&_e.put($r),jt(Gt).every(Ur=>Ur))break;Ve=this._update_model_kwargs_for_generation({generated_input_ids:$r,outputs:or,model_inputs:Ve,is_encoder_decoder:Mt})}_e&&_e.end();const Mr=this.getPastKeyValues(or,Ve.past_key_values,!0),mr=new u.Tensor("int64",Gt.flat(),[Gt.length,Gt[0].length]);if(R.return_dict_in_generate)return{sequences:mr,past_key_values:Mr,...wr};for(const kt of Object.values(or))kt.location==="gpu-buffer"&&kt.dispose();return mr}getPastKeyValues(w,R,oe=!1){const pe=Object.create(null);for(const _e in w)if(_e.startsWith("present")){const Ie=_e.replace("present_conv","past_conv").replace("present","past_key_values"),ze=_e.includes("encoder");if(ze&&R?pe[Ie]=R[Ie]:pe[Ie]=w[_e],R&&(!ze||oe)){const Ve=R[Ie];Ve.location==="gpu-buffer"&&Ve.dispose()}}return pe}getAttentions(w){const R={};for(const oe of["cross_attentions","encoder_attentions","decoder_attentions"])for(const pe in w)pe.startsWith(oe)&&(oe in R||(R[oe]=[]),R[oe].push(w[pe]));return R}addPastKeyValues(w,R){if(R)Object.assign(w,R);else{const oe=this.sessions.decoder_model_merged??this.sessions.model,pe=(w[this.main_input_name]??w.attention_mask)?.dims?.[0]??1,_e=oe?.config?.kv_cache_dtype??"float32",Ie=_e==="float16"?u.DataTypeMap.float16:u.DataTypeMap.float32,ze=(0,s.getCacheShapes)(this.config,{batch_size:pe});for(const Ve in ze){const nt=ze[Ve].reduce((Mt,vt)=>Mt*vt,1);w[Ve]=new u.Tensor(_e,new Ie(nt),ze[Ve])}}}async encode_image({pixel_values:w}){return(await G(this.sessions.vision_encoder,{pixel_values:w})).image_features}async encode_text({input_ids:w}){return(await G(this.sessions.embed_tokens,{input_ids:w})).inputs_embeds}async encode_audio({audio_values:w}){return(await G(this.sessions.audio_encoder,{audio_values:w})).audio_features}}class de{}class xe extends de{constructor({last_hidden_state:w,hidden_states:R=null,attentions:oe=null}){super(),this.last_hidden_state=w,this.hidden_states=R,this.attentions=oe}}class $e extends N{}class ye extends $e{}class fe extends $e{async _call(w){return new Sr(await super._call(w))}}class Ee extends $e{async _call(w){return new wt(await super._call(w))}}class ge extends $e{async _call(w){return new Er(await super._call(w))}}class Ae extends $e{async _call(w){return new Or(await super._call(w))}}class Oe extends N{}class He extends Oe{}class Me extends Oe{async _call(w){return new Sr(await super._call(w))}}class rt extends Oe{async _call(w){return new wt(await super._call(w))}}class Ne extends Oe{async _call(w){return new Er(await super._call(w))}}class je extends Oe{async _call(w){return new Or(await super._call(w))}}class Ze extends N{}class Xe extends Ze{}class Ye extends Ze{async _call(w){return new Sr(await super._call(w))}}class et extends Ze{async _call(w){return new wt(await super._call(w))}}class Ct extends Ze{async _call(w){return new Er(await super._call(w))}}class It extends N{}class ht extends It{}class br extends It{}class Gr extends N{}class Dr extends Gr{}class Lr extends N{}class sr extends Lr{}class Ir extends Lr{async _call(w){return new Sr(await super._call(w))}}class Us extends Lr{async _call(w){return new wt(await super._call(w))}}class Ws extends Lr{async _call(w){return new Er(await super._call(w))}}class Os extends Lr{async _call(w){return new Or(await super._call(w))}}class Qr extends N{}class pt extends Qr{}class Ps extends Qr{async _call(w){return new Sr(await super._call(w))}}class Ut extends Qr{async _call(w){return new wt(await super._call(w))}}class Tt extends Qr{async _call(w){return new Er(await super._call(w))}}class Cs extends Qr{async _call(w){return new Or(await super._call(w))}}class C extends N{}class X extends C{}class V extends C{async _call(w){return new Sr(await super._call(w))}}class J extends C{async _call(w){return new wt(await super._call(w))}}class ne extends C{async _call(w){return new Er(await super._call(w))}}class me extends C{async _call(w){return new Or(await super._call(w))}}class Se extends N{}class tt extends Se{}class lt extends Se{async _call(w){return new Sr(await super._call(w))}}class We extends Se{async _call(w){return new wt(await super._call(w))}}class St extends Se{async _call(w){return new Er(await super._call(w))}}class $t extends Se{async _call(w){return new Or(await super._call(w))}}class er extends N{}class Wt extends er{}class cr extends er{async _call(w){return new Sr(await super._call(w))}}class Kr extends er{async _call(w){return new wt(await super._call(w))}}class Ht extends er{async _call(w){return new Er(await super._call(w))}}class hr extends er{async _call(w){return new Or(await super._call(w))}}class zr extends N{}class Ar extends zr{}class us extends zr{async _call(w){return new Sr(await super._call(w))}}class ds extends zr{async _call(w){return new wt(await super._call(w))}}class Br extends zr{async _call(w){return new Er(await super._call(w))}}class Ss extends zr{async _call(w){return new Or(await super._call(w))}}class Nr extends N{}class yr extends Nr{}class Hr extends Nr{async _call(w){return new wt(await super._call(w))}}class ur extends Nr{async _call(w){return new Er(await super._call(w))}}class vr extends Nr{async _call(w){return new Or(await super._call(w))}}class ss extends Nr{async _call(w){return new Sr(await super._call(w))}}class Xr extends N{}class $s extends Xr{}class Ds extends Xr{async _call(w){return new Sr(await super._call(w))}}class Rr extends Xr{async _call(w){return new wt(await super._call(w))}}class Le extends Xr{async _call(w){return new Er(await super._call(w))}}class Be extends N{}class st extends Be{}class qt extends Be{async _call(w){return new Sr(await super._call(w))}}class Ls extends Be{async _call(w){return new wt(await super._call(w))}}class ks extends Be{async _call(w){return new Or(await super._call(w))}}class Jr extends N{}class sn extends Jr{}class nn extends Jr{async _call(w){return new Sr(await super._call(w))}}class on extends Jr{async _call(w){return new wt(await super._call(w))}}class $n extends Jr{async _call(w){return new Er(await super._call(w))}}class ce extends Jr{async _call(w){return new Or(await super._call(w))}}class k extends N{}class W extends k{}class ee extends k{async _call(w){return new Sr(await super._call(w))}}class se extends k{async _call(w){return new wt(await super._call(w))}}class he extends k{async _call(w){return new Or(await super._call(w))}}class Pe extends N{}class qe extends Pe{}class Qe extends Pe{async _call(w){return new wt(await super._call(w))}}class Je extends Pe{async _call(w){return new Or(await super._call(w))}}class Ue extends Pe{async _call(w){return new Sr(await super._call(w))}}class Et extends N{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class bt extends Et{}class tr extends Et{}class _r extends N{}class Qt extends _r{}class rr extends _r{}class Vt extends N{}class qr extends Vt{}class ns extends Vt{}class xr extends N{}class ps extends xr{}class Jt extends xr{}class dr extends xr{async _call(w){return new wt(await super._call(w))}}class Cr extends N{}class Yr extends Cr{}class ms extends Cr{}class fr extends Cr{async _call(w){return new wt(await super._call(w))}}class os extends Cr{}class gr extends N{}class Yt extends gr{}class pr extends gr{}class nr extends N{}class Vr extends nr{}class Gs extends nr{}class Is extends N{}class so extends Is{}class Jo extends Is{async _call(w){return new Sr(await super._call(w))}}class Yo extends Is{async _call(w){return new wt(await super._call(w))}}class Zo extends Is{async _call(w){return new Er(await super._call(w))}}class ei extends Is{async _call(w){return new Or(await super._call(w))}}class Ks extends N{}class ti extends Ks{}class ri extends Ks{async _call(w){return new Sr(await super._call(w))}}class si extends Ks{async _call(w){return new wt(await super._call(w))}}class ni extends Ks{async _call(w){return new Er(await super._call(w))}}class oi extends Ks{async _call(w){return new Or(await super._call(w))}}class Hs extends N{}class ii extends Hs{}class no extends Hs{async _call(w){return new Sr(await super._call(w))}}class oo extends Hs{async _call(w){return new wt(await super._call(w))}}class io extends Hs{async _call(w){return new Er(await super._call(w))}}class ai extends Hs{async _call(w){return new Or(await super._call(w))}}class ao extends N{}class lo extends ao{}class co extends ao{}class zs extends N{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class li extends zs{}class kn extends zs{_prepare_generation_config(w,R){return super._prepare_generation_config(w,R,y.WhisperGenerationConfig)}_retrieve_init_tokens(w){const R=[w.decoder_start_token_id];let oe=w.language;const pe=w.task;if(w.is_multilingual){oe||(console.warn("No language specified - defaulting to English (en)."),oe="en");const Ie=`<|${(0,$.whisper_language_to_code)(oe)}|>`;R.push(w.lang_to_id[Ie]),R.push(w.task_to_id[pe??"transcribe"])}else if(oe||pe)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!w.return_timestamps&&w.no_timestamps_token_id&&R.at(-1)!==w.no_timestamps_token_id?R.push(w.no_timestamps_token_id):w.return_timestamps&&R.at(-1)===w.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),R.pop()),R.filter(_e=>_e!=null)}async generate({inputs:w=null,generation_config:R=null,logits_processor:oe=null,stopping_criteria:pe=null,..._e}){R=this._prepare_generation_config(R,_e);const Ie=_e.decoder_input_ids??this._retrieve_init_tokens(R);if(R.return_timestamps&&(oe??=new p.LogitsProcessorList,oe.push(new p.WhisperTimeStampLogitsProcessor(R,Ie))),R.begin_suppress_tokens&&(oe??=new p.LogitsProcessorList,oe.push(new p.SuppressTokensAtBeginLogitsProcessor(R.begin_suppress_tokens,Ie.length))),R.return_token_timestamps){if(!R.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");R.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),R.output_attentions=!0,R.return_dict_in_generate=!0}const ze=await super.generate({inputs:w,generation_config:R,logits_processor:oe,decoder_input_ids:Ie,..._e});return R.return_token_timestamps&&(ze.token_timestamps=this._extract_token_timestamps(ze,R.alignment_heads,R.num_frames)),ze}_extract_token_timestamps(w,R,oe=null,pe=.02){if(!w.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");oe==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let _e=this.config.median_filter_width;_e===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),_e=7);const Ie=w.cross_attentions,ze=Array.from({length:this.config.decoder_layers},(_t,dt)=>(0,u.cat)(Ie.map(Ot=>Ot[dt]),2)),Ve=(0,u.stack)(R.map(([_t,dt])=>{if(_t>=ze.length)throw new Error(`Layer index ${_t} is out of bounds for cross attentions (length ${ze.length}).`);return oe?ze[_t].slice(null,dt,null,[0,oe]):ze[_t].slice(null,dt)})).transpose(1,0,2,3),[nt,Mt]=(0,u.std_mean)(Ve,-2,0,!0),vt=Ve.clone();for(let _t=0;_t<vt.dims[0];++_t){const dt=vt[_t];for(let Ot=0;Ot<dt.dims[0];++Ot){const Gt=dt[Ot],or=nt[_t][Ot][0].data,wr=Mt[_t][Ot][0].data;for(let Mr=0;Mr<Gt.dims[0];++Mr){let mr=Gt[Mr].data;for(let kt=0;kt<mr.length;++kt)mr[kt]=(mr[kt]-wr[kt])/or[kt];mr.set((0,_.medianFilter)(mr,_e))}}}const Pt=[(0,u.mean)(vt,1)],mt=w.sequences.dims,jt=new u.Tensor("float32",new Float32Array(mt[0]*mt[1]),mt);for(let _t=0;_t<mt[0];++_t){const dt=Pt[_t].neg().squeeze_(0),[Ot,Gt]=(0,_.dynamic_time_warping)(dt.tolist()),or=Array.from({length:Ot.length-1},(mr,kt)=>Ot[kt+1]-Ot[kt]),wr=(0,i.mergeArrays)([1],or).map(mr=>!!mr),Mr=[];for(let mr=0;mr<wr.length;++mr)wr[mr]&&Mr.push(Gt[mr]*pe);jt[_t].data.set(Mr,1)}return jt}}class ci extends kn{}class uo extends N{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class ua extends uo{}class In extends uo{}class An extends N{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class po extends N{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class Fn extends po{_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return B({image_token_id:this.config.image_token_index,...w,image_features:oe})}}class ui extends Fn{}class di extends Fn{}class pi extends N{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class mi extends pi{_merge_input_ids_with_image_features({inputs_embeds:w,image_features:R,input_ids:oe,attention_mask:pe}){return{inputs_embeds:(0,u.cat)([R,w],1),attention_mask:(0,u.cat)([(0,u.ones)(R.dims.slice(0,2)),pe],1)}}async _prepare_inputs_embeds({input_ids:w,pixel_values:R,inputs_embeds:oe,attention_mask:pe}){if(!w&&!R)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let _e,Ie;return w&&(_e=await this.encode_text({input_ids:w})),R&&(Ie=await this.encode_image({pixel_values:R})),_e&&Ie?{inputs_embeds:oe,attention_mask:pe}=this._merge_input_ids_with_image_features({inputs_embeds:_e,image_features:Ie,input_ids:w,attention_mask:pe}):oe=_e||Ie,{inputs_embeds:oe,attention_mask:pe}}async forward({input_ids:w,pixel_values:R,attention_mask:oe,decoder_input_ids:pe,decoder_attention_mask:_e,encoder_outputs:Ie,past_key_values:ze,inputs_embeds:Ve,decoder_inputs_embeds:nt}){if(Ve||({inputs_embeds:Ve,attention_mask:oe}=await this._prepare_inputs_embeds({input_ids:w,pixel_values:R,inputs_embeds:Ve,attention_mask:oe})),!Ie){let{last_hidden_state:Pt}=await re(this,{inputs_embeds:Ve,attention_mask:oe});Ie=Pt}if(!nt){if(!pe)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");nt=await this.encode_text({input_ids:pe})}return await le(this,{inputs_embeds:nt,attention_mask:_e,encoder_attention_mask:oe,encoder_hidden_states:Ie,past_key_values:ze},!0)}}class hi extends N{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class _i extends hi{_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return B({image_token_id:this.config.image_token_index,...w,image_features:oe})}}class fi extends po{_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return B({image_token_id:this.config.image_token_index,...w,image_features:oe})}}class an extends N{forward_params=["input_ids","attention_mask","inputs_embeds","per_layer_inputs","position_ids","pixel_values","input_features","input_features_mask","past_key_values"]}class Bs extends an{async forward({input_ids:w=null,attention_mask:R=null,pixel_values:oe=null,input_features:pe=null,input_features_mask:_e=null,position_ids:Ie=null,inputs_embeds:ze=null,per_layer_inputs:Ve=null,past_key_values:nt=null,generation_config:Mt=null,logits_processor:vt=null,...Pt}){if((!ze||!Ve)&&({inputs_embeds:ze,per_layer_inputs:Ve}=await G(this.sessions.embed_tokens,{input_ids:w}),w.dims[1]!==1)){if(oe){const{image_features:jt}=await G(this.sessions.vision_encoder,{pixel_values:oe});({inputs_embeds:ze,attention_mask:R}=this._merge_input_ids_with_image_features({image_features:jt,inputs_embeds:ze,input_ids:w,attention_mask:R}))}if(pe){const{audio_features:jt}=await G(this.sessions.audio_encoder,{input_features:pe,input_features_mask:_e});({inputs_embeds:ze,attention_mask:R}=this._merge_input_ids_with_audio_features({audio_features:jt,inputs_embeds:ze,input_ids:w,attention_mask:R}))}}return await le(this,{inputs_embeds:ze,per_layer_inputs:Ve,past_key_values:nt,attention_mask:R,position_ids:Ie,generation_config:Mt,logits_processor:vt},!0)}_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return B({image_token_id:this.config.image_token_id,...w,image_features:oe})}_merge_input_ids_with_audio_features(w){const R=w.audio_features.dims.at(-1),oe=w.audio_features.view(-1,R);return F({audio_token_id:this.config.audio_token_id,...w,audio_features:oe})}}class mo extends N{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class On extends mo{async encode_image({pixel_values:w,pixel_attention_mask:R}){return(await G(this.sessions.vision_encoder,{pixel_values:w,pixel_attention_mask:R})).image_features}_merge_input_ids_with_image_features(w){const R=w.image_features.dims.at(-1),oe=w.image_features.view(-1,R);return B({image_token_id:this.config.image_token_id,...w,image_features:oe})}}class ho extends On{}class Dn extends N{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class ln extends Dn{async forward({input_ids:w=null,attention_mask:R=null,pixel_values:oe=null,image_sizes:pe=null,position_ids:_e=null,inputs_embeds:Ie=null,past_key_values:ze=null,generation_config:Ve=null,logits_processor:nt=null,...Mt}){if(!Ie){let Pt;if(oe&&w.dims[1]!==1){if(!pe)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:Pt}=await G(this.sessions.vision_encoder,{pixel_values:oe,image_sizes:pe}))}else{const mt=this.config.normalized_config.hidden_size;Pt=new u.Tensor("float32",[],[0,mt])}({inputs_embeds:Ie}=await G(this.sessions.prepare_inputs_embeds,{input_ids:w,image_features:Pt}))}return await le(this,{inputs_embeds:Ie,past_key_values:ze,attention_mask:R,position_ids:_e,generation_config:Ve,logits_processor:nt},!1)}}class As extends N{}class _o extends As{}class gi extends As{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class fo extends As{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class wi extends As{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class go extends As{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class wo extends N{}class Mo extends wo{}class bo extends wo{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class cn extends As{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class ut extends N{}class Mi extends ut{}class un extends N{}class yo extends un{async forward(w){const R=!w.input_ids,oe=!w.pixel_values;if(R&&oe)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(R&&(w.input_ids=(0,u.ones)([w.pixel_values.dims[0],1])),oe){const{image_size:nt}=this.config.vision_config;w.pixel_values=(0,u.full)([0,3,nt,nt],0)}const{text_embeddings:pe,image_embeddings:_e,l2norm_text_embeddings:Ie,l2norm_image_embeddings:ze}=await super.forward(w),Ve={};return R||(Ve.text_embeddings=pe,Ve.l2norm_text_embeddings=Ie),oe||(Ve.image_embeddings=_e,Ve.l2norm_image_embeddings=ze),Ve}}class dn extends un{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class Zr extends un{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"vision_model"})}}class qs extends N{}class Ln extends qs{}class vo extends qs{}class zn extends N{}class xo extends zn{}class Bn extends zn{}class Rn extends N{}class To extends Rn{}class Eo extends Rn{}class Qs extends N{}class jn extends Qs{}class Nn extends Qs{}class Vn extends N{}class Po extends Vn{}class Co extends Vn{}class Un extends N{}class So extends Un{}class m extends Un{}class P extends N{}class A extends P{}class L extends P{}class U extends N{}class ae extends U{}class Te extends U{}class De extends N{}class Ge extends De{}class ot extends De{}class gt extends N{}class At extends gt{}class Lt extends N{}class Tr extends Lt{}class Rs extends Lt{}class $o extends N{}class Cu extends $o{}class Su extends $o{}class da extends N{}class $u extends da{}class ku extends da{}class pa extends N{}class Iu extends pa{}class Au extends pa{}class ma extends N{}class Fu extends ma{}class Ou extends ma{}class ha extends N{}class Du extends ha{}class Lu extends ha{}class _a extends N{}class zu extends _a{}class Bu extends _a{}class fa extends N{}class Ru extends fa{}class ju extends fa{}class ga extends N{}class Nu extends ga{}class Vu extends ga{}class wa extends N{}class Uu extends wa{}class Wu extends wa{}class Ma extends N{}class Gu extends Ma{}class Ku extends Ma{}class ba extends N{}class Hu extends ba{}class qu extends ba{}class ya extends N{}class Qu extends ya{}class Xu extends ya{}class va extends N{}class Ju extends va{}class Yu extends va{}class xa extends N{}class Zu extends xa{}class ed extends xa{}class Ta extends N{}class td extends Ta{}class rd extends Ta{}class Ea extends N{}class sd extends Ea{}class nd extends Ea{}class Pa extends N{}class od extends Pa{}class id extends Pa{}class ad extends N{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class ld extends ad{get_rope_index(w,R,oe,pe){const{vision_config:_e,image_token_id:Ie,video_token_id:ze,vision_start_token_id:Ve}=this.config,nt=_e.spatial_merge_size??2,Mt=[];if(R||oe){let vt=w.tolist();pe||(pe=(0,u.ones_like)(w));const Pt=pe.tolist(),mt=Array.from({length:3},Gt=>Array.from({length:w.dims[0]},or=>Array.from({length:w.dims[1]},wr=>1))),jt=R?R.tolist():[],_t=oe?oe.tolist():[];let dt=0,Ot=0;for(let Gt=0;Gt<vt.length;++Gt){const or=vt[Gt].filter((Zt,Pr)=>Pt[Gt][Pr]==1),Mr=or.reduce((Zt,Pr,Js)=>(Pr==Ve&&Zt.push(Js),Zt),[]).map(Zt=>or[Zt+1]),mr=Mr.filter(Zt=>Zt==Ie).length,kt=Mr.filter(Zt=>Zt==ze).length;let ir=[],$r=0,mn=mr,Ur=kt;for(let Zt=0;Zt<Mr.length;++Zt){const Pr=or.findIndex((_n,_s)=>_s>$r&&_n==Ie),Js=or.findIndex((_n,_s)=>_s>$r&&_n==ze),hn=mn>0&&Pr!==-1?Pr:or.length+1,qn=Ur>0&&Js!==-1?Js:or.length+1;let Li,Pl,Cl,Sl;hn<qn?([Pl,Cl,Sl]=jt[dt],++dt,--mn,Li=hn):([Pl,Cl,Sl]=_t[Ot],++Ot,--Ur,Li=qn);const[Dv,$l,zi]=[Number(Pl),Math.floor(Number(Cl)/nt),Math.floor(Number(Sl)/nt)],kl=Li-$r,M_=ir.length>0?(0,_.max)(ir.at(-1))[0]+1:0;ir.push(Array.from({length:3*kl},(_n,_s)=>M_+_s%kl));const Il=kl+M_,Bi=Dv*$l*zi,Lv=Array.from({length:Bi},(_n,_s)=>Il+Math.floor(_s/($l*zi))),zv=Array.from({length:Bi},(_n,_s)=>Il+Math.floor(_s/zi)%$l),Bv=Array.from({length:Bi},(_n,_s)=>Il+_s%zi);ir.push([Lv,zv,Bv].flat()),$r=Li+Bi}if($r<or.length){const Zt=ir.length>0?(0,_.max)(ir.at(-1))[0]+1:0,Pr=or.length-$r;ir.push(Array.from({length:3*Pr},(Js,hn)=>Zt+hn%Pr))}const hs=ir.reduce((Zt,Pr)=>Zt+Pr.length,0),Kn=new Array(hs);let Hn=0;for(let Zt=0;Zt<3;++Zt)for(let Pr=0;Pr<ir.length;++Pr){const Js=ir[Pr],hn=Js.length/3;for(let qn=Zt*hn;qn<(Zt+1)*hn;++qn)Kn[Hn++]=Js[qn]}let Di=0;const Ao=Pt[Gt];for(let Zt=0;Zt<Ao.length;++Zt)if(Ao[Zt]==1){for(let Pr=0;Pr<3;++Pr)mt[Pr][Gt][Zt]=Kn[Pr*hs/3+Di];++Di}const Ov=(0,_.max)(Kn)[0];Mt.push(Ov+1-vt[Gt].length)}return[new u.Tensor("int64",mt.flat(1/0),[3,w.dims[0],w.dims[1]]),new u.Tensor("int64",Mt,[Mt.length,1])]}else if(pe){const{data:vt,dims:Pt}=ke(pe),mt=BigInt64Array.from({length:3*vt.length},(_t,dt)=>vt[dt%vt.length]),jt=Array.from({length:Pt[0]},(_t,dt)=>(0,_.max)(vt.subarray(Pt[1]*dt,Pt[1]*(dt+1)))[0]+1n+BigInt(Pt[1]));return[new u.Tensor("int64",mt,[3,...Pt]),new u.Tensor("int64",jt,[jt.length,1])]}else{const[vt,Pt]=w.dims,mt=BigInt64Array.from({length:3*vt*Pt},(jt,_t)=>BigInt(Math.floor(_t%Pt/vt)));return[new u.Tensor("int64",mt,[3,...w.dims]),(0,u.zeros)([vt,1])]}}async encode_image({pixel_values:w,image_grid_thw:R}){return(await G(this.sessions.vision_encoder,{pixel_values:w,grid_thw:R})).image_features}_merge_input_ids_with_image_features(w){return B({image_token_id:this.config.image_token_id,...w})}prepare_inputs_for_generation(w,R,oe){if(R.attention_mask&&!R.position_ids)if(!R.past_key_values)[R.position_ids,R.rope_deltas]=this.get_rope_index(R.input_ids,R.image_grid_thw,R.video_grid_thw,R.attention_mask);else{R.pixel_values=null;const pe=BigInt(Object.values(R.past_key_values)[0].dims.at(-2)),_e=R.rope_deltas.map(Ie=>pe+Ie);R.position_ids=(0,u.stack)([_e,_e,_e],0)}return R}}class Ca extends N{}class cd extends Ca{}class ud extends Ca{}class Sa extends N{}class dd extends Sa{}class pd extends Sa{}class $a extends N{}class md extends $a{}class hd extends $a{}class ka extends N{}class _d extends ka{}class fd extends ka{}class Ia extends N{}class gd extends Ia{}class wd extends Ia{}class Aa extends N{}class Md extends Aa{}class bd extends Aa{async _call(w){return new wt(await super._call(w))}}class Fa extends N{}class yd extends Fa{}class vd extends Fa{async _call(w){return new wt(await super._call(w))}}class xd extends N{}class Td extends xd{}class Oa extends N{}class Ed extends Oa{}class Pd extends Oa{async _call(w){return new wt(await super._call(w))}}class Cd extends N{}class Sd extends Cd{}class Da extends N{}class $d extends Da{}class kd extends Da{async _call(w){return new wt(await super._call(w))}}class Id extends N{}class Ad extends Id{}class La extends N{}class Fd extends La{}class Od extends La{async _call(w){return new wt(await super._call(w))}}class Dd extends N{}class Ld extends Dd{async _call(w){return new g_(await super._call(w))}}class za extends N{}class zd extends za{}class Bd extends za{async _call(w){return new wt(await super._call(w))}}class Ba extends N{}class Rd extends Ba{}class jd extends Ba{async _call(w){return new wt(await super._call(w))}}class Ra extends N{}class Nd extends Ra{}class Vd extends Ra{}class ja extends N{}class Ud extends ja{}class Wd extends ja{}class Na extends N{}class Gd extends Na{}class Kd extends Na{async _call(w){return new wt(await super._call(w))}}class bi extends N{}class Hd extends bi{}class qd extends bi{async _call(w){return new Ua(await super._call(w))}}class Va extends bi{async _call(w){return new Qd(await super._call(w))}}class Ua extends de{constructor({logits:w,pred_boxes:R}){super(),this.logits=w,this.pred_boxes=R}}class Qd extends de{constructor({logits:w,pred_boxes:R,pred_masks:oe}){super(),this.logits=w,this.pred_boxes=R,this.pred_masks=oe}}class Wa extends N{}class Xd extends Wa{}class Jd extends Wa{async _call(w){return new ko(await super._call(w))}}class ko extends de{constructor({logits:w,pred_boxes:R}){super(),this.logits=w,this.pred_boxes=R}}class Ga extends N{}class Yd extends Ga{}class Zd extends Ga{async _call(w){return new ep(await super._call(w))}}class ep extends ko{}class Ka extends N{}class tp extends Ka{}class rp extends Ka{async _call(w){return new sp(await super._call(w))}}class sp extends ko{}class Ha extends N{}class np extends Ha{}class op extends Ha{async _call(w){return new ko(await super._call(w))}}class qa extends N{}class ip extends qa{}class ap extends qa{async _call(w){return new lp(await super._call(w))}}class lp extends Ua{}class Qa extends N{}class cp extends Qa{}class up extends Qa{async _call(w){return new wt(await super._call(w))}}class Xa extends N{}class dp extends Xa{}class pp extends Xa{async _call(w){return new wt(await super._call(w))}}class Ja extends N{}class mp extends Ja{}class hp extends Ja{async _call(w){return new wt(await super._call(w))}}class yi extends N{}class _p extends yi{}class fp extends yi{async _call(w){return new wt(await super._call(w))}}class gp extends yi{}class Ya extends N{}class wp extends Ya{}class Mp extends Ya{}class Za extends N{}class bp extends Za{}class yp extends Za{}class vp extends N{}class xp extends vp{}class vi extends N{}class Tp extends vi{}class Ep extends vi{}class Pp extends vi{}class Cp extends N{}class Sp extends Cp{}class $p extends N{}class kp extends $p{}class Ip extends N{}class Ap extends Ip{}class el extends N{}class Fp extends el{}class Op extends el{}class tl extends N{}class Dp extends tl{}class Lp extends tl{}class zp extends N{}class Bp extends zp{}class rl extends N{}class Rp extends rl{}class jp extends rl{async _call(w){return new wt(await super._call(w))}}class sl extends N{}class Np extends sl{}class Vp extends sl{async _call(w){return new wt(await super._call(w))}}class nl extends N{}class Up extends nl{}class Wp extends nl{async _call(w){return new wt(await super._call(w))}}class ol extends N{}class Gp extends ol{}class Kp extends ol{async _call(w){return new wt(await super._call(w))}}class Hp extends N{}class qp extends Hp{}class Qp extends N{}class Xp extends Qp{}class Jp extends N{}class Yp extends Jp{}class il extends N{}class Zp extends il{}class em extends il{async _call(w){return new tm(await super._call(w))}}class tm extends de{constructor({logits:w,pred_boxes:R}){super(),this.logits=w,this.pred_boxes=R}}class rm extends N{}class sm extends rm{async get_image_embeddings({pixel_values:w}){return await re(this,{pixel_values:w})}async forward(w){if((!w.image_embeddings||!w.image_positional_embeddings)&&(w={...w,...await this.get_image_embeddings(w)}),!w.input_labels&&w.input_points){const oe=w.input_points.dims.slice(0,-1),pe=oe.reduce((_e,Ie)=>_e*Ie,1);w.input_labels=new u.Tensor("int64",new BigInt64Array(pe).fill(1n),oe)}const R={image_embeddings:w.image_embeddings,image_positional_embeddings:w.image_positional_embeddings};return w.input_points&&(R.input_points=w.input_points),w.input_labels&&(R.input_labels=w.input_labels),w.input_boxes&&(R.input_boxes=w.input_boxes),await G(this.sessions.prompt_encoder_mask_decoder,R)}async _call(w){return new nm(await super._call(w))}}class nm extends de{constructor({iou_scores:w,pred_masks:R}){super(),this.iou_scores=w,this.pred_masks=R}}class al extends N{}class om extends al{}class im extends al{}class ll extends N{}class am extends ll{}class lm extends ll{}class Xs extends N{}class cm extends Xs{}class um extends Xs{async _call(w){return new pn(await super._call(w))}}class dm extends Xs{async _call(w){return new wt(await super._call(w))}}class pm extends Xs{async _call(w){return new Er(await super._call(w))}}class cl extends N{}class mm extends cl{}class hm extends cl{async _call(w){return new Er(await super._call(w))}}class _m extends N{}class fm extends _m{}class xi extends N{}class gm extends xi{}class wm extends xi{async _call(w){return new pn(await super._call(w))}}class Mm extends xi{async _call(w){return new wt(await super._call(w))}}class Io extends N{}class bm extends Io{}class ym extends Io{async _call(w){return new pn(await super._call(w))}}class vm extends Io{async _call(w){return new wt(await super._call(w))}}class xm extends Io{async _call(w){return new Er(await super._call(w))}}class Ti extends N{}class Tm extends Ti{}class Em extends Ti{async _call(w){return new pn(await super._call(w))}}class Pm extends Ti{async _call(w){return new wt(await super._call(w))}}class V0 extends N{}class Cm extends Xs{}class Sm extends Xs{async _call(w){return new pn(await super._call(w))}}class $m extends Xs{async _call(w){return new wt(await super._call(w))}}class Wn extends N{}class km extends Wn{}class Im extends Wn{async _call(w){return new pn(await super._call(w))}}class Am extends Wn{async _call(w){return new wt(await super._call(w))}}class Fm extends Wn{async _call(w){return new f_(await super._call(w))}}class Om extends Wn{async _call(w){return new Er(await super._call(w))}}class Dm extends N{}class Lm extends Dm{}class Ei extends N{}class U0 extends Ei{}class zm extends Ei{}class Bm extends Ei{async generate_speech(w,R,{threshold:oe=.5,minlenratio:pe=0,maxlenratio:_e=20,vocoder:Ie=null}={}){const ze={input_ids:w},{encoder_outputs:Ve,encoder_attention_mask:nt}=await re(this,ze),Mt=Ve.dims[1]/this.config.reduction_factor,vt=Math.floor(Mt*_e),Pt=Math.floor(Mt*pe),mt=this.config.num_mel_bins;let jt=[],_t=null,dt=null,Ot=0;for(;;){++Ot;const wr=Q(!!dt);let Mr;dt?Mr=dt.output_sequence_out:Mr=new u.Tensor("float32",new Float32Array(mt),[1,1,mt]);let mr={use_cache_branch:wr,output_sequence:Mr,encoder_attention_mask:nt,speaker_embeddings:R,encoder_hidden_states:Ve};this.addPastKeyValues(mr,_t),dt=await G(this.sessions.decoder_model_merged,mr),_t=this.getPastKeyValues(dt,_t);const{prob:kt,spectrum:ir}=dt;if(jt.push(ir),Ot>=Pt&&(Array.from(kt.data).filter($r=>$r>=oe).length>0||Ot>=vt))break}const Gt=(0,u.cat)(jt),{waveform:or}=await G(Ie.sessions.model,{spectrogram:Gt});return{spectrogram:Gt,waveform:or}}}class Rm extends N{main_input_name="spectrogram"}class jm extends N{}class Nm extends jm{}class ul extends N{}class Vm extends ul{}class Um extends ul{}class dl extends N{}class Wm extends dl{}class Gm extends dl{}class pl extends N{}class Km extends pl{}class Hm extends pl{}class ml extends N{}class qm extends ml{}class Qm extends ml{}class Pi extends N{}class Xm extends Pi{}class Jm extends Pi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"text_model"})}}class Ym extends Pi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"audio_model"})}}class Zm extends N{}class hl extends Zm{async _call(w){return new w_(await super._call(w))}}class Ci extends N{}class W0 extends Ci{}class eh extends Ci{}class th extends Ci{}class _l extends N{}class rh extends _l{}class sh extends _l{}class fl extends N{}class nh extends fl{}class oh extends fl{async _call(w){return new wt(await super._call(w))}}class gl extends N{}class G0 extends gl{}class K0 extends gl{}class wl extends N{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(w){const[R,oe]=w.dims,pe=this.config.decoder.num_codebooks,_e=oe-pe;let Ie=0;for(let nt=0;nt<w.size;++nt){if(w.data[nt]===this.config.decoder.pad_token_id)continue;const Mt=nt%oe,vt=Math.floor(nt/oe)%pe,Pt=Mt-vt;Pt>0&&Pt<=_e&&(w.data[Ie++]=w.data[nt])}const ze=Math.floor(R/pe),Ve=Ie/(ze*pe);return new u.Tensor(w.type,w.data.slice(0,Ie),[ze,pe,Ve])}prepare_inputs_for_generation(w,R,oe){let pe=structuredClone(w);for(let Ie=0;Ie<pe.length;++Ie)for(let ze=0;ze<pe[Ie].length;++ze)Ie%this.config.decoder.num_codebooks>=ze&&(pe[Ie][ze]=BigInt(this.config.decoder.pad_token_id));return oe.guidance_scale!==null&&oe.guidance_scale>1&&(pe=pe.concat(pe)),super.prepare_inputs_for_generation(pe,R,oe)}async generate(w){const R=await super.generate(w),oe=this._apply_and_filter_by_delay_pattern_mask(R).unsqueeze_(0),{audio_values:pe}=await G(this.sessions.encodec_decode,{audio_codes:oe});return pe}}class Si extends N{}class ih extends Si{}class ah extends Si{async _call(w){return new wt(await super._call(w))}}class lh extends Si{}class $i extends N{}class ch extends $i{}class uh extends $i{async _call(w){return new wt(await super._call(w))}}class dh extends $i{}class ki extends N{}class ph extends ki{}class mh extends ki{async _call(w){return new wt(await super._call(w))}}class hh extends ki{}class Ii extends N{}class _h extends Ii{}class fh extends Ii{async _call(w){return new wt(await super._call(w))}}class gh extends Ii{}class wh extends N{}class Mh extends wh{}class bh extends N{}class yh extends bh{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...w){super(...w),this._generation_mode="text"}async forward(w){const R=this._generation_mode??"text";let oe;if(R==="text"||!w.past_key_values){const Ve=this.sessions.prepare_inputs_embeds,nt=(0,i.pick)(w,Ve.inputNames);oe=await G(Ve,nt)}else{const Ve=this.sessions.gen_img_embeds,nt=(0,i.pick)({image_ids:w.input_ids},Ve.inputNames);oe=await G(Ve,nt)}const pe={...w,...oe},_e=await le(this,pe),Ie=this.sessions[R==="text"?"lm_head":"gen_head"];if(!Ie)throw new Error(`Unable to find "${Ie}" generation head`);const ze=await G(Ie,(0,i.pick)(_e,Ie.inputNames));return{...oe,..._e,...ze}}async generate(w){return this._generation_mode="text",super.generate(w)}async generate_images(w){this._generation_mode="image";const R=(w.inputs??w[this.main_input_name]).dims[1],pe=(await super.generate(w)).slice(null,[R,null]),_e=this.sessions.image_decode,{decoded_image:Ie}=await G(_e,{generated_tokens:pe}),ze=Ie.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),Ve=[];for(const nt of ze){const Mt=f.RawImage.fromTensor(nt);Ve.push(Mt)}return Ve}}class vh extends de{constructor({char_logits:w,bpe_logits:R,wp_logits:oe}){super(),this.char_logits=w,this.bpe_logits=R,this.wp_logits=oe}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class xh extends N{}class Th extends xh{async _call(w){return new vh(await super._call(w))}}class Ml extends N{}class Eh extends Ml{}class Ph extends Ml{}class bl extends N{}class Ch extends bl{}class Sh extends bl{}class $h extends N{forward_params=["input_ids","attention_mask","position_ids","audio_values","past_key_values"]}class yl extends $h{_merge_input_ids_with_audio_features(w){const R=w.audio_features.dims.at(-1),oe=w.audio_features.view(-1,R);return F({audio_token_id:this.config.ignore_index??this.config.audio_token_id,...w,audio_features:oe})}}class kh extends yl{}class Ai extends N{main_input_name="input_values";forward_params=["input_values"]}class Ih extends de{constructor({audio_codes:w}){super(),this.audio_codes=w}}class Ah extends de{constructor({audio_values:w}){super(),this.audio_values=w}}class Fh extends Ai{async encode(w){return new Ih(await G(this.sessions.encoder_model,w))}async decode(w){return new Ah(await G(this.sessions.decoder_model,w))}}class Oh extends Ai{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"encoder_model"})}}class Dh extends Ai{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"decoder_model"})}}class Fi extends N{main_input_name="input_values";forward_params=["input_values"]}class Lh extends de{constructor({audio_codes:w}){super(),this.audio_codes=w}}class zh extends de{constructor({audio_values:w}){super(),this.audio_values=w}}class Bh extends Fi{async encode(w){return new Lh(await G(this.sessions.encoder_model,w))}async decode(w){return new zh(await G(this.sessions.decoder_model,w))}}class Rh extends Fi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"encoder_model"})}}class jh extends Fi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"decoder_model"})}}class Oi extends N{main_input_name="input_values";forward_params=["input_values"]}class Nh extends Oi{async encode(w){return await G(this.sessions.encoder_model,w)}async decode(w){return await G(this.sessions.decoder_model,w)}}class Vh extends Oi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"encoder_model"})}}class Uh extends Oi{static async from_pretrained(w,R={}){return super.from_pretrained(w,{...R,model_file_name:R.model_file_name??"decoder_model"})}}class Rt{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(w,{progress_callback:R=null,config:oe=null,cache_dir:pe=null,local_files_only:_e=!1,revision:Ie="main",model_file_name:ze=null,subfolder:Ve="onnx",device:nt=null,dtype:Mt=null,use_external_data_format:vt=null,session_options:Pt={}}={}){const mt={progress_callback:R,config:oe,cache_dir:pe,local_files_only:_e,revision:Ie,model_file_name:ze,subfolder:Ve,device:nt,dtype:Mt,use_external_data_format:vt,session_options:Pt};if(mt.config=await s.AutoConfig.from_pretrained(w,mt),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const jt=mt.config.model_type;for(const _t of this.MODEL_CLASS_MAPPINGS){let dt=_t.get(jt);if(!dt){for(const Ot of _t.values())if(Ot[0]===jt){dt=Ot;break}if(!dt)continue}return await dt[1].from_pretrained(w,mt)}if(this.BASE_IF_FAIL)return __.has(jt)||console.warn(`Unknown model class "${jt}", attempting to construct from base class.`),await N.from_pretrained(w,mt);throw Error(`Unsupported model type: ${jt}`)}}const H0=new Map([["bert",["BertModel",ye]],["neobert",["NeoBertModel",He]],["modernbert",["ModernBertModel",Xe]],["nomic_bert",["NomicBertModel",Dr]],["roformer",["RoFormerModel",sr]],["electra",["ElectraModel",X]],["esm",["EsmModel",$s]],["convbert",["ConvBertModel",pt]],["camembert",["CamembertModel",tt]],["deberta",["DebertaModel",Wt]],["deberta-v2",["DebertaV2Model",Ar]],["mpnet",["MPNetModel",sn]],["albert",["AlbertModel",qe]],["distilbert",["DistilBertModel",yr]],["roberta",["RobertaModel",so]],["xlm",["XLMModel",ti]],["xlm-roberta",["XLMRobertaModel",ii]],["clap",["ClapModel",Xm]],["clip",["CLIPModel",_o]],["clipseg",["CLIPSegModel",Ln]],["chinese_clip",["ChineseCLIPModel",Mi]],["siglip",["SiglipModel",Mo]],["jina_clip",["JinaCLIPModel",yo]],["mobilebert",["MobileBertModel",st]],["squeezebert",["SqueezeBertModel",W]],["wav2vec2",["Wav2Vec2Model",cm]],["wav2vec2-bert",["Wav2Vec2BertModel",Tm]],["unispeech",["UniSpeechModel",gm]],["unispeech-sat",["UniSpeechSatModel",bm]],["hubert",["HubertModel",Cm]],["wavlm",["WavLMModel",km]],["audio-spectrogram-transformer",["ASTModel",lo]],["vits",["VitsModel",hl]],["pyannote",["PyAnnoteModel",mm]],["wespeaker-resnet",["WeSpeakerResNetModel",fm]],["detr",["DetrModel",Hd]],["rt_detr",["RTDetrModel",Xd]],["rt_detr_v2",["RTDetrV2Model",Yd]],["rf_detr",["RFDetrModel",tp]],["d_fine",["DFineModel",np]],["table-transformer",["TableTransformerModel",ip]],["vit",["ViTModel",Md]],["ijepa",["IJepaModel",yd]],["pvt",["PvtModel",Ed]],["vit_msn",["ViTMSNModel",$d]],["vit_mae",["ViTMAEModel",Sd]],["groupvit",["GroupViTModel",Ad]],["fastvit",["FastViTModel",Fd]],["mobilevit",["MobileViTModel",zd]],["mobilevitv2",["MobileViTV2Model",Rd]],["owlvit",["OwlViTModel",Nd]],["owlv2",["Owlv2Model",Ud]],["beit",["BeitModel",Gd]],["deit",["DeiTModel",cp]],["hiera",["HieraModel",dp]],["convnext",["ConvNextModel",Rp]],["convnextv2",["ConvNextV2Model",Np]],["dinov2",["Dinov2Model",Up]],["dinov2_with_registers",["Dinov2WithRegistersModel",Gp]],["dinov3_vit",["DINOv3ViTModel",qp]],["dinov3_convnext",["DINOv3ConvNextModel",Xp]],["resnet",["ResNetModel",mp]],["swin",["SwinModel",_p]],["swin2sr",["Swin2SRModel",wp]],["donut-swin",["DonutSwinModel",Bp]],["yolos",["YolosModel",Zp]],["dpt",["DPTModel",bp]],["glpn",["GLPNModel",Dp]],["hifigan",["SpeechT5HifiGan",Rm]],["efficientnet",["EfficientNetModel",nh]],["decision_transformer",["DecisionTransformerModel",Mh]],["patchtst",["PatchTSTForPrediction",Eh]],["patchtsmixer",["PatchTSMixerForPrediction",Ch]],["mobilenet_v1",["MobileNetV1Model",ih]],["mobilenet_v2",["MobileNetV2Model",ch]],["mobilenet_v3",["MobileNetV3Model",ph]],["mobilenet_v4",["MobileNetV4Model",_h]],["maskformer",["MaskFormerModel",Fp]],["mgp-str",["MgpstrForSceneTextRecognition",Th]],["style_text_to_speech_2",["StyleTextToSpeech2Model",Lm]]]),q0=new Map([["t5",["T5Model",bt]],["longt5",["LongT5Model",Qt]],["mt5",["MT5Model",qr]],["bart",["BartModel",ps]],["mbart",["MBartModel",Yr]],["marian",["MarianModel",om]],["whisper",["WhisperModel",li]],["m2m_100",["M2M100Model",am]],["blenderbot",["BlenderbotModel",Yt]],["blenderbot-small",["BlenderbotSmallModel",Vr]]]),Q0=new Map([["mimi",["MimiModel",Fh]],["dac",["DacModel",Bh]],["snac",["SnacModel",Nh]]]),X0=new Map([["bloom",["BloomModel",md]],["jais",["JAISModel",To]],["gpt2",["GPT2Model",xo]],["gptj",["GPTJModel",So]],["gpt_bigcode",["GPTBigCodeModel",A]],["gpt_neo",["GPTNeoModel",jn]],["gpt_neox",["GPTNeoXModel",Po]],["codegen",["CodeGenModel",ae]],["llama",["LlamaModel",Ge]],["arcee",["ArceeModel",Tr]],["lfm2",["Lfm2Model",Cu]],["smollm3",["SmolLM3Model",$u]],["exaone",["ExaoneModel",Du]],["olmo",["OlmoModel",Ru]],["olmo2",["Olmo2Model",Nu]],["mobilellm",["MobileLLMModel",zu]],["granite",["GraniteModel",Uu]],["cohere",["CohereModel",Gu]],["gemma",["GemmaModel",Hu]],["gemma2",["Gemma2Model",Qu]],["vaultgemma",["VaultGemmaModel",Ju]],["gemma3_text",["Gemma3Model",Zu]],["helium",["HeliumModel",Iu]],["glm",["GlmModel",Fu]],["openelm",["OpenELMModel",td]],["qwen2",["Qwen2Model",sd]],["qwen3",["Qwen3Model",od]],["phi",["PhiModel",cd]],["phi3",["Phi3Model",dd]],["mpt",["MptModel",_d]],["opt",["OPTModel",gd]],["mistral",["MistralModel",Vm]],["ernie4_5",["Ernie4_5_Model",Wm]],["starcoder2",["Starcoder2Model",Km]],["falcon",["FalconModel",qm]],["stablelm",["StableLmModel",rh]],["modernbert-decoder",["ModernBertDecoderModel",ht]]]),vl=new Map([["speecht5",["SpeechT5ForSpeechToText",zm]],["whisper",["WhisperForConditionalGeneration",kn]],["lite-whisper",["LiteWhisperForConditionalGeneration",ci]],["moonshine",["MoonshineForConditionalGeneration",In]]]),Wh=new Map([["speecht5",["SpeechT5ForTextToSpeech",Bm]]]),Gh=new Map([["vits",["VitsModel",hl]],["musicgen",["MusicgenForConditionalGeneration",wl]]]),Kh=new Map([["bert",["BertForSequenceClassification",Ee]],["neobert",["NeoBertForSequenceClassification",rt]],["modernbert",["ModernBertForSequenceClassification",et]],["roformer",["RoFormerForSequenceClassification",Us]],["electra",["ElectraForSequenceClassification",J]],["esm",["EsmForSequenceClassification",Rr]],["convbert",["ConvBertForSequenceClassification",Ut]],["camembert",["CamembertForSequenceClassification",We]],["deberta",["DebertaForSequenceClassification",Kr]],["deberta-v2",["DebertaV2ForSequenceClassification",ds]],["mpnet",["MPNetForSequenceClassification",on]],["albert",["AlbertForSequenceClassification",Qe]],["distilbert",["DistilBertForSequenceClassification",Hr]],["roberta",["RobertaForSequenceClassification",Yo]],["xlm",["XLMForSequenceClassification",si]],["xlm-roberta",["XLMRobertaForSequenceClassification",oo]],["bart",["BartForSequenceClassification",dr]],["mbart",["MBartForSequenceClassification",fr]],["mobilebert",["MobileBertForSequenceClassification",Ls]],["squeezebert",["SqueezeBertForSequenceClassification",se]]]),Hh=new Map([["bert",["BertForTokenClassification",ge]],["neobert",["NeoBertForTokenClassification",Ne]],["modernbert",["ModernBertForTokenClassification",Ct]],["roformer",["RoFormerForTokenClassification",Ws]],["electra",["ElectraForTokenClassification",ne]],["esm",["EsmForTokenClassification",Le]],["convbert",["ConvBertForTokenClassification",Tt]],["camembert",["CamembertForTokenClassification",St]],["deberta",["DebertaForTokenClassification",Ht]],["deberta-v2",["DebertaV2ForTokenClassification",Br]],["mpnet",["MPNetForTokenClassification",$n]],["distilbert",["DistilBertForTokenClassification",ur]],["roberta",["RobertaForTokenClassification",Zo]],["xlm",["XLMForTokenClassification",ni]],["xlm-roberta",["XLMRobertaForTokenClassification",io]]]),xl=new Map([["t5",["T5ForConditionalGeneration",tr]],["longt5",["LongT5ForConditionalGeneration",rr]],["mt5",["MT5ForConditionalGeneration",ns]],["bart",["BartForConditionalGeneration",Jt]],["mbart",["MBartForConditionalGeneration",ms]],["marian",["MarianMTModel",im]],["m2m_100",["M2M100ForConditionalGeneration",lm]],["blenderbot",["BlenderbotForConditionalGeneration",pr]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",Gs]]]),Tl=new Map([["bloom",["BloomForCausalLM",hd]],["gpt2",["GPT2LMHeadModel",Bn]],["jais",["JAISLMHeadModel",Eo]],["gptj",["GPTJForCausalLM",m]],["gpt_bigcode",["GPTBigCodeForCausalLM",L]],["gpt_neo",["GPTNeoForCausalLM",Nn]],["gpt_neox",["GPTNeoXForCausalLM",Co]],["codegen",["CodeGenForCausalLM",Te]],["llama",["LlamaForCausalLM",ot]],["llama4_text",["Llama4ForCausalLM",At]],["arcee",["ArceeForCausalLM",Rs]],["lfm2",["Lfm2ForCausalLM",Su]],["smollm3",["SmolLM3ForCausalLM",ku]],["exaone",["ExaoneForCausalLM",Lu]],["olmo",["OlmoForCausalLM",ju]],["olmo2",["Olmo2ForCausalLM",Vu]],["mobilellm",["MobileLLMForCausalLM",Bu]],["granite",["GraniteForCausalLM",Wu]],["cohere",["CohereForCausalLM",Ku]],["gemma",["GemmaForCausalLM",qu]],["gemma2",["Gemma2ForCausalLM",Xu]],["vaultgemma",["VaultGemmaForCausalLM",Yu]],["gemma3_text",["Gemma3ForCausalLM",ed]],["helium",["HeliumForCausalLM",Au]],["glm",["GlmForCausalLM",Ou]],["openelm",["OpenELMForCausalLM",rd]],["qwen2",["Qwen2ForCausalLM",nd]],["qwen3",["Qwen3ForCausalLM",id]],["phi",["PhiForCausalLM",ud]],["phi3",["Phi3ForCausalLM",pd]],["mpt",["MptForCausalLM",fd]],["opt",["OPTForCausalLM",wd]],["mbart",["MBartForCausalLM",os]],["mistral",["MistralForCausalLM",Um]],["ernie4_5",["Ernie4_5_ForCausalLM",Gm]],["starcoder2",["Starcoder2ForCausalLM",Hm]],["falcon",["FalconForCausalLM",Qm]],["trocr",["TrOCRForCausalLM",Nm]],["stablelm",["StableLmForCausalLM",sh]],["modernbert-decoder",["ModernBertDecoderForCausalLM",br]],["phi3_v",["Phi3VForCausalLM",ln]]]),J0=new Map([["multi_modality",["MultiModalityCausalLM",yh]]]),qh=new Map([["bert",["BertForMaskedLM",fe]],["neobert",["NeoBertForMaskedLM",Me]],["modernbert",["ModernBertForMaskedLM",Ye]],["roformer",["RoFormerForMaskedLM",Ir]],["electra",["ElectraForMaskedLM",V]],["esm",["EsmForMaskedLM",Ds]],["convbert",["ConvBertForMaskedLM",Ps]],["camembert",["CamembertForMaskedLM",lt]],["deberta",["DebertaForMaskedLM",cr]],["deberta-v2",["DebertaV2ForMaskedLM",us]],["mpnet",["MPNetForMaskedLM",nn]],["albert",["AlbertForMaskedLM",Ue]],["distilbert",["DistilBertForMaskedLM",ss]],["roberta",["RobertaForMaskedLM",Jo]],["xlm",["XLMWithLMHeadModel",ri]],["xlm-roberta",["XLMRobertaForMaskedLM",no]],["mobilebert",["MobileBertForMaskedLM",qt]],["squeezebert",["SqueezeBertForMaskedLM",ee]]]),Qh=new Map([["bert",["BertForQuestionAnswering",Ae]],["neobert",["NeoBertForQuestionAnswering",je]],["roformer",["RoFormerForQuestionAnswering",Os]],["electra",["ElectraForQuestionAnswering",me]],["convbert",["ConvBertForQuestionAnswering",Cs]],["camembert",["CamembertForQuestionAnswering",$t]],["deberta",["DebertaForQuestionAnswering",hr]],["deberta-v2",["DebertaV2ForQuestionAnswering",Ss]],["mpnet",["MPNetForQuestionAnswering",ce]],["albert",["AlbertForQuestionAnswering",Je]],["distilbert",["DistilBertForQuestionAnswering",vr]],["roberta",["RobertaForQuestionAnswering",ei]],["xlm",["XLMForQuestionAnswering",oi]],["xlm-roberta",["XLMRobertaForQuestionAnswering",ai]],["mobilebert",["MobileBertForQuestionAnswering",ks]],["squeezebert",["SqueezeBertForQuestionAnswering",he]]]),El=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",An]],["idefics3",["Idefics3ForConditionalGeneration",On]],["smolvlm",["SmolVLMForConditionalGeneration",ho]]]),Xh=new Map([["llava",["LlavaForConditionalGeneration",Fn]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",ui]],["moondream1",["Moondream1ForConditionalGeneration",di]],["florence2",["Florence2ForConditionalGeneration",mi]],["qwen2-vl",["Qwen2VLForConditionalGeneration",ld]],["idefics3",["Idefics3ForConditionalGeneration",On]],["smolvlm",["SmolVLMForConditionalGeneration",ho]],["paligemma",["PaliGemmaForConditionalGeneration",_i]],["llava_qwen2",["LlavaQwen2ForCausalLM",fi]],["gemma3n",["Gemma3nForConditionalGeneration",Bs]]]),Jh=new Map([["ultravox",["UltravoxModel",yl]],["voxtral",["VoxtralForConditionalGeneration",kh]]]),Y0=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",An]]]),Yh=new Map([["vit",["ViTForImageClassification",bd]],["ijepa",["IJepaForImageClassification",vd]],["pvt",["PvtForImageClassification",Pd]],["vit_msn",["ViTMSNForImageClassification",kd]],["fastvit",["FastViTForImageClassification",Od]],["mobilevit",["MobileViTForImageClassification",Bd]],["mobilevitv2",["MobileViTV2ForImageClassification",jd]],["beit",["BeitForImageClassification",Kd]],["deit",["DeiTForImageClassification",up]],["hiera",["HieraForImageClassification",pp]],["convnext",["ConvNextForImageClassification",jp]],["convnextv2",["ConvNextV2ForImageClassification",Vp]],["dinov2",["Dinov2ForImageClassification",Wp]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",Kp]],["resnet",["ResNetForImageClassification",hp]],["swin",["SwinForImageClassification",fp]],["segformer",["SegformerForImageClassification",eh]],["efficientnet",["EfficientNetForImageClassification",oh]],["mobilenet_v1",["MobileNetV1ForImageClassification",ah]],["mobilenet_v2",["MobileNetV2ForImageClassification",uh]],["mobilenet_v3",["MobileNetV3ForImageClassification",mh]],["mobilenet_v4",["MobileNetV4ForImageClassification",fh]]]),Zh=new Map([["detr",["DetrForObjectDetection",qd]],["rt_detr",["RTDetrForObjectDetection",Jd]],["rt_detr_v2",["RTDetrV2ForObjectDetection",Zd]],["rf_detr",["RFDetrForObjectDetection",rp]],["d_fine",["DFineForObjectDetection",op]],["table-transformer",["TableTransformerForObjectDetection",ap]],["yolos",["YolosForObjectDetection",em]]]),e_=new Map([["owlvit",["OwlViTForObjectDetection",Vd]],["owlv2",["Owlv2ForObjectDetection",Wd]],["grounding-dino",["GroundingDinoForObjectDetection",Yp]]]),Gn=new Map([["detr",["DetrForSegmentation",Va]],["clipseg",["CLIPSegForImageSegmentation",vo]]]),t_=new Map([["segformer",["SegformerForSemanticSegmentation",th]],["sapiens",["SapiensForSemanticSegmentation",Tp]],["swin",["SwinForSemanticSegmentation",gp]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",lh]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",dh]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",hh]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",gh]]]),r_=new Map([["detr",["DetrForSegmentation",Va]],["maskformer",["MaskFormerForInstanceSegmentation",Op]]]),s_=new Map([["sam",["SamModel",sm]]]),n_=new Map([["wav2vec2",["Wav2Vec2ForCTC",um]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Em]],["unispeech",["UniSpeechForCTC",wm]],["unispeech-sat",["UniSpeechSatForCTC",ym]],["wavlm",["WavLMForCTC",Im]],["hubert",["HubertForCTC",Sm]]]),o_=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",dm]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",Pm]],["unispeech",["UniSpeechForSequenceClassification",Mm]],["unispeech-sat",["UniSpeechSatForSequenceClassification",vm]],["wavlm",["WavLMForSequenceClassification",Am]],["hubert",["HubertForSequenceClassification",$m]],["audio-spectrogram-transformer",["ASTForAudioClassification",co]]]),i_=new Map([["wavlm",["WavLMForXVector",Fm]]]),a_=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",xm]],["wavlm",["WavLMForAudioFrameClassification",Om]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",pm]],["pyannote",["PyAnnoteForAudioFrameClassification",hm]]]),l_=new Map([["vitmatte",["VitMatteForImageMatting",Ld]]]),Z0=new Map([["patchtst",["PatchTSTForPrediction",Ph]],["patchtsmixer",["PatchTSMixerForPrediction",Sh]]]),c_=new Map([["swin2sr",["Swin2SRForImageSuperResolution",Mp]]]),u_=new Map([["dpt",["DPTForDepthEstimation",yp]],["depth_anything",["DepthAnythingForDepthEstimation",xp]],["glpn",["GLPNForDepthEstimation",Lp]],["sapiens",["SapiensForDepthEstimation",Ep]],["depth_pro",["DepthProForDepthEstimation",Sp]],["metric3d",["Metric3DForDepthEstimation",kp]],["metric3dv2",["Metric3Dv2ForDepthEstimation",Ap]]]),d_=new Map([["sapiens",["SapiensForNormalEstimation",Pp]]]),p_=new Map([["vitpose",["VitPoseForPoseEstimation",Td]]]),m_=new Map([["clip",["CLIPVisionModelWithProjection",go]],["siglip",["SiglipVisionModel",cn]],["jina_clip",["JinaCLIPVisionModel",Zr]]]),h_=[[H0,x.EncoderOnly],[q0,x.EncoderDecoder],[X0,x.DecoderOnly],[Q0,x.AutoEncoder],[Kh,x.EncoderOnly],[Hh,x.EncoderOnly],[xl,x.Seq2Seq],[vl,x.Seq2Seq],[Tl,x.DecoderOnly],[J0,x.MultiModality],[qh,x.EncoderOnly],[Qh,x.EncoderOnly],[El,x.Vision2Seq],[Xh,x.ImageTextToText],[Jh,x.AudioTextToText],[Yh,x.EncoderOnly],[Gn,x.EncoderOnly],[r_,x.EncoderOnly],[t_,x.EncoderOnly],[l_,x.EncoderOnly],[Z0,x.EncoderOnly],[c_,x.EncoderOnly],[u_,x.EncoderOnly],[d_,x.EncoderOnly],[p_,x.EncoderOnly],[Zh,x.EncoderOnly],[e_,x.EncoderOnly],[s_,x.MaskGeneration],[n_,x.EncoderOnly],[o_,x.EncoderOnly],[Wh,x.Seq2Seq],[Gh,x.EncoderOnly],[i_,x.EncoderOnly],[a_,x.EncoderOnly],[m_,x.EncoderOnly]];for(const[g,w]of h_)for(const[R,oe]of g.values())T.set(R,w),b.set(oe,R),E.set(R,oe);const ev=[["MusicgenForConditionalGeneration",wl,x.Musicgen],["Phi3VForCausalLM",ln,x.Phi3V],["CLIPTextModelWithProjection",fo,x.EncoderOnly],["SiglipTextModel",bo,x.EncoderOnly],["JinaCLIPTextModel",dn,x.EncoderOnly],["ClapTextModelWithProjection",Jm,x.EncoderOnly],["ClapAudioModelWithProjection",Ym,x.EncoderOnly],["DacEncoderModel",Rh,x.EncoderOnly],["DacDecoderModel",jh,x.EncoderOnly],["MimiEncoderModel",Oh,x.EncoderOnly],["MimiDecoderModel",Dh,x.EncoderOnly],["SnacEncoderModel",Vh,x.EncoderOnly],["SnacDecoderModel",Uh,x.EncoderOnly],["Gemma3nForConditionalGeneration",Bs,x.ImageAudioTextToText]];for(const[g,w,R]of ev)T.set(g,R),b.set(w,g),E.set(g,w);const __=new Map([["modnet",Gn],["birefnet",Gn],["isnet",Gn],["ben",Gn]]);for(const[g,w]of __.entries())w.set(g,["PreTrainedModel",N]),T.set(g,x.EncoderOnly),b.set(N,g),E.set(g,N);class tv extends Rt{static MODEL_CLASS_MAPPINGS=h_.map(w=>w[0]);static BASE_IF_FAIL=!0}class rv extends Rt{static MODEL_CLASS_MAPPINGS=[Kh]}class sv extends Rt{static MODEL_CLASS_MAPPINGS=[Hh]}class nv extends Rt{static MODEL_CLASS_MAPPINGS=[xl]}class ov extends Rt{static MODEL_CLASS_MAPPINGS=[vl]}class iv extends Rt{static MODEL_CLASS_MAPPINGS=[Wh]}class av extends Rt{static MODEL_CLASS_MAPPINGS=[Gh]}class lv extends Rt{static MODEL_CLASS_MAPPINGS=[Tl]}class cv extends Rt{static MODEL_CLASS_MAPPINGS=[qh]}class uv extends Rt{static MODEL_CLASS_MAPPINGS=[Qh]}class dv extends Rt{static MODEL_CLASS_MAPPINGS=[El]}class pv extends Rt{static MODEL_CLASS_MAPPINGS=[Yh]}class mv extends Rt{static MODEL_CLASS_MAPPINGS=[Gn]}class hv extends Rt{static MODEL_CLASS_MAPPINGS=[t_]}class _v extends Rt{static MODEL_CLASS_MAPPINGS=[r_]}class fv extends Rt{static MODEL_CLASS_MAPPINGS=[Zh]}class gv extends Rt{static MODEL_CLASS_MAPPINGS=[e_]}class wv extends Rt{static MODEL_CLASS_MAPPINGS=[s_]}class Mv extends Rt{static MODEL_CLASS_MAPPINGS=[n_]}class bv extends Rt{static MODEL_CLASS_MAPPINGS=[o_]}class yv extends Rt{static MODEL_CLASS_MAPPINGS=[i_]}class vv extends Rt{static MODEL_CLASS_MAPPINGS=[a_]}class xv extends Rt{static MODEL_CLASS_MAPPINGS=[Y0]}class Tv extends Rt{static MODEL_CLASS_MAPPINGS=[l_]}class Ev extends Rt{static MODEL_CLASS_MAPPINGS=[c_]}class Pv extends Rt{static MODEL_CLASS_MAPPINGS=[u_]}class Cv extends Rt{static MODEL_CLASS_MAPPINGS=[d_]}class Sv extends Rt{static MODEL_CLASS_MAPPINGS=[p_]}class $v extends Rt{static MODEL_CLASS_MAPPINGS=[m_]}class kv extends Rt{static MODEL_CLASS_MAPPINGS=[Xh]}class Iv extends Rt{static MODEL_CLASS_MAPPINGS=[Jh]}class Av extends de{constructor({logits:w,past_key_values:R,encoder_outputs:oe,decoder_attentions:pe=null,cross_attentions:_e=null}){super(),this.logits=w,this.past_key_values=R,this.encoder_outputs=oe,this.decoder_attentions=pe,this.cross_attentions=_e}}class wt extends de{constructor({logits:w,...R}){super(),this.logits=w;const oe=Object.values(R);oe.length>0&&(this.attentions=oe)}}class f_ extends de{constructor({logits:w,embeddings:R}){super(),this.logits=w,this.embeddings=R}}class Er extends de{constructor({logits:w}){super(),this.logits=w}}class Sr extends de{constructor({logits:w}){super(),this.logits=w}}class Or extends de{constructor({start_logits:w,end_logits:R}){super(),this.start_logits=w,this.end_logits=R}}class pn extends de{constructor({logits:w}){super(),this.logits=w}}class Fv extends de{constructor({logits:w,past_key_values:R}){super(),this.logits=w,this.past_key_values=R}}class g_ extends de{constructor({alphas:w}){super(),this.alphas=w}}class w_ extends de{constructor({waveform:w,spectrogram:R}){super(),this.waveform=w,this.spectrogram=R}}}),"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":((e,r,t)=>{t.r(r),t.d(r,{ASTFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class o extends s.FeatureExtractor{constructor(i){super(i);const l=this.config.sampling_rate,c=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=c,this.window=(0,n.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(i,l){return(0,n.spectrogram)(i,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:l,transpose:!0})}async _call(i){(0,s.validate_audio_inputs)(i,"ASTFeatureExtractor");const l=await this._extract_fbank_features(i,this.config.max_length);if(this.config.do_normalize){const c=this.std*2,p=l.data;for(let d=0;d<p.length;++d)p[d]=(p[d]-this.mean)/c}return{input_values:l.unsqueeze_(0)}}}}),"./src/models/auto/feature_extraction_auto.js":((e,r,t)=>{t.r(r),t.d(r,{AutoFeatureExtractor:()=>a});var s=t("./src/utils/constants.js"),n=t("./src/utils/hub.js");t("./src/base/feature_extraction_utils.js");var o=t("./src/models/feature_extractors.js");class a{static async from_pretrained(l,c={}){const p=await(0,n.getModelJSON)(l,s.FEATURE_EXTRACTOR_NAME,!0,c),d=p.feature_extractor_type,u=o[d];if(!u)throw new Error(`Unknown feature_extractor_type: '${d}'. Please report this at ${s.GITHUB_ISSUE_URL}.`);return new u(p)}}}),"./src/models/auto/image_processing_auto.js":((e,r,t)=>{t.r(r),t.d(r,{AutoImageProcessor:()=>i});var s=t("./src/utils/constants.js"),n=t("./src/utils/hub.js"),o=t("./src/base/image_processors_utils.js"),a=t("./src/models/image_processors.js");class i{static async from_pretrained(c,p={}){const d=await(0,n.getModelJSON)(c,s.IMAGE_PROCESSOR_NAME,!0,p),u=d.image_processor_type??d.feature_extractor_type;let f=a[u?.replace(/Fast$/,"")];return f||(u!==void 0&&console.warn(`Image processor type '${u}' not found, assuming base ImageProcessor. Please report this at ${s.GITHUB_ISSUE_URL}.`),f=o.ImageProcessor),new f(d)}}}),"./src/models/auto/processing_auto.js":((e,r,t)=>{t.r(r),t.d(r,{AutoProcessor:()=>c});var s=t("./src/utils/constants.js"),n=t("./src/utils/hub.js"),o=t("./src/base/processing_utils.js"),a=t("./src/models/processors.js"),i=t("./src/models/image_processors.js"),l=t("./src/models/feature_extractors.js");class c{static async from_pretrained(d,u={}){const f=await(0,n.getModelJSON)(d,s.IMAGE_PROCESSOR_NAME,!0,u),{image_processor_type:_,feature_extractor_type:v,processor_class:I}=f;if(I&&a[I])return a[I].from_pretrained(d,u);if(!_&&!v)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const M={};if(_){const $=i[_.replace(/Fast$/,"")];if(!$)throw new Error(`Unknown image_processor_type: '${_}'.`);M.image_processor=new $(f)}if(v){const $=i[v];if($)M.image_processor=new $(f);else{const x=l[v];if(!x)throw new Error(`Unknown feature_extractor_type: '${v}'.`);M.feature_extractor=new x(f)}}const y={};return new o.Processor(y,M,null)}}}),"./src/models/beit/image_processing_beit.js":((e,r,t)=>{t.r(r),t.d(r,{BeitFeatureExtractor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/bit/image_processing_bit.js":((e,r,t)=>{t.r(r),t.d(r,{BitImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/chinese_clip/image_processing_chinese_clip.js":((e,r,t)=>{t.r(r),t.d(r,{ChineseCLIPFeatureExtractor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/clap/feature_extraction_clap.js":((e,r,t)=>{t.r(r),t.d(r,{ClapFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class o extends s.FeatureExtractor{constructor(i){super(i),this.mel_filters=(0,n.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,n.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,n.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(i,l,c,p){let d;const u=i.length-l;if(u>0)if(c==="rand_trunc"){const f=Math.floor(Math.random()*(u+1));i=i.subarray(f,f+l),d=await this._extract_fbank_features(i,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${c}" not implemented`);else{if(u<0){let f=new Float64Array(l);if(f.set(i),p==="repeat")for(let _=i.length;_<l;_+=i.length)f.set(i.subarray(0,Math.min(i.length,l-_)),_);else if(p==="repeatpad")for(let _=i.length;_<-u;_+=i.length)f.set(i,_);i=f}if(c==="fusion")throw new Error(`Truncation strategy "${c}" not implemented`);d=await this._extract_fbank_features(i,this.mel_filters_slaney,this.config.nb_max_samples)}return d.unsqueeze_(0)}async _extract_fbank_features(i,l,c=null){return(0,n.spectrogram)(i,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:l,log_mel:"dB",max_num_frames:c,do_pad:!1,transpose:!0})}async _call(i,{max_length:l=null}={}){return(0,s.validate_audio_inputs)(i,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(i,l??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}}),"./src/models/clip/image_processing_clip.js":((e,r,t)=>{t.r(r),t.d(r,{CLIPFeatureExtractor:()=>o,CLIPImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/convnext/image_processing_convnext.js":((e,r,t)=>{t.r(r),t.d(r,{ConvNextFeatureExtractor:()=>o,ConvNextImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(i){super(i),this.crop_pct=this.config.crop_pct??224/256}async resize(i){const l=this.size?.shortest_edge;if(l===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(l<384){const c=Math.floor(l/this.crop_pct),[p,d]=this.get_resize_output_image_size(i,{shortest_edge:c});i=await i.resize(p,d,{resample:this.resample}),i=await i.center_crop(l,l)}else i=await i.resize(l,l,{resample:this.resample});return i}}class o extends n{}}),"./src/models/dac/feature_extraction_dac.js":((e,r,t)=>{t.r(r),t.d(r,{DacFeatureExtractor:()=>n});var s=t("./src/models/encodec/feature_extraction_encodec.js");class n extends s.EncodecFeatureExtractor{}}),"./src/models/deit/image_processing_deit.js":((e,r,t)=>{t.r(r),t.d(r,{DeiTFeatureExtractor:()=>o,DeiTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/detr/image_processing_detr.js":((e,r,t)=>{t.r(r),t.d(r,{DetrFeatureExtractor:()=>a,DetrImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(l){const c=await super._call(l),p=[c.pixel_values.dims[0],64,64],d=(0,n.full)(p,1n);return{...c,pixel_mask:d}}post_process_object_detection(...l){return(0,s.post_process_object_detection)(...l)}post_process_panoptic_segmentation(...l){return(0,s.post_process_panoptic_segmentation)(...l)}post_process_instance_segmentation(...l){return(0,s.post_process_instance_segmentation)(...l)}}class a extends o{}}),"./src/models/dinov3_vit/image_processing_dinov3_vit.js":((e,r,t)=>{t.r(r),t.d(r,{DINOv3ViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/donut/image_processing_donut.js":((e,r,t)=>{t.r(r),t.d(r,{DonutFeatureExtractor:()=>o,DonutImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{pad_image(i,l,c,p={}){const[d,u,f]=l;let _=this.image_mean;Array.isArray(this.image_mean)||(_=new Array(f).fill(_));let v=this.image_std;Array.isArray(v)||(v=new Array(f).fill(_));const I=_.map((M,y)=>-M/v[y]);return super.pad_image(i,l,c,{center:!0,constant_values:I,...p})}}class o extends n{}}),"./src/models/dpt/image_processing_dpt.js":((e,r,t)=>{t.r(r),t.d(r,{DPTFeatureExtractor:()=>o,DPTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/efficientnet/image_processing_efficientnet.js":((e,r,t)=>{t.r(r),t.d(r,{EfficientNetImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(a){super(a),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(i=>i*i))}}}),"./src/models/encodec/feature_extraction_encodec.js":((e,r,t)=>{t.r(r),t.d(r,{EncodecFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class o extends s.FeatureExtractor{async _call(i){(0,s.validate_audio_inputs)(i,"EncodecFeatureExtractor"),i instanceof Float64Array&&(i=new Float32Array(i));const l=this.config.feature_size;if(i.length%l!==0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${l}).`);const c=[1,l,i.length/l];return{input_values:new n.Tensor("float32",i,c)}}}}),"./src/models/feature_extractors.js":((e,r,t)=>{t.r(r),t.d(r,{ASTFeatureExtractor:()=>s.ASTFeatureExtractor,ClapFeatureExtractor:()=>o.ClapFeatureExtractor,DacFeatureExtractor:()=>a.DacFeatureExtractor,EncodecFeatureExtractor:()=>n.EncodecFeatureExtractor,Gemma3nAudioFeatureExtractor:()=>i.Gemma3nAudioFeatureExtractor,ImageFeatureExtractor:()=>I.ImageProcessor,MoonshineFeatureExtractor:()=>l.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>c.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>p.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>d.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>u.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>f.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>_.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>v.WhisperFeatureExtractor});var s=t("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),n=t("./src/models/encodec/feature_extraction_encodec.js"),o=t("./src/models/clap/feature_extraction_clap.js"),a=t("./src/models/dac/feature_extraction_dac.js"),i=t("./src/models/gemma3n/feature_extraction_gemma3n.js"),l=t("./src/models/moonshine/feature_extraction_moonshine.js"),c=t("./src/models/pyannote/feature_extraction_pyannote.js"),p=t("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),d=t("./src/models/snac/feature_extraction_snac.js"),u=t("./src/models/speecht5/feature_extraction_speecht5.js"),f=t("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),_=t("./src/models/wespeaker/feature_extraction_wespeaker.js"),v=t("./src/models/whisper/feature_extraction_whisper.js"),I=t("./src/base/image_processors_utils.js")}),"./src/models/florence2/processing_florence2.js":((e,r,t)=>{t.r(r),t.d(r,{Florence2Processor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;constructor(l,c,p){super(l,c,p);const{tasks_answer_post_processing_type:d,task_prompts_without_inputs:u,task_prompts_with_input:f}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(d??{})),this.task_prompts_without_inputs=new Map(Object.entries(u??{})),this.task_prompts_with_input=new Map(Object.entries(f??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(l){typeof l=="string"&&(l=[l]);const c=[];for(const p of l)if(this.task_prompts_without_inputs.has(p))c.push(this.task_prompts_without_inputs.get(p));else{for(const[d,u]of this.task_prompts_with_input)if(p.includes(d)){c.push(u.replaceAll("{input}",p).replaceAll(d,""));break}c.length!==l.length&&c.push(p)}return c}post_process_generation(l,c,p){const d=this.tasks_answer_post_processing_type.get(c)??"pure_text";l=l.replaceAll("<s>","").replaceAll("</s>","");let u;switch(d){case"pure_text":u=l;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const f=d==="ocr"?"quad_boxes":"bboxes",_=l.matchAll(this.regexes[f]),v=[],I=[];for(const[M,y,...$]of _)v.push(y?y.trim():v.at(-1)??""),I.push($.map((x,T)=>(Number(x)+.5)/this.size_per_bin*p[T%2]));u={labels:v,[f]:I};break;default:throw new Error(`Task "${c}" (of type "${d}") not yet implemented.`)}return{[c]:u}}async _call(l,c=null,p={}){if(!l&&!c)throw new Error("Either text or images must be provided");const d=await this.image_processor(l,p),u=c?this.tokenizer(this.construct_prompts(c),p):{};return{...d,...u}}}}),"./src/models/gemma3n/feature_extraction_gemma3n.js":((e,r,t)=>{t.r(r),t.d(r,{Gemma3nAudioFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/audio.js");class a extends s.FeatureExtractor{constructor(l){super(l);const{fft_length:c,feature_size:p,min_frequency:d,max_frequency:u,sampling_rate:f,frame_length:_}=this.config,v=(0,o.mel_filter_bank)(Math.floor(1+c/2),p,d,u,f,null,"htk",!1);this.mel_filters=v,this.window=(0,o.window_function)(_,"hann")}async _extract_fbank_features(l,c){return(0,o.spectrogram)(l,this.window,this.config.frame_length,this.config.hop_length,{fft_length:this.config.fft_length,center:!1,onesided:!0,preemphasis:this.config.preemphasis,preemphasis_htk_flavor:this.config.preemphasis_htk_flavor,mel_filters:this.mel_filters,log_mel:"log",mel_floor:this.config.mel_floor,remove_dc_offset:!1,transpose:!0})}async _call(l,{max_length:c=48e4,truncation:p=!0,padding:d=!0,pad_to_multiple_of:u=128}={}){if((0,s.validate_audio_inputs)(l,"Gemma3nAudioFeatureExtractor"),p&&l.length>c&&(l=l.slice(0,c)),d&&l.length%u!==0){const v=u-l.length%u,I=new Float64Array(l.length+v);I.set(l),this.config.padding_value!==0&&I.fill(this.config.padding_value,l.length),l=I}const f=await this._extract_fbank_features(l,this.config.max_length),_=(0,n.full)([1,f.dims[0]],!0);return{input_features:f.unsqueeze_(0),input_features_mask:_}}}}),"./src/models/gemma3n/processing_gemma3n.js":((e,r,t)=>{t.r(r),t.d(r,{Gemma3nProcessor:()=>i});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/models/auto/feature_extraction_auto.js"),a=t("./src/tokenizers.js");t("./src/utils/image.js"),t("./src/utils/audio.js");class i extends s.Processor{static image_processor_class=n.AutoImageProcessor;static feature_extractor_class=o.AutoFeatureExtractor;static tokenizer_class=a.AutoTokenizer;static uses_processor_config=!0;static uses_chat_template_file=!0;constructor(c,p,d){super(c,p,d),this.audio_seq_length=this.config.audio_seq_length,this.image_seq_length=this.config.image_seq_length;const{audio_token_id:u,boa_token:f,audio_token:_,eoa_token:v,image_token_id:I,boi_token:M,image_token:y,eoi_token:$}=this.tokenizer.config;this.audio_token_id=u,this.boa_token=f,this.audio_token=_;const x=_.repeat(this.audio_seq_length);this.full_audio_sequence=`

${f}${x}${v}

`,this.image_token_id=I,this.boi_token=M,this.image_token=y;const T=y.repeat(this.image_seq_length);this.full_image_sequence=`

${M}${T}${$}

`}async _call(c,p=null,d=null,u={}){typeof c=="string"&&(c=[c]);let f;d&&(f=await this.feature_extractor(d,u),c=c.map(I=>I.replaceAll(this.audio_token,this.full_audio_sequence)));let _;return p&&(_=await this.image_processor(p,u),c=c.map(I=>I.replaceAll(this.image_token,this.full_image_sequence))),{...this.tokenizer(c,u),..._,...f}}}}),"./src/models/glpn/image_processing_glpn.js":((e,r,t)=>{t.r(r),t.d(r,{GLPNFeatureExtractor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/grounding_dino/image_processing_grounding_dino.js":((e,r,t)=>{t.r(r),t.d(r,{GroundingDinoImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(i){const l=await super._call(i),c=l.pixel_values.dims,p=(0,n.ones)([c[0],c[2],c[3]]);return{...l,pixel_mask:p}}}}),"./src/models/grounding_dino/processing_grounding_dino.js":((e,r,t)=>{t.r(r),t.d(r,{GroundingDinoProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js"),a=t("./src/base/image_processors_utils.js");function i(c,p){const u=c.dims.at(-1)-1,f=c.tolist();f.fill(!1,0,1),f.fill(!1,u);const _=p.tolist();return f.map((v,I)=>v?I:null).filter(v=>v!==null).map(v=>_[v])}class l extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;async _call(p,d,u={}){const f=p?await this.image_processor(p,u):{};return{...d?this.tokenizer(d,u):{},...f}}post_process_grounded_object_detection(p,d,{box_threshold:u=.25,text_threshold:f=.25,target_sizes:_=null}={}){const{logits:v,pred_boxes:I}=p,M=v.dims[0];if(_!==null&&_.length!==M)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const y=v.dims.at(1),$=v.sigmoid(),x=$.max(-1).tolist(),T=I.tolist().map(b=>b.map(S=>(0,a.center_to_corners_format)(S))),E=[];for(let b=0;b<M;++b){const S=_!==null?_[b]:null;S!==null&&(T[b]=T[b].map(z=>z.map((Z,Q)=>Z*S[(Q+1)%2])));const D=x[b],O=[],H=[],G=[];for(let z=0;z<y;++z){const Z=D[z];if(Z<=u)continue;const Q=T[b][z],Y=$[b][z];O.push(Z),G.push(Q);const re=i(Y.gt(f),d[b]);H.push(re)}E.push({scores:O,boxes:G,labels:this.batch_decode(H)})}return E}}}),"./src/models/idefics3/image_processing_idefics3.js":((e,r,t)=>{t.r(r),t.d(r,{Idefics3ImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{constructor(i){super(i),this.do_image_splitting=i.do_image_splitting??!0,this.max_image_size=i.max_image_size}get_resize_for_vision_encoder(i,l){let[c,p]=i.dims.slice(-2);const d=p/c;return p>=c?(p=Math.ceil(p/l)*l,c=Math.floor(p/d),c=Math.ceil(c/l)*l):(c=Math.ceil(c/l)*l,p=Math.floor(c*d),p=Math.ceil(p/l)*l),{height:c,width:p}}async _call(i,{do_image_splitting:l=null,return_row_col_info:c=!1}={}){let p;if(!Array.isArray(i))p=[[i]];else{if(i.length===0||!i[0])throw new Error("No images provided.");Array.isArray(i[0])?p=i:p=[i]}let d=[],u=[],f=[];const _=[],v=[];for(const b of p){let S=await Promise.all(b.map(H=>this.preprocess(H)));_.push(...S.map(H=>H.original_size)),v.push(...S.map(H=>H.reshaped_input_size)),S.forEach(H=>H.pixel_values.unsqueeze_(0));const{longest_edge:D}=this.max_image_size;let O;if(l??this.do_image_splitting){let H=new Array(S.length),G=new Array(S.length);O=await Promise.all(S.map(async(z,Z)=>{const Q=this.get_resize_for_vision_encoder(z.pixel_values,D),Y=await(0,n.interpolate_4d)(z.pixel_values,{size:[Q.height,Q.width]}),{frames:re,num_splits_h:te,num_splits_w:le}=await this.split_image(Y,this.max_image_size);return H[Z]=te,G[Z]=le,(0,n.cat)(re,0)})),u.push(H),f.push(G)}else{const H=[D,D];O=await Promise.all(S.map(G=>(0,n.interpolate_4d)(G.pixel_values,{size:H}))),u.push(new Array(S.length).fill(0)),f.push(new Array(S.length).fill(0))}d.push((0,n.cat)(O,0))}const I=d.length,[M,y,$,x]=d[0].dims;let T,E;if(I===1)T=d[0].unsqueeze_(0),E=(0,n.full)([I,M,$,x],!0);else{const b=Math.max(...d.map(O=>O.dims.at(0)));E=(0,n.full)([I,b,$,x],!0);const S=E.data,D=b*$*x;for(let O=0;O<I;++O){const H=d[O].dims[0];if(H<b){d[O]=(0,n.cat)([d[O],(0,n.full)([b-H,y,$,x],0)],0);const G=O*D+H*$*x,z=(O+1)*D;S.fill(!1,G,z)}}T=(0,n.stack)(d,0)}return{pixel_values:T,pixel_attention_mask:E,original_sizes:_,reshaped_input_sizes:v,...c?{rows:u,cols:f}:{}}}async split_image(i,{longest_edge:l}){const c=l,p=l,d=[],[u,f]=i.dims.slice(-2);let _=0,v=0;if(u>c||f>p){_=Math.ceil(u/c),v=Math.ceil(f/p);const I=Math.ceil(u/_),M=Math.ceil(f/v);for(let x=0;x<_;++x)for(let T=0;T<v;++T){let E,b,S,D;x===_-1?(b=u-I,D=u):(b=x*I,D=(x+1)*I),T===v-1?(E=f-M,S=f):(E=T*M,S=(T+1)*M);const O=[b,E],H=[D,S],G=await(0,n.slice)(i,O,H,[2,3]);d.push(G)}const y=c,$=p;(u!==y||f!==$)&&(i=await(0,n.interpolate_4d)(i,{size:[y,$]}))}return d.push(i),{frames:d,num_splits_h:_,num_splits_w:v}}}}),"./src/models/idefics3/processing_idefics3.js":((e,r,t)=>{t.r(r),t.d(r,{Idefics3Processor:()=>p});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");t("./src/utils/image.js");var a=t("./src/utils/core.js");function i(d,u,f,_,v,I){let M="";for(let y=0;y<u;++y){for(let $=0;$<f;++$)M+=_+`<row_${y+1}_col_${$+1}>`+v.repeat(d);M+=`
`}return M+=`
${_}${I}`+v.repeat(d)+`${_}`,M}function l(d,u,f,_){return`${u}${_}`+f.repeat(d)+`${u}`}function c(d,u,f,_,v,I){return d===0&&u===0?l(f,_,v,I):i(f,d,u,_,v,I)}class p extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(u,f=null,_={}){_.return_row_col_info??=!0;let v;f&&(v=await this.image_processor(f,_)),Array.isArray(u)||(u=[u]);const I=v.rows??[new Array(u.length).fill(0)],M=v.cols??[new Array(u.length).fill(0)],y=this.config.image_seq_len,$=[],x=[];for(let E=0;E<u.length;++E){const b=u[E],S=I[E],D=M[E];$.push((0,a.count)(b,this.image_token));const O=S.map((z,Z)=>c(z,D[Z],y,this.fake_image_token,this.image_token,this.global_img_token)),H=b.split(this.image_token);if(H.length===0)throw new Error("The image token should be present in the text.");let G=H[0];for(let z=0;z<O.length;++z)G+=O[z]+H[z+1];x.push(G)}return{...this.tokenizer(x),...v}}}}),"./src/models/image_processors.js":((e,r,t)=>{t.r(r),t.d(r,{BeitFeatureExtractor:()=>s.BeitFeatureExtractor,BitImageProcessor:()=>n.BitImageProcessor,CLIPFeatureExtractor:()=>a.CLIPFeatureExtractor,CLIPImageProcessor:()=>a.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>o.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>i.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>i.ConvNextImageProcessor,DINOv3ViTImageProcessor:()=>p.DINOv3ViTImageProcessor,DPTFeatureExtractor:()=>u.DPTFeatureExtractor,DPTImageProcessor:()=>u.DPTImageProcessor,DeiTFeatureExtractor:()=>l.DeiTFeatureExtractor,DeiTImageProcessor:()=>l.DeiTImageProcessor,DetrFeatureExtractor:()=>c.DetrFeatureExtractor,DetrImageProcessor:()=>c.DetrImageProcessor,DonutFeatureExtractor:()=>d.DonutFeatureExtractor,DonutImageProcessor:()=>d.DonutImageProcessor,EfficientNetImageProcessor:()=>f.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>_.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>v.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>I.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>y.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>$.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>x.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>T.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>T.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>E.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>E.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>b.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>b.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>S.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>S.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>D.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>D.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>O.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>O.MobileViTImageProcessor,NougatImageProcessor:()=>H.NougatImageProcessor,OwlViTFeatureExtractor:()=>z.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>z.OwlViTImageProcessor,Owlv2ImageProcessor:()=>G.Owlv2ImageProcessor,Phi3VImageProcessor:()=>Z.Phi3VImageProcessor,PvtImageProcessor:()=>Q.PvtImageProcessor,Qwen2VLImageProcessor:()=>Y.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>re.RTDetrImageProcessor,SamImageProcessor:()=>te.SamImageProcessor,SegformerFeatureExtractor:()=>le.SegformerFeatureExtractor,SegformerImageProcessor:()=>le.SegformerImageProcessor,SiglipImageProcessor:()=>ue.SiglipImageProcessor,SmolVLMImageProcessor:()=>B.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>F.Swin2SRImageProcessor,VLMImageProcessor:()=>M.VLMImageProcessor,ViTFeatureExtractor:()=>K.ViTFeatureExtractor,ViTImageProcessor:()=>K.ViTImageProcessor,VitMatteImageProcessor:()=>j.VitMatteImageProcessor,VitPoseImageProcessor:()=>ie.VitPoseImageProcessor,YolosFeatureExtractor:()=>ke.YolosFeatureExtractor,YolosImageProcessor:()=>ke.YolosImageProcessor});var s=t("./src/models/beit/image_processing_beit.js"),n=t("./src/models/bit/image_processing_bit.js"),o=t("./src/models/chinese_clip/image_processing_chinese_clip.js"),a=t("./src/models/clip/image_processing_clip.js"),i=t("./src/models/convnext/image_processing_convnext.js"),l=t("./src/models/deit/image_processing_deit.js"),c=t("./src/models/detr/image_processing_detr.js"),p=t("./src/models/dinov3_vit/image_processing_dinov3_vit.js"),d=t("./src/models/donut/image_processing_donut.js"),u=t("./src/models/dpt/image_processing_dpt.js"),f=t("./src/models/efficientnet/image_processing_efficientnet.js"),_=t("./src/models/glpn/image_processing_glpn.js"),v=t("./src/models/grounding_dino/image_processing_grounding_dino.js"),I=t("./src/models/idefics3/image_processing_idefics3.js"),M=t("./src/models/janus/image_processing_janus.js"),y=t("./src/models/jina_clip/image_processing_jina_clip.js"),$=t("./src/models/llava_onevision/image_processing_llava_onevision.js"),x=t("./src/models/mask2former/image_processing_mask2former.js"),T=t("./src/models/maskformer/image_processing_maskformer.js"),E=t("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),b=t("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),S=t("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),D=t("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),O=t("./src/models/mobilevit/image_processing_mobilevit.js"),H=t("./src/models/nougat/image_processing_nougat.js"),G=t("./src/models/owlv2/image_processing_owlv2.js"),z=t("./src/models/owlvit/image_processing_owlvit.js"),Z=t("./src/models/phi3_v/image_processing_phi3_v.js"),Q=t("./src/models/pvt/image_processing_pvt.js"),Y=t("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),re=t("./src/models/rt_detr/image_processing_rt_detr.js"),te=t("./src/models/sam/image_processing_sam.js"),le=t("./src/models/segformer/image_processing_segformer.js"),ue=t("./src/models/siglip/image_processing_siglip.js"),B=t("./src/models/smolvlm/image_processing_smolvlm.js"),F=t("./src/models/swin2sr/image_processing_swin2sr.js"),K=t("./src/models/vit/image_processing_vit.js"),j=t("./src/models/vitmatte/image_processing_vitmatte.js"),ie=t("./src/models/vitpose/image_processing_vitpose.js"),ke=t("./src/models/yolos/image_processing_yolos.js")}),"./src/models/janus/image_processing_janus.js":((e,r,t)=>{t.r(r),t.d(r,{VLMImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(a){super({do_pad:!0,pad_size:{width:a.image_size,height:a.image_size},...a}),this.constant_values=this.config.background_color.map(i=>i*this.rescale_factor)}pad_image(a,i,l,c){return super.pad_image(a,i,l,{constant_values:this.constant_values,center:!0,...c})}}}),"./src/models/janus/processing_janus.js":((e,r,t)=>{t.r(r),t.d(r,{VLChatProcessor:()=>c});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js"),a=t("./src/utils/core.js"),i=t("./src/utils/tensor.js"),l=t("./src/utils/image.js");class c extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;static uses_processor_config=!0;constructor(d,u,f){super(d,u,f),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(d,{images:u=null,chat_template:f="default"}={}){u?Array.isArray(u)||(u=[u]):u=await Promise.all(d.filter(O=>O.images).flatMap(O=>O.images).map(O=>l.RawImage.read(O)));const _=this.tokenizer,v=_.apply_chat_template(d,{tokenize:!1,add_generation_prompt:!0,chat_template:f}),I=O=>_.encode(O,{add_special_tokens:!1}),M=v.split(this.image_tag),y=M.length-1;if(u.length!==y)throw new Error(`Number of images provided (${u.length}) does not match number of "${this.image_tag}" image tags (${y})`);const[$,x,T]=_.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let E=I(M[0]),b=new Array(E.length).fill(!1);for(let O=1;O<M.length;++O){const H=new Array(this.num_image_tokens).fill($),G=I(M[O]);E=(0,a.mergeArrays)(E,[x],H,[T],G);const z=new Array(this.num_image_tokens).fill(!0);b=(0,a.mergeArrays)(b,[!1],z,[!1],new Array(G.length).fill(!1))}const S=[1,E.length],D={input_ids:new i.Tensor("int64",E,S),attention_mask:new i.Tensor("int64",new Array(E.length).fill(1),S),images_seq_mask:new i.Tensor("bool",b,S),images_emb_mask:new i.Tensor("bool",new Array(y*this.num_image_tokens).fill(!0),[1,y,this.num_image_tokens])};if(u&&u.length>0){const O=await this.image_processor(u);return O.pixel_values.unsqueeze_(0),{...D,...O}}return D}}}),"./src/models/jina_clip/image_processing_jina_clip.js":((e,r,t)=>{t.r(r),t.d(r,{JinaCLIPImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{constructor(a){const{resize_mode:i,fill_color:l,interpolation:c,size:p,...d}=a,u=i==="squash"?{width:p,height:p}:i==="shortest"?{shortest_edge:p}:{longest_edge:p},f=c==="bicubic"?3:2;super({...d,size:u,resample:f,do_center_crop:!0,crop_size:p,do_normalize:!0})}}}),"./src/models/jina_clip/processing_jina_clip.js":((e,r,t)=>{t.r(r),t.d(r,{JinaCLIPProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;async _call(l=null,c=null,p={}){if(!l&&!c)throw new Error("Either text or images must be provided");const d=l?this.tokenizer(l,p):{},u=c?await this.image_processor(c,p):{};return{...d,...u}}}}),"./src/models/llava/processing_llava.js":((e,r,t)=>{t.r(r),t.d(r,{LlavaProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;static uses_processor_config=!0;async _call(l,c=null,p={}){const d=await this.image_processor(l,p);if(c){const[f,_]=d.pixel_values.dims.slice(-2),{image_token:v,patch_size:I,num_additional_image_tokens:M}=this.config,y=Math.floor(f/I)*Math.floor(_/I)+M;c=structuredClone(c),Array.isArray(c)||(c=[c]);for(let $=0;$<c.length;++$)c[$]=c[$].replace(v,v.repeat(y))}const u=c?this.tokenizer(c,p):{};return{...d,...u}}}}),"./src/models/llava_onevision/image_processing_llava_onevision.js":((e,r,t)=>{t.r(r),t.d(r,{LlavaOnevisionImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/mask2former/image_processing_mask2former.js":((e,r,t)=>{t.r(r),t.d(r,{Mask2FormerImageProcessor:()=>n});var s=t("./src/models/maskformer/image_processing_maskformer.js");class n extends s.MaskFormerImageProcessor{}}),"./src/models/maskformer/image_processing_maskformer.js":((e,r,t)=>{t.r(r),t.d(r,{MaskFormerFeatureExtractor:()=>o,MaskFormerImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_panoptic_segmentation(...i){return(0,s.post_process_panoptic_segmentation)(...i)}post_process_instance_segmentation(...i){return(0,s.post_process_instance_segmentation)(...i)}}class o extends n{}}),"./src/models/mgp_str/processing_mgp_str.js":((e,r,t)=>{t.r(r),t.d(r,{MgpstrProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js"),a=t("./src/utils/maths.js");const i={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class l extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(p,d){if(!i.hasOwnProperty(d))throw new Error(`Format ${d} is not supported.`);const[u,f]=i[d],_=this[u].bind(this),[v,I]=p.dims,M=[],y=[],$=p.tolist();for(let T=0;T<v;++T){const E=$[T],b=[],S=[];for(let O=1;O<I;++O){const[H,G]=(0,a.max)((0,a.softmax)(E[O]));if(S.push(H),G==f)break;b.push(G)}const D=S.length>0?S.reduce((O,H)=>O*H,1):0;y.push(b),M.push(D)}return[_(y),M]}char_decode(p){return this.char_tokenizer.batch_decode(p).map(d=>d.replaceAll(" ",""))}bpe_decode(p){return this.bpe_tokenizer.batch_decode(p)}wp_decode(p){return this.wp_tokenizer.batch_decode(p).map(d=>d.replaceAll(" ",""))}batch_decode([p,d,u]){const[f,_]=this._decode_helper(p,"char"),[v,I]=this._decode_helper(d,"bpe"),[M,y]=this._decode_helper(u,"wp"),$=[],x=[];for(let T=0;T<f.length;++T){const[E,b]=(0,a.max)([_[T],I[T],y[T]]);$.push([f[T],v[T],M[T]][b]),x.push(E)}return{generated_text:$,scores:x,char_preds:f,bpe_preds:v,wp_preds:M}}static async from_pretrained(...p){const d=await super.from_pretrained(...p),u=await o.AutoTokenizer.from_pretrained("Xenova/gpt2"),f=await o.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return d.components={image_processor:d.image_processor,char_tokenizer:d.tokenizer,bpe_tokenizer:u,wp_tokenizer:f},d}async _call(p,d=null){const u=await this.image_processor(p);return d&&(u.labels=this.tokenizer(d).input_ids),u}}}),"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":((e,r,t)=>{t.r(r),t.d(r,{MobileNetV1FeatureExtractor:()=>o,MobileNetV1ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":((e,r,t)=>{t.r(r),t.d(r,{MobileNetV2FeatureExtractor:()=>o,MobileNetV2ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":((e,r,t)=>{t.r(r),t.d(r,{MobileNetV3FeatureExtractor:()=>o,MobileNetV3ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":((e,r,t)=>{t.r(r),t.d(r,{MobileNetV4FeatureExtractor:()=>o,MobileNetV4ImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/mobilevit/image_processing_mobilevit.js":((e,r,t)=>{t.r(r),t.d(r,{MobileViTFeatureExtractor:()=>o,MobileViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/moonshine/feature_extraction_moonshine.js":((e,r,t)=>{t.r(r),t.d(r,{MoonshineFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class o extends s.FeatureExtractor{async _call(i){(0,s.validate_audio_inputs)(i,"MoonshineFeatureExtractor"),i instanceof Float64Array&&(i=new Float32Array(i));const l=[1,i.length];return{input_values:new n.Tensor("float32",i,l)}}}}),"./src/models/moonshine/processing_moonshine.js":((e,r,t)=>{t.r(r),t.d(r,{MoonshineProcessor:()=>a});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}}),"./src/models/nougat/image_processing_nougat.js":((e,r,t)=>{t.r(r),t.d(r,{NougatImageProcessor:()=>n});var s=t("./src/models/donut/image_processing_donut.js");class n extends s.DonutImageProcessor{}}),"./src/models/owlv2/image_processing_owlv2.js":((e,r,t)=>{t.r(r),t.d(r,{Owlv2ImageProcessor:()=>n});var s=t("./src/models/owlvit/image_processing_owlvit.js");class n extends s.OwlViTImageProcessor{}}),"./src/models/owlvit/image_processing_owlvit.js":((e,r,t)=>{t.r(r),t.d(r,{OwlViTFeatureExtractor:()=>o,OwlViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_object_detection(...i){return(0,s.post_process_object_detection)(...i)}}class o extends n{}}),"./src/models/owlvit/processing_owlvit.js":((e,r,t)=>{t.r(r),t.d(r,{OwlViTProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");class a extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor}}),"./src/models/paligemma/processing_paligemma.js":((e,r,t)=>{t.r(r),t.d(r,{PaliGemmaProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");const a="<image>";function i(c,p,d,u,f){return`${u.repeat(d*f)}${p}${c}
`}class l extends s.Processor{static tokenizer_class=o.AutoTokenizer;static image_processor_class=n.AutoImageProcessor;static uses_processor_config=!1;async _call(p,d=null,u={}){d||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),d=""),Array.isArray(p)||(p=[p]),Array.isArray(d)||(d=[d]);const f=this.tokenizer.bos_token,_=this.image_processor.config.image_seq_length;let v;d.some(y=>y.includes(a))?v=d.map(y=>{const $=y.replaceAll(a,a.repeat(_)),x=$.lastIndexOf(a),T=x===-1?0:x+a.length;return $.slice(0,T)+f+$.slice(T)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),v=d.map(y=>i(y,f,_,a,p.length)));const I=this.tokenizer(v,u);return{...await this.image_processor(p,u),...I}}}}),"./src/models/phi3_v/image_processing_phi3_v.js":((e,r,t)=>{t.r(r),t.d(r,{Phi3VImageProcessor:()=>p});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");const o=336,a=[2,3],{ceil:i,floor:l,sqrt:c}=Math;class p extends s.ImageProcessor{constructor(u){super({...u,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=u.num_crops}calc_num_image_tokens_from_image_size(u,f){const{num_img_tokens:_}=this.config;return l((l(f/o)*l(u/o)+1)*_+1+(l(f/o)+1)*c(_))}get_resize_output_image_size(u,f){const _=this._num_crops,[v,I]=u.size;let M=v/I,y=1;for(;y*Math.ceil(y/M)<=_;)y+=1;y-=1;const $=Math.floor(y*336),x=Math.floor($/M);return[$,x]}pad_image(u,f,_,v={}){const[I,M]=f,y=o*i(I/o),$=o*i(M/o),x=[1,1,1].map((T,E)=>(T-this.image_mean[E])/this.image_std[E]);return super.pad_image(u,f,{width:$,height:y},{center:!0,constant_values:x,...v})}async _call(u,{num_crops:f=null}={}){if(this._num_crops=f??=this.config.num_crops,f<4||c(f)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(u)||(u=[u]);const _=u.length,v=await Promise.all(u.map(b=>this.preprocess(b))),I=v.map(b=>b.original_size),M=v.map(b=>b.reshaped_input_size),y=[];for(const{pixel_values:b}of v){b.unsqueeze_(0);const[S,D]=b.dims.slice(-2),O=await(0,n.interpolate_4d)(b,{size:[o,o],mode:"bicubic"});if(f>0){const H=[],G=c(f),z=l(D/G),Z=l(S/G);for(let Y=0;Y<G;++Y)for(let re=0;re<G;++re){let te,le,ue,B;Y===G-1?(le=S-Z,B=S):(le=Y*Z,B=(Y+1)*Z),re===G-1?(te=D-z,ue=D):(te=re*z,ue=(re+1)*z);const F=[le,te],K=[B,ue],j=await(0,n.slice)(b,F,K,a);H.push(j)}const Q=await(0,n.interpolate_4d)((0,n.cat)(H,0),{size:[o,o],mode:"bicubic"});y.push((0,n.cat)([O,Q],0))}else y.push(O)}const $=(0,n.stack)(y,0),x=M.map(b=>b.map(S=>o*i(S/o))),T=new n.Tensor("int64",x.flat(),[_,2]),E=x.map(([b,S])=>this.calc_num_image_tokens_from_image_size(S,b));return{pixel_values:$,original_sizes:I,reshaped_input_sizes:M,image_sizes:T,num_img_tokens:E}}}}),"./src/models/phi3_v/processing_phi3_v.js":((e,r,t)=>{t.r(r),t.d(r,{Phi3VProcessor:()=>l});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");t("./src/utils/image.js");const a="<|image|>",i=/<\|image_\d+\|>/g;class l extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;async _call(p,d=null,{padding:u=!0,truncation:f=!0,num_crops:_=null}={}){Array.isArray(p)||(p=[p]);let v,I;if(d){I=await this.image_processor(d,{num_crops:_});const{num_img_tokens:M}=I,y=p.map((x,T)=>x.split(i).join(a.repeat(M[T])));v=this.tokenizer(y,{padding:u,truncation:f});const $=this.tokenizer.model.convert_tokens_to_ids([a])[0];v.input_ids.map_(x=>x==$?-x:x)}else v=this.tokenizer(p);return{...v,...I}}}}),"./src/models/processors.js":((e,r,t)=>{t.r(r),t.d(r,{Florence2Processor:()=>s.Florence2Processor,Gemma3nProcessor:()=>n.Gemma3nProcessor,GroundingDinoProcessor:()=>o.GroundingDinoProcessor,Idefics3Processor:()=>a.Idefics3Processor,JinaCLIPProcessor:()=>l.JinaCLIPProcessor,LlavaProcessor:()=>c.LlavaProcessor,MgpstrProcessor:()=>p.MgpstrProcessor,MoonshineProcessor:()=>d.MoonshineProcessor,OwlViTProcessor:()=>u.OwlViTProcessor,PaliGemmaProcessor:()=>_.PaliGemmaProcessor,Phi3VProcessor:()=>f.Phi3VProcessor,PyAnnoteProcessor:()=>v.PyAnnoteProcessor,Qwen2VLProcessor:()=>I.Qwen2VLProcessor,SamProcessor:()=>M.SamProcessor,SmolVLMProcessor:()=>y.SmolVLMProcessor,SpeechT5Processor:()=>$.SpeechT5Processor,UltravoxProcessor:()=>x.UltravoxProcessor,VLChatProcessor:()=>i.VLChatProcessor,VoxtralProcessor:()=>T.VoxtralProcessor,Wav2Vec2Processor:()=>E.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>b.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>S.WhisperProcessor});var s=t("./src/models/florence2/processing_florence2.js"),n=t("./src/models/gemma3n/processing_gemma3n.js"),o=t("./src/models/grounding_dino/processing_grounding_dino.js"),a=t("./src/models/idefics3/processing_idefics3.js"),i=t("./src/models/janus/processing_janus.js"),l=t("./src/models/jina_clip/processing_jina_clip.js"),c=t("./src/models/llava/processing_llava.js"),p=t("./src/models/mgp_str/processing_mgp_str.js"),d=t("./src/models/moonshine/processing_moonshine.js"),u=t("./src/models/owlvit/processing_owlvit.js"),f=t("./src/models/phi3_v/processing_phi3_v.js"),_=t("./src/models/paligemma/processing_paligemma.js"),v=t("./src/models/pyannote/processing_pyannote.js"),I=t("./src/models/qwen2_vl/processing_qwen2_vl.js"),M=t("./src/models/sam/processing_sam.js"),y=t("./src/models/smolvlm/processing_smolvlm.js"),$=t("./src/models/speecht5/processing_speecht5.js"),x=t("./src/models/ultravox/processing_ultravox.js"),T=t("./src/models/voxtral/processing_voxtral.js"),E=t("./src/models/wav2vec2/processing_wav2vec2.js"),b=t("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),S=t("./src/models/whisper/processing_whisper.js")}),"./src/models/pvt/image_processing_pvt.js":((e,r,t)=>{t.r(r),t.d(r,{PvtImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/pyannote/feature_extraction_pyannote.js":((e,r,t)=>{t.r(r),t.d(r,{PyAnnoteFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/maths.js");class a extends s.FeatureExtractor{async _call(l){(0,s.validate_audio_inputs)(l,"PyAnnoteFeatureExtractor"),l instanceof Float64Array&&(l=new Float32Array(l));const c=[1,1,l.length];return{input_values:new n.Tensor("float32",l,c)}}samples_to_frames(l){return(l-this.config.offset)/this.config.step}post_process_speaker_diarization(l,c){const p=c/this.samples_to_frames(c)/this.config.sampling_rate,d=[];for(const u of l.tolist()){const f=[];let _=-1;for(let v=0;v<u.length;++v){const I=(0,o.softmax)(u[v]),[M,y]=(0,o.max)(I),[$,x]=[v,v+1];y!==_?(_=y,f.push({id:y,start:$,end:x,score:M})):(f.at(-1).end=x,f.at(-1).score+=M)}d.push(f.map(({id:v,start:I,end:M,score:y})=>({id:v,start:I*p,end:M*p,confidence:y/(M-I)})))}return d}}}),"./src/models/pyannote/processing_pyannote.js":((e,r,t)=>{t.r(r),t.d(r,{PyAnnoteProcessor:()=>o});var s=t("./src/base/processing_utils.js"),n=t("./src/models/pyannote/feature_extraction_pyannote.js");class o extends s.Processor{static feature_extractor_class=n.PyAnnoteFeatureExtractor;async _call(i){return await this.feature_extractor(i)}post_process_speaker_diarization(...i){return this.feature_extractor.post_process_speaker_diarization(...i)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}}),"./src/models/qwen2_vl/image_processing_qwen2_vl.js":((e,r,t)=>{t.r(r),t.d(r,{Qwen2VLImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(i,...l){const{pixel_values:c,original_sizes:p,reshaped_input_sizes:d}=await super._call(i,...l);let u=c;const{temporal_patch_size:f,merge_size:_,patch_size:v}=this.config;u.dims[0]===1&&(u=(0,n.cat)(Array.from({length:f},()=>u),0));const I=u.dims[0]/f,M=u.dims[1],y=Math.floor(u.dims[2]/v),$=Math.floor(u.dims[3]/v),x=u.view(I,f,M,Math.floor(y/_),_,v,Math.floor($/_),_,v).permute(0,3,6,4,7,2,1,5,8).view(I*y*$,M*f*v*v),T=new n.Tensor("int64",[I,y,$],[1,3]);return{pixel_values:x,image_grid_thw:T,original_sizes:p,reshaped_input_sizes:d}}}}),"./src/models/qwen2_vl/processing_qwen2_vl.js":((e,r,t)=>{t.r(r),t.d(r,{Qwen2VLProcessor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js"),o=t("./src/tokenizers.js");t("./src/utils/image.js");class a extends s.Processor{static image_processor_class=n.AutoImageProcessor;static tokenizer_class=o.AutoTokenizer;async _call(l,c=null,...p){Array.isArray(l)||(l=[l]);let d,u;if(c&&(d=await this.image_processor(c),u=d.image_grid_thw),u){let _=this.image_processor.config.merge_size**2,v=0;const I=u.tolist();l=l.map(M=>{for(;M.includes("<|image_pad|>");){const y=Number(I[v++].reduce(($,x)=>$*x,1n));M=M.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(y/_)))}return M.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(l),...d}}}}),"./src/models/rt_detr/image_processing_rt_detr.js":((e,r,t)=>{t.r(r),t.d(r,{RTDetrImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_object_detection(...a){return(0,s.post_process_object_detection)(...a)}}}),"./src/models/sam/image_processing_sam.js":((e,r,t)=>{t.r(r),t.d(r,{SamImageProcessor:()=>a});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/core.js"),o=t("./src/utils/tensor.js");class a extends s.ImageProcessor{reshape_input_points(l,c,p,d=!1){l=structuredClone(l);let u=(0,n.calculateDimensions)(l);if(u.length===3)d||(u=[1,...u]),l=[l];else if(u.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let f=0;f<l.length;++f){let _=c[f],v=p[f],I=[v[0]/_[0],v[1]/_[1]];for(let M=0;M<l[f].length;++M)for(let y=0;y<l[f][M].length;++y)for(let $=0;$<l[f][M][y].length;++$)l[f][M][y][$]*=I[$%2]}return new o.Tensor("float32",Float32Array.from(l.flat(1/0)),u)}add_input_labels(l,c){let p=(0,n.calculateDimensions)(l);if(p.length===2)p=[1,...p],l=[l];else if(p.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(p.some((d,u)=>d!==c.dims[u]))throw Error(`The first ${p.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new o.Tensor("int64",l.flat(1/0).map(BigInt),p)}async _call(l,{input_points:c=null,input_labels:p=null,input_boxes:d=null}={}){const u=await super._call(l);if(c&&(u.input_points=this.reshape_input_points(c,u.original_sizes,u.reshaped_input_sizes)),p){if(!u.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");u.input_labels=this.add_input_labels(p,u.input_points)}return d&&(u.input_boxes=this.reshape_input_points(d,u.original_sizes,u.reshaped_input_sizes,!0)),u}async post_process_masks(l,c,p,{mask_threshold:d=0,binarize:u=!0,pad_size:f=null}={}){const _=[];f=f??this.pad_size;const v=[f.height,f.width];for(let I=0;I<c.length;++I){const M=c[I],y=p[I];let $=await(0,o.interpolate_4d)(l[I],{mode:"bilinear",size:v});if($=$.slice(null,null,[0,y[0]],[0,y[1]]),$=await(0,o.interpolate_4d)($,{mode:"bilinear",size:M}),u){const x=$.data,T=new Uint8Array(x.length);for(let E=0;E<x.length;++E)x[E]>d&&(T[E]=1);$=new o.Tensor("bool",T,$.dims)}_.push($)}return _}generate_crop_boxes(l,c,{crop_n_layers:p=0,overlap_ratio:d=512/1500,points_per_crop:u=32,crop_n_points_downscale_factor:f=1}={}){}}}),"./src/models/sam/processing_sam.js":((e,r,t)=>{t.r(r),t.d(r,{SamProcessor:()=>o});var s=t("./src/base/processing_utils.js"),n=t("./src/models/auto/image_processing_auto.js");class o extends s.Processor{static image_processor_class=n.AutoImageProcessor;async _call(...i){return await this.image_processor(...i)}post_process_masks(...i){return this.image_processor.post_process_masks(...i)}reshape_input_points(...i){return this.image_processor.reshape_input_points(...i)}}}),"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":((e,r,t)=>{t.r(r),t.d(r,{SeamlessM4TFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js"),o=t("./src/utils/audio.js");class a extends s.FeatureExtractor{constructor(l){super(l);const c=this.config.sampling_rate,p=(0,o.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(c/2),c,null,"kaldi",!0);this.mel_filters=p,this.window=(0,o.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(l,c){return l=l.map(p=>p*32768),(0,o.spectrogram)(l,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:c,transpose:!0})}async _call(l,{padding:c=!0,pad_to_multiple_of:p=2,do_normalize_per_mel_bins:d=!0,return_attention_mask:u=!0}={}){(0,s.validate_audio_inputs)(l,"SeamlessM4TFeatureExtractor");let f=await this._extract_fbank_features(l,this.config.max_length);if(d){const[T,E]=f.dims,b=f.data;for(let S=0;S<E;++S){let D=0;for(let z=0;z<T;++z)D+=b[z*E+S];const O=D/T;let H=0;for(let z=0;z<T;++z)H+=(b[z*E+S]-O)**2;H/=T-1;const G=Math.sqrt(H+1e-7);for(let z=0;z<T;++z){const Z=z*E+S;b[Z]=(b[Z]-O)/G}}}let _;if(c){const[T,E]=f.dims,b=f.data,S=T%p;if(S>0){const D=new Float32Array(E*(T+S));D.set(b),D.fill(this.config.padding_value,b.length);const O=T+S;f=new n.Tensor(f.type,D,[O,E]),u&&(_=new n.Tensor("int64",new BigInt64Array(O),[1,O]),_.data.fill(1n,0,T))}}const[v,I]=f.dims,M=this.config.stride;if(v%M!==0)throw new Error(`The number of frames (${v}) must be a multiple of the stride (${M}).`);const $=f.view(1,Math.floor(v/M),I*M),x={input_features:$};if(u){const T=$.dims[1],E=new BigInt64Array(T);if(_){const b=_.data;for(let S=1,D=0;S<v;S+=M,++D)E[D]=b[S]}else E.fill(1n);x.attention_mask=new n.Tensor("int64",E,[1,T])}return x}}}),"./src/models/segformer/image_processing_segformer.js":((e,r,t)=>{t.r(r),t.d(r,{SegformerFeatureExtractor:()=>o,SegformerImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_semantic_segmentation(...i){return(0,s.post_process_semantic_segmentation)(...i)}}class o extends n{}}),"./src/models/siglip/image_processing_siglip.js":((e,r,t)=>{t.r(r),t.d(r,{SiglipImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}}),"./src/models/smolvlm/image_processing_smolvlm.js":((e,r,t)=>{t.r(r),t.d(r,{SmolVLMImageProcessor:()=>s.Idefics3ImageProcessor});var s=t("./src/models/idefics3/image_processing_idefics3.js")}),"./src/models/smolvlm/processing_smolvlm.js":((e,r,t)=>{t.r(r),t.d(r,{SmolVLMProcessor:()=>s.Idefics3Processor});var s=t("./src/models/idefics3/processing_idefics3.js")}),"./src/models/snac/feature_extraction_snac.js":((e,r,t)=>{t.r(r),t.d(r,{SnacFeatureExtractor:()=>n});var s=t("./src/models/dac/feature_extraction_dac.js");class n extends s.DacFeatureExtractor{}}),"./src/models/speecht5/feature_extraction_speecht5.js":((e,r,t)=>{t.r(r),t.d(r,{SpeechT5FeatureExtractor:()=>n});var s=t("./src/base/feature_extraction_utils.js");class n extends s.FeatureExtractor{}}),"./src/models/speecht5/processing_speecht5.js":((e,r,t)=>{t.r(r),t.d(r,{SpeechT5Processor:()=>a});var s=t("./src/base/processing_utils.js"),n=t("./src/tokenizers.js"),o=t("./src/models/auto/feature_extraction_auto.js");class a extends s.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=o.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}}),"./src/models/swin2sr/image_processing_swin2sr.js":((e,r,t)=>{t.r(r),t.d(r,{Swin2SRImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{pad_image(a,i,l,c={}){const[p,d,u]=i;return super.pad_image(a,i,{width:d+(l-d%l)%l,height:p+(l-p%l)%l},{mode:"symmetric",center:!1,constant_values:-1,...c})}}}),"./src/models/ultravox/processing_ultravox.js":((e,r,t)=>{t.r(r),t.d(r,{UltravoxProcessor:()=>a});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;static uses_processor_config=!0;async _call(l,c=null,p={}){if(Array.isArray(l))throw new Error("Batched inputs are not supported yet.");let d={};if(c){const f=c.length,{input_features:_}=await this.feature_extractor(c,{...p,max_length:f}),v=Math.round(f/this.config.encoder_ds_factor+1e-4),I=1+Math.ceil(v/this.config.stack_factor);d.audio_token_len=[I],d.audio_values=_;const M=this.config.audio_placeholder;if(!l.includes(M))throw new Error(`The input text does not contain the image token ${M}.`);l=l.replaceAll(M,M.repeat(I))}return{...this.tokenizer(l,{add_special_tokens:!1,...p}),...d}}}}),"./src/models/vit/image_processing_vit.js":((e,r,t)=>{t.r(r),t.d(r,{ViTFeatureExtractor:()=>o,ViTImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{}class o extends n{}}),"./src/models/vitmatte/image_processing_vitmatte.js":((e,r,t)=>{t.r(r),t.d(r,{VitMatteImageProcessor:()=>o});var s=t("./src/base/image_processors_utils.js"),n=t("./src/utils/tensor.js");class o extends s.ImageProcessor{async _call(i,l){Array.isArray(i)||(i=[i]),Array.isArray(l)||(l=[l]);const c=await Promise.all(i.map(u=>this.preprocess(u))),p=await Promise.all(l.map(u=>this.preprocess(u,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,n.stack)(c.map((u,f)=>(0,n.cat)([u.pixel_values,p[f].pixel_values],0)),0),original_sizes:c.map(u=>u.original_size),reshaped_input_sizes:c.map(u=>u.reshaped_input_size)}}}}),"./src/models/vitpose/image_processing_vitpose.js":((e,r,t)=>{t.r(r),t.d(r,{VitPoseImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_pose_estimation(a,i,{threshold:l=null}={}){const c=a.tolist(),[p,d,u,f]=a.dims,_=[];for(let v=0;v<p;++v){const I=c[v],M=i[v],y=[];for(let $=0;$<M.length;++$){const x=M[$],T=[],E=[],b=[],S=x.at(-2)/f,D=x.at(-1)/u;for(let O=0;O<I.length;++O){let[H,G]=[0,0],z=0,Z=-1/0;const Q=I[O];for(let re=0;re<Q.length;++re){const te=Q[re];for(let le=0;le<te.length;++le){const ue=te[le];z+=ue,Z=Math.max(Z,ue),H+=(le+.5)*ue,G+=re*ue}}if(l!=null&&Z<l)continue;const Y=[S*H/z,D*G/z];T.push(Y),b.push(O),E.push(Z)}y.push({bbox:x,scores:E,labels:b,keypoints:T})}_.push(y)}return _}}}),"./src/models/voxtral/processing_voxtral.js":((e,r,t)=>{t.r(r),t.d(r,{VoxtralProcessor:()=>d});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js"),a=t("./src/utils/tensor.js");const i="[AUDIO]",l="[BEGIN_AUDIO]",c=375;function p(u,f){const _=[];for(let v=0;v<u.length;v+=f)_.push(u.subarray(v,Math.min(v+f,u.length)));return _}class d extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;static uses_processor_config=!1;async _call(f,_=null,v={}){if(Array.isArray(f))throw new Error("Batched inputs are not supported yet.");const I={};if(_){if(!f.includes(i))throw new Error(`The input text does not contain the audio token ${i}.`);Array.isArray(_)||(_=[_]);const y=f.split(i),$=y.length-1;if($!==_.length)throw new Error(`The number of audio inputs (${_.length}) does not match the number of audio tokens in the text (${$}).`);const x=this.feature_extractor.config.n_samples,T=_.map(O=>p(O,x)),E=T.map(O=>O.length),b=T.flat(),S=(await Promise.all(b.map(O=>this.feature_extractor(O,v)))).map(O=>O.input_features);I.audio_values=S.length>1?(0,a.cat)(S,0):S[0];let D=y[0];for(let O=0;O<E.length;++O){D+=l;for(let H=0;H<E[O];++H)D+=i.repeat(c);D+=y[O+1]}f=D}return{...this.tokenizer(f,{add_special_tokens:!1,...v}),...I}}}}),"./src/models/wav2vec2/feature_extraction_wav2vec2.js":((e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2FeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js"),n=t("./src/utils/tensor.js");class o extends s.FeatureExtractor{_zero_mean_unit_var_norm(i){const c=i.reduce((d,u)=>d+u,0)/i.length,p=i.reduce((d,u)=>d+(u-c)**2,0)/i.length;return i.map(d=>(d-c)/Math.sqrt(p+1e-7))}async _call(i){(0,s.validate_audio_inputs)(i,"Wav2Vec2FeatureExtractor"),i instanceof Float64Array&&(i=new Float32Array(i));let l=i;this.config.do_normalize&&(l=this._zero_mean_unit_var_norm(l));const c=[1,l.length];return{input_values:new n.Tensor("float32",l,c),attention_mask:new n.Tensor("int64",new BigInt64Array(l.length).fill(1n),c)}}}}),"./src/models/wav2vec2/processing_wav2vec2.js":((e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2Processor:()=>a});var s=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=s.AutoTokenizer;static feature_extractor_class=n.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}}),"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":((e,r,t)=>{t.r(r),t.d(r,{Wav2Vec2ProcessorWithLM:()=>a});var s=t("./src/tokenizers.js"),n=t("./src/models/auto/feature_extraction_auto.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=s.AutoTokenizer;static feature_extractor_class=n.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}}),"./src/models/wespeaker/feature_extraction_wespeaker.js":((e,r,t)=>{t.r(r),t.d(r,{WeSpeakerFeatureExtractor:()=>o});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js");class o extends s.FeatureExtractor{constructor(i){super(i);const l=this.config.sampling_rate,c=(0,n.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=c,this.window=(0,n.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(i){return i=i.map(l=>l*32768),(0,n.spectrogram)(i,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(i){(0,s.validate_audio_inputs)(i,"WeSpeakerFeatureExtractor");const l=(await this._extract_fbank_features(i)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const c=l.mean(1).data,p=l.data,[d,u,f]=l.dims;for(let _=0;_<d;++_){const v=_*u*f,I=_*f;for(let M=0;M<u;++M){const y=v+M*f;for(let $=0;$<f;++$)p[y+$]-=c[I+$]}}}return{input_features:l}}}}),"./src/models/whisper/common_whisper.js":((e,r,t)=>{t.r(r),t.d(r,{WHISPER_LANGUAGE_MAPPING:()=>n,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>o,whisper_language_to_code:()=>a});const s=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],n=new Map(s),o=new Map([...s.map(([i,l])=>[l,i]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function a(i){i=i.toLowerCase();let l=o.get(i);if(l===void 0){const c=i.match(/^<\|([a-z]{2})\|>$/);if(c&&(i=c[1]),n.has(i))l=i;else{const d=i.length===2?n.keys():n.values();throw new Error(`Language "${i}" is not supported. Must be one of: ${JSON.stringify(Array.from(d))}`)}}return l}}),"./src/models/whisper/feature_extraction_whisper.js":((e,r,t)=>{t.r(r),t.d(r,{WhisperFeatureExtractor:()=>a});var s=t("./src/base/feature_extraction_utils.js");t("./src/utils/tensor.js");var n=t("./src/utils/audio.js"),o=t("./src/utils/maths.js");class a extends s.FeatureExtractor{constructor(l){super(l),this.config.mel_filters??=(0,n.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,n.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(l){const c=await(0,n.spectrogram)(l,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(l.length/this.config.hop_length),this.config.nb_max_frames)}),p=c.data,d=(0,o.max)(p)[0];for(let u=0;u<p.length;++u)p[u]=(Math.max(p[u],d-8)+4)/4;return c}async _call(l,{max_length:c=null}={}){(0,s.validate_audio_inputs)(l,"WhisperFeatureExtractor");let p;const d=c??this.config.n_samples;return l.length>d?(l.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),p=l.slice(0,d)):(p=new Float32Array(d),p.set(l)),{input_features:(await this._extract_fbank_features(p)).unsqueeze_(0)}}}}),"./src/models/whisper/generation_whisper.js":((e,r,t)=>{t.r(r),t.d(r,{WhisperGenerationConfig:()=>n});var s=t("./src/generation/configuration_utils.js");class n extends s.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}}),"./src/models/whisper/processing_whisper.js":((e,r,t)=>{t.r(r),t.d(r,{WhisperProcessor:()=>a});var s=t("./src/models/auto/feature_extraction_auto.js"),n=t("./src/tokenizers.js"),o=t("./src/base/processing_utils.js");class a extends o.Processor{static tokenizer_class=n.AutoTokenizer;static feature_extractor_class=s.AutoFeatureExtractor;async _call(l){return await this.feature_extractor(l)}}}),"./src/models/yolos/image_processing_yolos.js":((e,r,t)=>{t.r(r),t.d(r,{YolosFeatureExtractor:()=>o,YolosImageProcessor:()=>n});var s=t("./src/base/image_processors_utils.js");class n extends s.ImageProcessor{post_process_object_detection(...i){return(0,s.post_process_object_detection)(...i)}}class o extends n{}}),"./src/ops/registry.js":((e,r,t)=>{t.r(r),t.d(r,{TensorOpRegistry:()=>a});var s=t("./src/backends/onnx.js"),n=t("./src/utils/tensor.js");const o=async(i,l,c)=>{const p=await(0,s.createInferenceSession)(new Uint8Array(i),l);return(async d=>{const u=(0,s.isONNXProxy)(),f=Object.fromEntries(Object.entries(d).map(([v,I])=>[v,(u?I.clone():I).ort_tensor])),_=await(0,s.runInferenceSession)(p,f);return Array.isArray(c)?c.map(v=>new n.Tensor(_[v])):new n.Tensor(_[c])})};class a{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=o([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=o([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=o([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=o([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=o([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=o([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=o([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=o([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}}),"./src/pipelines.js":((e,r,t)=>{t.r(r),t.d(r,{AudioClassificationPipeline:()=>G,AutomaticSpeechRecognitionPipeline:()=>Z,BackgroundRemovalPipeline:()=>te,DepthEstimationPipeline:()=>ie,DocumentQuestionAnsweringPipeline:()=>F,FeatureExtractionPipeline:()=>O,FillMaskPipeline:()=>$,ImageClassificationPipeline:()=>Y,ImageFeatureExtractionPipeline:()=>H,ImageSegmentationPipeline:()=>re,ImageToImagePipeline:()=>j,ImageToTextPipeline:()=>Q,ObjectDetectionPipeline:()=>ue,Pipeline:()=>v,QuestionAnsweringPipeline:()=>y,SummarizationPipeline:()=>T,Text2TextGenerationPipeline:()=>x,TextClassificationPipeline:()=>I,TextGenerationPipeline:()=>S,TextToAudioPipeline:()=>K,TokenClassificationPipeline:()=>M,TranslationPipeline:()=>E,ZeroShotAudioClassificationPipeline:()=>z,ZeroShotClassificationPipeline:()=>D,ZeroShotImageClassificationPipeline:()=>le,ZeroShotObjectDetectionPipeline:()=>B,pipeline:()=>Fe});var s=t("./src/tokenizers.js"),n=t("./src/models.js"),o=t("./src/models/auto/processing_auto.js");t("./src/base/processing_utils.js");var a=t("./src/utils/generic.js"),i=t("./src/utils/core.js"),l=t("./src/utils/maths.js"),c=t("./src/utils/audio.js"),p=t("./src/utils/tensor.js"),d=t("./src/utils/image.js");async function u(ve){return Array.isArray(ve)||(ve=[ve]),await Promise.all(ve.map(q=>d.RawImage.read(q)))}async function f(ve,q){return Array.isArray(ve)||(ve=[ve]),await Promise.all(ve.map(N=>typeof N=="string"||N instanceof URL?(0,c.read_audio)(N,q):N instanceof Float64Array?new Float32Array(N):N))}function _(ve,q){q&&(ve=ve.map(ye=>ye|0));const[N,de,xe,$e]=ve;return{xmin:N,ymin:de,xmax:xe,ymax:$e}}class v extends a.Callable{constructor({task:q,model:N,tokenizer:de=null,processor:xe=null}){super(),this.task=q,this.model=N,this.tokenizer=de,this.processor=xe}async dispose(){await this.model.dispose()}}class I extends v{constructor(q){super(q)}async _call(q,{top_k:N=1}={}){const de=this.tokenizer(q,{padding:!0,truncation:!0}),xe=await this.model(de),$e=this.model.config.problem_type==="multi_label_classification"?Ee=>Ee.sigmoid():Ee=>new p.Tensor("float32",(0,l.softmax)(Ee.data),Ee.dims),ye=this.model.config.id2label,fe=[];for(const Ee of xe.logits){const ge=$e(Ee),Ae=await(0,p.topk)(ge,N),Oe=Ae[0].tolist(),Me=Ae[1].tolist().map((rt,Ne)=>({label:ye?ye[rt]:`LABEL_${rt}`,score:Oe[Ne]}));N===1?fe.push(...Me):fe.push(Me)}return Array.isArray(q)||N===1?fe:fe[0]}}class M extends v{constructor(q){super(q)}async _call(q,{ignore_labels:N=["O"]}={}){const de=Array.isArray(q),xe=this.tokenizer(de?q:[q],{padding:!0,truncation:!0}),ye=(await this.model(xe)).logits,fe=this.model.config.id2label,Ee=[];for(let ge=0;ge<ye.dims[0];++ge){const Ae=xe.input_ids[ge],Oe=ye[ge],He=[];for(let Me=0;Me<Oe.dims[0];++Me){const rt=Oe[Me],Ne=(0,l.max)(rt.data)[1],je=fe?fe[Ne]:`LABEL_${Ne}`;if(N.includes(je))continue;const Ze=this.tokenizer.decode([Ae[Me].item()],{skip_special_tokens:!0});if(Ze==="")continue;const Xe=(0,l.softmax)(rt.data);He.push({entity:je,score:Xe[Ne],index:Me,word:Ze})}Ee.push(He)}return de?Ee:Ee[0]}}class y extends v{constructor(q){super(q)}async _call(q,N,{top_k:de=1}={}){const xe=this.tokenizer(q,{text_pair:N,padding:!0,truncation:!0}),{start_logits:$e,end_logits:ye}=await this.model(xe),fe=xe.input_ids.tolist(),Ee=xe.attention_mask.tolist(),ge=this.tokenizer.all_special_ids,Ae=[];for(let Oe=0;Oe<$e.dims[0];++Oe){const He=fe[Oe],Me=He.findIndex(Ye=>Ye==this.tokenizer.sep_token_id);Ee[Oe].map((Ye,et)=>Ye==1&&(et===0||et>Me&&ge.findIndex(Ct=>Ct==He[et])===-1));const rt=$e[Oe].tolist(),Ne=ye[Oe].tolist();for(let Ye=1;Ye<rt.length;++Ye)(Ee[Oe]==0||Ye<=Me||ge.findIndex(et=>et==He[Ye])!==-1)&&(rt[Ye]=-1/0,Ne[Ye]=-1/0);const je=(0,l.softmax)(rt).map((Ye,et)=>[Ye,et]),Ze=(0,l.softmax)(Ne).map((Ye,et)=>[Ye,et]);je[0][0]=0,Ze[0][0]=0;const Xe=(0,i.product)(je,Ze).filter(Ye=>Ye[0][1]<=Ye[1][1]).map(Ye=>[Ye[0][1],Ye[1][1],Ye[0][0]*Ye[1][0]]).sort((Ye,et)=>et[2]-Ye[2]);for(let Ye=0;Ye<Math.min(Xe.length,de);++Ye){const[et,Ct,It]=Xe[Ye],ht=He.slice(et,Ct+1),br=this.tokenizer.decode(ht,{skip_special_tokens:!0});Ae.push({answer:br,score:It})}}return de===1?Ae[0]:Ae}}class $ extends v{constructor(q){super(q)}async _call(q,{top_k:N=5}={}){const de=this.tokenizer(q,{padding:!0,truncation:!0}),{logits:xe}=await this.model(de),$e=[],ye=de.input_ids.tolist();for(let fe=0;fe<ye.length;++fe){const Ee=ye[fe],ge=Ee.findIndex(rt=>rt==this.tokenizer.mask_token_id);if(ge===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Ae=xe[fe][ge],Oe=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Ae.data),Ae.dims),N),He=Oe[0].tolist(),Me=Oe[1].tolist();$e.push(Me.map((rt,Ne)=>{const je=Ee.slice();return je[ge]=rt,{score:He[Ne],token:Number(rt),token_str:this.tokenizer.decode([rt]),sequence:this.tokenizer.decode(je,{skip_special_tokens:!0})}}))}return Array.isArray(q)?$e:$e[0]}}class x extends v{_key="generated_text";constructor(q){super(q)}async _call(q,N={}){Array.isArray(q)||(q=[q]),this.model.config.prefix&&(q=q.map(Ee=>this.model.config.prefix+Ee));const de=this.model.config.task_specific_params;de&&de[this.task]&&de[this.task].prefix&&(q=q.map(Ee=>de[this.task].prefix+Ee));const xe=this.tokenizer,$e={padding:!0,truncation:!0};let ye;this instanceof E&&"_build_translation_inputs"in xe?ye=xe._build_translation_inputs(q,$e,N):ye=xe(q,$e);const fe=await this.model.generate({...ye,...N});return xe.batch_decode(fe,{skip_special_tokens:!0}).map(Ee=>({[this._key]:Ee}))}}class T extends x{_key="summary_text";constructor(q){super(q)}}class E extends x{_key="translation_text";constructor(q){super(q)}}function b(ve){return Array.isArray(ve)&&ve.every(q=>"role"in q&&"content"in q)}class S extends v{constructor(q){super(q)}async _call(q,N={}){let de=!1,xe=!1,$e=N.add_special_tokens??(this.tokenizer.add_bos_token||this.tokenizer.add_eos_token)??!1,ye;if(typeof q=="string")ye=q=[q];else if(Array.isArray(q)&&q.every(Me=>typeof Me=="string"))de=!0,ye=q;else{if(b(q))q=[q];else if(Array.isArray(q)&&q.every(b))de=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");xe=!0,ye=q.map(Me=>this.tokenizer.apply_chat_template(Me,{tokenize:!1,add_generation_prompt:!0})),$e=!1}const fe=xe?!1:N.return_full_text??!0;this.tokenizer.padding_side="left";const Ee=this.tokenizer(ye,{add_special_tokens:$e,padding:!0,truncation:!0}),ge=await this.model.generate({...Ee,...N}),Ae=this.tokenizer.batch_decode(ge,{skip_special_tokens:!0});let Oe;!fe&&Ee.input_ids.dims.at(-1)>0&&(Oe=this.tokenizer.batch_decode(Ee.input_ids,{skip_special_tokens:!0}).map(Me=>Me.length));const He=Array.from({length:q.length},Me=>[]);for(let Me=0;Me<Ae.length;++Me){const rt=Math.floor(Me/ge.dims[0]*q.length);Oe&&(Ae[Me]=Ae[Me].slice(Oe[rt])),He[rt].push({generated_text:xe?[...q[rt],{role:"assistant",content:Ae[Me]}]:Ae[Me]})}return!de&&He.length===1?He[0]:He}}class D extends v{constructor(q){super(q),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([N,de])=>[N.toLowerCase(),de])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(q,N,{hypothesis_template:de="This example is {}.",multi_label:xe=!1}={}){const $e=Array.isArray(q);$e||(q=[q]),Array.isArray(N)||(N=[N]);const ye=N.map(ge=>de.replace("{}",ge)),fe=xe||N.length===1,Ee=[];for(const ge of q){const Ae=[];for(const Me of ye){const rt=this.tokenizer(ge,{text_pair:Me,padding:!0,truncation:!0}),Ne=await this.model(rt);fe?Ae.push([Ne.logits.data[this.contradiction_id],Ne.logits.data[this.entailment_id]]):Ae.push(Ne.logits.data[this.entailment_id])}const He=(fe?Ae.map(Me=>(0,l.softmax)(Me)[1]):(0,l.softmax)(Ae)).map((Me,rt)=>[Me,rt]).sort((Me,rt)=>rt[0]-Me[0]);Ee.push({sequence:ge,labels:He.map(Me=>N[Me[1]]),scores:He.map(Me=>Me[0])})}return $e?Ee:Ee[0]}}class O extends v{constructor(q){super(q)}async _call(q,{pooling:N="none",normalize:de=!1,quantize:xe=!1,precision:$e="binary"}={}){const ye=this.tokenizer(q,{padding:!0,truncation:!0}),fe=await this.model(ye);let Ee=fe.last_hidden_state??fe.logits??fe.token_embeddings;switch(N){case"none":break;case"mean":Ee=(0,p.mean_pooling)(Ee,ye.attention_mask);break;case"first_token":case"cls":Ee=Ee.slice(null,0);break;case"last_token":case"eos":Ee=Ee.slice(null,-1);break;default:throw Error(`Pooling method '${N}' not supported.`)}return de&&(Ee=Ee.normalize(2,-1)),xe&&(Ee=(0,p.quantize_embeddings)(Ee,$e)),Ee}}class H extends v{constructor(q){super(q)}async _call(q,{pool:N=null}={}){const de=await u(q),{pixel_values:xe}=await this.processor(de),$e=await this.model({pixel_values:xe});let ye;if(N){if(!("pooler_output"in $e))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");ye=$e.pooler_output}else ye=$e.last_hidden_state??$e.logits??$e.image_embeds;return ye}}class G extends v{constructor(q){super(q)}async _call(q,{top_k:N=5}={}){const de=this.processor.feature_extractor.config.sampling_rate,xe=await f(q,de),$e=this.model.config.id2label,ye=[];for(const fe of xe){const Ee=await this.processor(fe),Ae=(await this.model(Ee)).logits[0],Oe=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Ae.data),Ae.dims),N),He=Oe[0].tolist(),rt=Oe[1].tolist().map((Ne,je)=>({label:$e?$e[Ne]:`LABEL_${Ne}`,score:He[je]}));ye.push(rt)}return Array.isArray(q)?ye:ye[0]}}class z extends v{constructor(q){super(q)}async _call(q,N,{hypothesis_template:de="This is a sound of {}."}={}){const xe=!Array.isArray(q);xe&&(q=[q]);const $e=N.map(Ae=>de.replace("{}",Ae)),ye=this.tokenizer($e,{padding:!0,truncation:!0}),fe=this.processor.feature_extractor.config.sampling_rate,Ee=await f(q,fe),ge=[];for(const Ae of Ee){const Oe=await this.processor(Ae),He=await this.model({...ye,...Oe}),Me=(0,l.softmax)(He.logits_per_audio.data);ge.push([...Me].map((rt,Ne)=>({score:rt,label:N[Ne]})))}return xe?ge[0]:ge}}class Z extends v{constructor(q){super(q)}async _call(q,N={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(q,N);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(q,N);case"moonshine":return this._call_moonshine(q,N);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(q,N){N.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),N.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const de=!Array.isArray(q);de&&(q=[q]);const xe=this.processor.feature_extractor.config.sampling_rate,$e=await f(q,xe),ye=[];for(const fe of $e){const Ee=await this.processor(fe),Ae=(await this.model(Ee)).logits[0],Oe=[];for(const Me of Ae)Oe.push((0,l.max)(Me.data)[1]);const He=this.tokenizer.decode(Oe);ye.push({text:He})}return de?ye[0]:ye}async _call_whisper(q,N){const de=N.return_timestamps??!1,xe=N.chunk_length_s??0,$e=N.force_full_sequences??!1;let ye=N.stride_length_s??null;const fe={...N};de==="word"&&(fe.return_token_timestamps=!0,fe.return_timestamps=!1);const Ee=!Array.isArray(q);Ee&&(q=[q]);const ge=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Ae=this.processor.feature_extractor.config.hop_length,Oe=this.processor.feature_extractor.config.sampling_rate,He=await f(q,Oe),Me=[];for(const rt of He){let Ne=[];if(xe>0){if(ye===null)ye=xe/6;else if(xe<=ye)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const Xe=Oe*xe,Ye=Oe*ye,et=Xe-2*Ye;let Ct=0;for(;;){const It=Ct+Xe,ht=rt.subarray(Ct,It),br=await this.processor(ht),Gr=Ct===0,Dr=It>=rt.length;if(Ne.push({stride:[ht.length,Gr?0:Ye,Dr?0:Ye],input_features:br.input_features,is_last:Dr}),Dr)break;Ct+=et}}else Ne=[{stride:[rt.length,0,0],input_features:(await this.processor(rt)).input_features,is_last:!0}];for(const Xe of Ne){fe.num_frames=Math.floor(Xe.stride[0]/Ae);const Ye=await this.model.generate({inputs:Xe.input_features,...fe});de==="word"?(Xe.tokens=Ye.sequences.tolist()[0],Xe.token_timestamps=Ye.token_timestamps.tolist()[0].map(et=>(0,l.round)(et,2))):Xe.tokens=Ye[0].tolist(),Xe.stride=Xe.stride.map(et=>et/Oe)}const[je,Ze]=this.tokenizer._decode_asr(Ne,{time_precision:ge,return_timestamps:de,force_full_sequences:$e});Me.push({text:je,...Ze})}return Ee?Me[0]:Me}async _call_moonshine(q,N){const de=!Array.isArray(q);de&&(q=[q]);const xe=this.processor.feature_extractor.config.sampling_rate,$e=await f(q,xe),ye=[];for(const fe of $e){const Ee=await this.processor(fe),ge=Math.floor(fe.length/xe)*6,Ae=await this.model.generate({max_new_tokens:ge,...N,...Ee}),Oe=this.processor.batch_decode(Ae,{skip_special_tokens:!0})[0];ye.push({text:Oe})}return de?ye[0]:ye}}class Q extends v{constructor(q){super(q)}async _call(q,N={}){const de=Array.isArray(q),xe=await u(q),{pixel_values:$e}=await this.processor(xe),ye=[];for(const fe of $e){fe.dims=[1,...fe.dims];const Ee=await this.model.generate({inputs:fe,...N}),ge=this.tokenizer.batch_decode(Ee,{skip_special_tokens:!0}).map(Ae=>({generated_text:Ae.trim()}));ye.push(ge)}return de?ye:ye[0]}}class Y extends v{constructor(q){super(q)}async _call(q,{top_k:N=5}={}){const de=await u(q),{pixel_values:xe}=await this.processor(de),$e=await this.model({pixel_values:xe}),ye=this.model.config.id2label,fe=[];for(const Ee of $e.logits){const ge=await(0,p.topk)(new p.Tensor("float32",(0,l.softmax)(Ee.data),Ee.dims),N),Ae=ge[0].tolist(),He=ge[1].tolist().map((Me,rt)=>({label:ye?ye[Me]:`LABEL_${Me}`,score:Ae[rt]}));fe.push(He)}return Array.isArray(q)?fe:fe[0]}}class re extends v{constructor(q){super(q),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(q,{threshold:N=.5,mask_threshold:de=.5,overlap_mask_area_threshold:xe=.8,label_ids_to_fuse:$e=null,target_sizes:ye=null,subtask:fe=null}={}){if(Array.isArray(q)&&q.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const ge=await u(q),Ae=ge.map(Xe=>[Xe.height,Xe.width]),Oe=await this.processor(ge),{inputNames:He,outputNames:Me}=this.model.sessions.model;if(!He.includes("pixel_values")){if(He.length!==1)throw Error(`Expected a single input name, but got ${He.length} inputs: ${He}.`);const Xe=He[0];if(Xe in Oe)throw Error(`Input name ${Xe} already exists in the inputs.`);Oe[Xe]=Oe.pixel_values}const rt=await this.model(Oe);let Ne=null;if(fe!==null)Ne=this.subtasks_mapping[fe];else if(this.processor.image_processor){for(const[Xe,Ye]of Object.entries(this.subtasks_mapping))if(Ye in this.processor.image_processor){Ne=this.processor.image_processor[Ye].bind(this.processor.image_processor),fe=Xe;break}}const je=this.model.config.id2label,Ze=[];if(fe)if(fe==="panoptic"||fe==="instance"){const Xe=Ne(rt,N,de,xe,$e,ye??Ae)[0],Ye=Xe.segmentation;for(const et of Xe.segments_info){const Ct=new Uint8ClampedArray(Ye.data.length);for(let ht=0;ht<Ye.data.length;++ht)Ye.data[ht]===et.id&&(Ct[ht]=255);const It=new d.RawImage(Ct,Ye.dims[1],Ye.dims[0],1);Ze.push({score:et.score,label:je[et.label_id],mask:It})}}else if(fe==="semantic"){const{segmentation:Xe,labels:Ye}=Ne(rt,ye??Ae)[0];for(const et of Ye){const Ct=new Uint8ClampedArray(Xe.data.length);for(let ht=0;ht<Xe.data.length;++ht)Xe.data[ht]===et&&(Ct[ht]=255);const It=new d.RawImage(Ct,Xe.dims[1],Xe.dims[0],1);Ze.push({score:null,label:je[et],mask:It})}}else throw Error(`Subtask ${fe} not supported.`);else{const Ye=rt[Me[0]];for(let et=0;et<Ae.length;++et){const Ct=Ae[et],It=Ye[et];It.data.some(br=>br<-1e-5||br>1+1e-5)&&It.sigmoid_();const ht=await d.RawImage.fromTensor(It.mul_(255).to("uint8")).resize(Ct[1],Ct[0]);Ze.push({label:null,score:null,mask:ht})}}return Ze}}class te extends re{constructor(q){super(q)}async _call(q,N={}){if(Array.isArray(q)&&q.length!==1)throw Error("Background removal pipeline currently only supports a batch size of 1.");const xe=await u(q),$e=await super._call(q,N);return xe.map((fe,Ee)=>{const ge=fe.clone();return ge.putAlpha($e[Ee].mask),ge})}}class le extends v{constructor(q){super(q)}async _call(q,N,{hypothesis_template:de="This is a photo of {}"}={}){const xe=Array.isArray(q),$e=await u(q),ye=N.map(He=>de.replace("{}",He)),fe=this.tokenizer(ye,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:Ee}=await this.processor($e),ge=await this.model({...fe,pixel_values:Ee}),Ae=this.model.config.model_type==="siglip"?He=>He.sigmoid().data:He=>(0,l.softmax)(He.data),Oe=[];for(const He of ge.logits_per_image){const rt=[...Ae(He)].map((Ne,je)=>({score:Ne,label:N[je]}));rt.sort((Ne,je)=>je.score-Ne.score),Oe.push(rt)}return xe?Oe:Oe[0]}}class ue extends v{constructor(q){super(q)}async _call(q,{threshold:N=.9,percentage:de=!1}={}){const xe=Array.isArray(q);if(xe&&q.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const $e=await u(q),ye=de?null:$e.map(Me=>[Me.height,Me.width]),{pixel_values:fe,pixel_mask:Ee}=await this.processor($e),ge=await this.model({pixel_values:fe,pixel_mask:Ee}),Ae=this.processor.image_processor.post_process_object_detection(ge,N,ye),Oe=this.model.config.id2label,He=Ae.map(Me=>Me.boxes.map((rt,Ne)=>({score:Me.scores[Ne],label:Oe[Me.classes[Ne]],box:_(rt,!de)})));return xe?He:He[0]}}class B extends v{constructor(q){super(q)}async _call(q,N,{threshold:de=.1,top_k:xe=null,percentage:$e=!1}={}){const ye=Array.isArray(q),fe=await u(q),Ee=this.tokenizer(N,{padding:!0,truncation:!0}),ge=await this.processor(fe),Ae=[];for(let Oe=0;Oe<fe.length;++Oe){const He=fe[Oe],Me=$e?null:[[He.height,He.width]],rt=ge.pixel_values[Oe].unsqueeze_(0),Ne=await this.model({...Ee,pixel_values:rt});let je;if("post_process_grounded_object_detection"in this.processor){const Ze=this.processor.post_process_grounded_object_detection(Ne,Ee.input_ids,{box_threshold:de,text_threshold:de,target_sizes:Me})[0];je=Ze.boxes.map((Xe,Ye)=>({score:Ze.scores[Ye],label:Ze.labels[Ye],box:_(Xe,!$e)}))}else{const Ze=this.processor.image_processor.post_process_object_detection(Ne,de,Me,!0)[0];je=Ze.boxes.map((Xe,Ye)=>({score:Ze.scores[Ye],label:N[Ze.classes[Ye]],box:_(Xe,!$e)}))}je.sort((Ze,Xe)=>Xe.score-Ze.score),xe!==null&&(je=je.slice(0,xe)),Ae.push(je)}return ye?Ae:Ae[0]}}class F extends v{constructor(q){super(q)}async _call(q,N,de={}){const xe=(await u(q))[0],{pixel_values:$e}=await this.processor(xe),ye=`<s_docvqa><s_question>${N}</s_question><s_answer>`,fe=this.tokenizer(ye,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,Ee=await this.model.generate({inputs:$e,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:fe,...de}),Ae=this.tokenizer.batch_decode(Ee)[0].match(/<s_answer>(.*?)<\/s_answer>/);let Oe=null;return Ae&&Ae.length>=2&&(Oe=Ae[1].trim()),[{answer:Oe}]}}class K extends v{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(q){super(q),this.vocoder=q.vocoder??null}async _call(q,{speaker_embeddings:N=null}={}){return this.processor?this._call_text_to_spectrogram(q,{speaker_embeddings:N}):this._call_text_to_waveform(q)}async _call_text_to_waveform(q){const N=this.tokenizer(q,{padding:!0,truncation:!0}),{waveform:de}=await this.model(N),xe=this.model.config.sampling_rate;return new c.RawAudio(de.data,xe)}async _call_text_to_spectrogram(q,{speaker_embeddings:N}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await n.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof N=="string"||N instanceof URL)&&(N=new Float32Array(await(await fetch(N)).arrayBuffer())),N instanceof Float32Array)N=new p.Tensor("float32",N,[1,N.length]);else if(!(N instanceof p.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:de}=this.tokenizer(q,{padding:!0,truncation:!0}),{waveform:xe}=await this.model.generate_speech(de,N,{vocoder:this.vocoder}),$e=this.processor.feature_extractor.config.sampling_rate;return new c.RawAudio(xe.data,$e)}}class j extends v{constructor(q){super(q)}async _call(q){const N=await u(q),de=await this.processor(N),xe=await this.model(de),$e=[];for(const ye of xe.reconstruction){const fe=ye.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");$e.push(d.RawImage.fromTensor(fe))}return $e.length>1?$e:$e[0]}}class ie extends v{constructor(q){super(q)}async _call(q){const N=await u(q),de=await this.processor(N),{predicted_depth:xe}=await this.model(de),$e=[];for(let ye=0;ye<N.length;++ye){const fe=xe[ye],[Ee,ge]=fe.dims.slice(-2),[Ae,Oe]=N[ye].size,He=(await(0,p.interpolate_4d)(fe.view(1,1,Ee,ge),{size:[Oe,Ae],mode:"bilinear"})).view(Oe,Ae),Me=He.min().item(),rt=He.max().item(),Ne=He.sub(Me).div_(rt-Me).mul_(255).to("uint8").unsqueeze(0),je=d.RawImage.fromTensor(Ne);$e.push({predicted_depth:He,depth:je})}return $e.length>1?$e:$e[0]}}const ke=Object.freeze({"text-classification":{tokenizer:s.AutoTokenizer,pipeline:I,model:n.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:s.AutoTokenizer,pipeline:M,model:n.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:s.AutoTokenizer,pipeline:y,model:n.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:s.AutoTokenizer,pipeline:$,model:n.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:s.AutoTokenizer,pipeline:T,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:s.AutoTokenizer,pipeline:E,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:s.AutoTokenizer,pipeline:x,model:n.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:s.AutoTokenizer,pipeline:S,model:n.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:s.AutoTokenizer,pipeline:D,model:n.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:G,model:n.AutoModelForAudioClassification,processor:o.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:s.AutoTokenizer,pipeline:z,model:n.AutoModel,processor:o.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:s.AutoTokenizer,pipeline:Z,model:[n.AutoModelForSpeechSeq2Seq,n.AutoModelForCTC],processor:o.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:s.AutoTokenizer,pipeline:K,model:[n.AutoModelForTextToWaveform,n.AutoModelForTextToSpectrogram],processor:[o.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:s.AutoTokenizer,pipeline:Q,model:n.AutoModelForVision2Seq,processor:o.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:Y,model:n.AutoModelForImageClassification,processor:o.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:re,model:[n.AutoModelForImageSegmentation,n.AutoModelForSemanticSegmentation,n.AutoModelForUniversalSegmentation],processor:o.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:te,model:[n.AutoModelForImageSegmentation,n.AutoModelForSemanticSegmentation,n.AutoModelForUniversalSegmentation],processor:o.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:s.AutoTokenizer,pipeline:le,model:n.AutoModel,processor:o.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ue,model:n.AutoModelForObjectDetection,processor:o.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:s.AutoTokenizer,pipeline:B,model:n.AutoModelForZeroShotObjectDetection,processor:o.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:s.AutoTokenizer,pipeline:F,model:n.AutoModelForDocumentQuestionAnswering,processor:o.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:j,model:n.AutoModelForImageToImage,processor:o.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:ie,model:n.AutoModelForDepthEstimation,processor:o.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:s.AutoTokenizer,pipeline:O,model:n.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:o.AutoProcessor,pipeline:H,model:[n.AutoModelForImageFeatureExtraction,n.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),be=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function Fe(ve,q=null,{progress_callback:N=null,config:de=null,cache_dir:xe=null,local_files_only:$e=!1,revision:ye="main",device:fe=null,dtype:Ee=null,subfolder:ge="onnx",use_external_data_format:Ae=null,model_file_name:Oe=null,session_options:He={}}={}){ve=be[ve]??ve;const Me=ke[ve.split("_",1)[0]];if(!Me)throw Error(`Unsupported pipeline: ${ve}. Must be one of [${Object.keys(ke)}]`);q||(q=Me.default.model,console.log(`No model specified. Using default model: "${q}".`));const rt={progress_callback:N,config:de,cache_dir:xe,local_files_only:$e,revision:ye,device:fe,dtype:Ee,subfolder:ge,use_external_data_format:Ae,model_file_name:Oe,session_options:He},Ne=new Map([["tokenizer",Me.tokenizer],["model",Me.model],["processor",Me.processor]]),je=await Ke(Ne,q,rt);je.task=ve,(0,i.dispatchCallback)(N,{status:"ready",task:ve,model:q});const Ze=Me.pipeline;return new Ze(je)}async function Ke(ve,q,N){const de=Object.create(null),xe=[];for(const[$e,ye]of ve.entries()){if(!ye)continue;let fe;Array.isArray(ye)?fe=new Promise(async(Ee,ge)=>{let Ae;for(const Oe of ye){if(Oe===null){Ee(null);return}try{Ee(await Oe.from_pretrained(q,N));return}catch(He){if(He.message?.includes("Unsupported model type"))Ae=He;else if(He.message?.includes("Could not locate file"))Ae=He;else{ge(He);return}}}ge(Ae)}):fe=ye.from_pretrained(q,N),de[$e]=fe,xe.push(fe)}await Promise.all(xe);for(const[$e,ye]of Object.entries(de))de[$e]=await ye;return de}}),"./src/tokenizers.js":((e,r,t)=>{t.r(r),t.d(r,{AlbertTokenizer:()=>Ut,AutoTokenizer:()=>$n,BartTokenizer:()=>$t,BertTokenizer:()=>Ps,BlenderbotSmallTokenizer:()=>qt,BlenderbotTokenizer:()=>st,BloomTokenizer:()=>Kr,CLIPTokenizer:()=>Ds,CamembertTokenizer:()=>Se,CodeGenTokenizer:()=>$s,CodeLlamaTokenizer:()=>zr,CohereTokenizer:()=>sn,ConvBertTokenizer:()=>J,DebertaTokenizer:()=>C,DebertaV2Tokenizer:()=>X,DistilBertTokenizer:()=>me,ElectraTokenizer:()=>lt,Ernie4_5_Tokenizer:()=>on,EsmTokenizer:()=>Ss,FalconTokenizer:()=>ds,GPT2Tokenizer:()=>St,GPTNeoXTokenizer:()=>Br,GemmaTokenizer:()=>yr,Grok1Tokenizer:()=>Hr,HerbertTokenizer:()=>V,LlamaTokenizer:()=>hr,M2M100Tokenizer:()=>ss,MBart50Tokenizer:()=>Wt,MBartTokenizer:()=>er,MPNetTokenizer:()=>us,MarianTokenizer:()=>Le,MgpstrTokenizer:()=>nn,MobileBertTokenizer:()=>Tt,NllbTokenizer:()=>vr,NougatTokenizer:()=>ks,PreTrainedTokenizer:()=>pt,Qwen2Tokenizer:()=>Nr,RoFormerTokenizer:()=>ne,RobertaTokenizer:()=>cr,SiglipTokenizer:()=>Rr,SpeechT5Tokenizer:()=>Ls,SqueezeBertTokenizer:()=>Cs,T5Tokenizer:()=>We,TokenizerModel:()=>H,VitsTokenizer:()=>Jr,Wav2Vec2CTCTokenizer:()=>Be,WhisperTokenizer:()=>Xr,XLMRobertaTokenizer:()=>Ar,XLMTokenizer:()=>tt,is_chinese_char:()=>$});var s=t("./src/utils/generic.js"),n=t("./src/utils/core.js"),o=t("./src/utils/hub.js"),a=t("./src/utils/maths.js"),i=t("./src/utils/tensor.js"),l=t("./src/utils/data-structures.js"),c=t("./node_modules/@huggingface/jinja/dist/index.js"),p=t("./src/models/whisper/common_whisper.js");async function d(ce,k){const W=await Promise.all([(0,o.getModelJSON)(ce,"tokenizer.json",!0,k),(0,o.getModelJSON)(ce,"tokenizer_config.json",!0,k)]);return k.legacy!==null&&(W[1].legacy=k.legacy),W}function u(ce,k){const W=[];let ee=0;for(const se of ce.matchAll(k)){const he=se[0];ee<se.index&&W.push(ce.slice(ee,se.index)),he.length>0&&W.push(he),ee=se.index+he.length}return ee<ce.length&&W.push(ce.slice(ee)),W}function f(ce,k=!0){if(ce.Regex!==void 0){let W=ce.Regex.replace(/\\([#&~])/g,"$1");for(const[ee,se]of D)W=W.replaceAll(ee,se);return new RegExp(W,"gu")}else if(ce.String!==void 0){const W=(0,n.escapeRegExp)(ce.String);return new RegExp(k?W:`(${W})`,"gu")}else return console.warn("Unknown pattern type:",ce),null}function _(ce){return new Map(Object.entries(ce))}function v(ce){const k=ce.dims;switch(k.length){case 1:return ce.tolist();case 2:if(k[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return ce.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${k.length}.`)}}function I(ce){return ce.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function M(ce){return ce.replace(new RegExp("\\p{M}","gu"),"")}function y(ce){return M(ce.toLowerCase())}function $(ce){return ce>=19968&&ce<=40959||ce>=13312&&ce<=19903||ce>=131072&&ce<=173791||ce>=173824&&ce<=177983||ce>=177984&&ce<=178207||ce>=178208&&ce<=183983||ce>=63744&&ce<=64255||ce>=194560&&ce<=195103}function x(ce,k,W){const ee=[];let se=0;for(;se<ce.length;){if(ee.push(ce[se]),(k.get(ce[se])??W)!==W){++se;continue}for(;++se<ce.length&&(k.get(ce[se])??W)===W;)k.get(ee.at(-1))!==W&&(ee[ee.length-1]+=ce[se])}return ee}function T(ce){return ce.match(/\S+/g)||[]}const E="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",b=new RegExp(`^[${E}]+$`,"gu"),S=".,!?…。，、।۔،",D=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${S}])]+`,` ?[^\\s${S}]+`]]);class O{constructor(k){this.content=k.content,this.id=k.id,this.single_word=k.single_word??!1,this.lstrip=k.lstrip??!1,this.rstrip=k.rstrip??!1,this.special=k.special??!1,this.normalized=k.normalized??null}}class H extends s.Callable{constructor(k){super(),this.config=k,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(k,...W){switch(k.type){case"WordPiece":return new G(k);case"Unigram":return new z(k,...W);case"BPE":return new Y(k);default:if(k.vocab)return Array.isArray(k.vocab)?new z(k,...W):Object.hasOwn(k,"continuing_subword_prefix")&&Object.hasOwn(k,"unk_token")?Object.hasOwn(k,"merges")?new Y(k):new G(k):new re(k,...W);throw new Error(`Unknown TokenizerModel type: ${k.type}`)}}_call(k){return k=this.encode(k),this.fuse_unk&&(k=x(k,this.tokens_to_ids,this.unk_token_id)),k}encode(k){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(k){return k.map(W=>this.tokens_to_ids.get(W)??this.unk_token_id)}convert_ids_to_tokens(k){return k.map(W=>this.vocab[W]??this.unk_token)}}class G extends H{constructor(k){super(k),this.tokens_to_ids=_(k.vocab),this.unk_token_id=this.tokens_to_ids.get(k.unk_token),this.unk_token=k.unk_token,this.max_input_chars_per_word=k.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[W,ee]of this.tokens_to_ids)this.vocab[ee]=W}encode(k){const W=[];for(const ee of k){const se=[...ee];if(se.length>this.max_input_chars_per_word){W.push(this.unk_token);continue}let he=!1,Pe=0;const qe=[];for(;Pe<se.length;){let Qe=se.length,Je=null;for(;Pe<Qe;){let Ue=se.slice(Pe,Qe).join("");if(Pe>0&&(Ue=this.config.continuing_subword_prefix+Ue),this.tokens_to_ids.has(Ue)){Je=Ue;break}--Qe}if(Je===null){he=!0;break}qe.push(Je),Pe=Qe}he?W.push(this.unk_token):W.push(...qe)}return W}}class z extends H{constructor(k,W){super(k);const ee=k.vocab.length;this.vocab=new Array(ee),this.scores=new Array(ee);for(let se=0;se<ee;++se)[this.vocab[se],this.scores[se]]=k.vocab[se];this.unk_token_id=k.unk_id,this.unk_token=this.vocab[k.unk_id],this.tokens_to_ids=new Map(this.vocab.map((se,he)=>[se,he])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=W.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,a.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new l.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(k){const W=k.chars,ee=1;let se=0;for(;se<W.length;){let he=!1;const Pe=W.slice(se).join(""),qe=this.trie.commonPrefixSearch(Pe);for(const Qe of qe){const Je=this.tokens_to_ids.get(Qe),Ue=this.scores[Je],Et=(0,n.len)(Qe);k.insert(se,Et,Ue,Je),!he&&Et===ee&&(he=!0)}he||k.insert(se,ee,this.unk_score,this.unk_token_id),se+=ee}}tokenize(k){const W=new l.TokenLattice(k,this.bos_token_id,this.eos_token_id);return this.populateNodes(W),W.tokens()}encode(k){const W=[];for(const ee of k){const se=this.tokenize(ee);W.push(...se)}return W}}const Z=(()=>{const ce=[...Array.from({length:94},(se,he)=>he+33),...Array.from({length:12},(se,he)=>he+161),...Array.from({length:82},(se,he)=>he+174)],k=ce.slice();let W=0;for(let se=0;se<256;++se)ce.includes(se)||(ce.push(se),k.push(256+W),W+=1);const ee=k.map(se=>String.fromCharCode(se));return Object.fromEntries(ce.map((se,he)=>[se,ee[he]]))})(),Q=(0,n.reverseDictionary)(Z);class Y extends H{constructor(k){super(k),this.tokens_to_ids=_(k.vocab),this.unk_token_id=this.tokens_to_ids.get(k.unk_token),this.unk_token=k.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[ee,se]of this.tokens_to_ids)this.vocab[se]=ee;const W=Array.isArray(k.merges[0]);this.merges=W?k.merges:k.merges.map(ee=>ee.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((ee,se)=>[JSON.stringify(ee),se])),this.end_of_word_suffix=k.end_of_word_suffix,this.continuing_subword_suffix=k.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new l.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe(k){if(k.length===0)return[];const W=this.cache.get(k);if(W!==void 0)return W;const ee=Array.from(k);this.end_of_word_suffix&&(ee[ee.length-1]+=this.end_of_word_suffix);let se=[];if(ee.length>1){const he=new l.PriorityQueue((Qe,Je)=>Qe.score<Je.score);let Pe={token:ee[0],bias:0,prev:null,next:null},qe=Pe;for(let Qe=1;Qe<ee.length;++Qe){const Je={bias:Qe/ee.length,token:ee[Qe],prev:qe,next:null};qe.next=Je,this._add_node(he,qe),qe=Je}for(;!he.isEmpty();){const Qe=he.pop();if(Qe.deleted||!Qe.next||Qe.next.deleted)continue;if(Qe.deleted=!0,Qe.next.deleted=!0,Qe.prev){const Ue={...Qe.prev};Qe.prev.deleted=!0,Qe.prev=Ue,Ue.prev?Ue.prev.next=Ue:Pe=Ue}const Je={token:Qe.token+Qe.next.token,bias:Qe.bias,prev:Qe.prev,next:Qe.next.next};Je.prev?(Je.prev.next=Je,this._add_node(he,Je.prev)):Pe=Je,Je.next&&(Je.next.prev=Je,this._add_node(he,Je))}for(let Qe=Pe;Qe!==null;Qe=Qe.next)se.push(Qe.token)}else se=ee;if(this.continuing_subword_suffix)for(let he=0;he<se.length-1;++he)se[he]+=this.continuing_subword_suffix;return k.length<this.max_length_to_cache&&this.cache.put(k,se),se}_add_node(k,W){const ee=this.bpe_ranks.get(JSON.stringify([W.token,W.next.token]));ee!==void 0&&(W.score=ee+W.bias,k.push(W))}encode(k){const W=[];for(const ee of k){if(this.ignore_merges&&this.tokens_to_ids.has(ee)){W.push(ee);continue}const se=this.bpe(ee);for(const he of se)if(this.tokens_to_ids.has(he))W.push(he);else if(this.byte_fallback){const Pe=Array.from(this.text_encoder.encode(he)).map(qe=>`<0x${qe.toString(16).toUpperCase().padStart(2,"0")}>`);Pe.every(qe=>this.tokens_to_ids.has(qe))?W.push(...Pe):W.push(this.unk_token)}else W.push(this.unk_token)}return W}}class re extends H{constructor(k,W){super(k),this.tokens_to_ids=_(W.target_lang?k.vocab[W.target_lang]:k.vocab),this.bos_token=W.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=W.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=W.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=W.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[ee,se]of this.tokens_to_ids)this.vocab[se]=ee}encode(k){return k}}class te extends s.Callable{constructor(k){super(),this.config=k}static fromConfig(k){if(k===null)return null;switch(k.type){case"BertNormalizer":return new ve(k);case"Precompiled":return new Dr(k);case"Sequence":return new Ke(k);case"Replace":return new le(k);case"NFC":return new B(k);case"NFD":return new F(k);case"NFKC":return new K(k);case"NFKD":return new j(k);case"Strip":return new ie(k);case"StripAccents":return new ke(k);case"Lowercase":return new be(k);case"Prepend":return new Fe(k);default:throw new Error(`Unknown Normalizer type: ${k.type}`)}}normalize(k){throw Error("normalize should be implemented in subclass.")}_call(k){return this.normalize(k)}}class le extends te{normalize(k){const W=f(this.config.pattern);return W===null?k:k.replaceAll(W,this.config.content)}}class ue extends te{form=void 0;normalize(k){return k=k.normalize(this.form),k}}class B extends ue{form="NFC"}class F extends ue{form="NFD"}class K extends ue{form="NFKC"}class j extends ue{form="NFKD"}class ie extends te{normalize(k){return this.config.strip_left&&this.config.strip_right?k=k.trim():(this.config.strip_left&&(k=k.trimStart()),this.config.strip_right&&(k=k.trimEnd())),k}}class ke extends te{normalize(k){return k=M(k),k}}class be extends te{normalize(k){return k=k.toLowerCase(),k}}class Fe extends te{normalize(k){return k=this.config.prepend+k,k}}class Ke extends te{constructor(k){super(k),this.normalizers=k.normalizers.map(W=>te.fromConfig(W))}normalize(k){return this.normalizers.reduce((W,ee)=>ee.normalize(W),k)}}class ve extends te{_tokenize_chinese_chars(k){const W=[];for(let ee=0;ee<k.length;++ee){const se=k[ee],he=se.charCodeAt(0);$(he)?(W.push(" "),W.push(se),W.push(" ")):W.push(se)}return W.join("")}stripAccents(k){return k.normalize("NFD").replace(new RegExp("\\p{Mn}","gu"),"")}_is_control(k){switch(k){case"	":case`
`:case"\r":return!1;default:return new RegExp("^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$","u").test(k)}}_clean_text(k){const W=[];for(const ee of k){const se=ee.charCodeAt(0);se===0||se===65533||this._is_control(ee)||(/^\s$/.test(ee)?W.push(" "):W.push(ee))}return W.join("")}normalize(k){return this.config.clean_text&&(k=this._clean_text(k)),this.config.handle_chinese_chars&&(k=this._tokenize_chinese_chars(k)),this.config.lowercase?(k=k.toLowerCase(),this.config.strip_accents!==!1&&(k=this.stripAccents(k))):this.config.strip_accents&&(k=this.stripAccents(k)),k}}class q extends s.Callable{static fromConfig(k){if(k===null)return null;switch(k.type){case"BertPreTokenizer":return new N(k);case"Sequence":return new Lr(k);case"Whitespace":return new sr(k);case"WhitespaceSplit":return new Ir(k);case"Metaspace":return new br(k);case"ByteLevel":return new de(k);case"Split":return new xe(k);case"Punctuation":return new $e(k);case"Digits":return new ye(k);case"Replace":return new Us(k);default:throw new Error(`Unknown PreTokenizer type: ${k.type}`)}}pre_tokenize_text(k,W){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(k,W){return(Array.isArray(k)?k.map(ee=>this.pre_tokenize_text(ee,W)):this.pre_tokenize_text(k,W)).flat()}_call(k,W){return this.pre_tokenize(k,W)}}class N extends q{constructor(k){super(),this.pattern=new RegExp(`[^\\s${E}]+|[${E}]`,"gu")}pre_tokenize_text(k,W){return k.trim().match(this.pattern)||[]}}class de extends q{constructor(k){super(),this.config=k,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=new RegExp("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+","gu"),this.byte_encoder=Z,this.text_encoder=new TextEncoder}pre_tokenize_text(k,W){return this.add_prefix_space&&!k.startsWith(" ")&&(k=" "+k),(this.use_regex?k.match(this.pattern)||[]:[k]).map(se=>Array.from(this.text_encoder.encode(se),he=>this.byte_encoder[he]).join(""))}}class xe extends q{constructor(k){super(),this.config=k,this.pattern=f(this.config.pattern,this.config.invert)}pre_tokenize_text(k,W){return this.pattern===null?[]:this.config.invert?k.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?k.split(this.pattern).filter(ee=>ee):u(k,this.pattern)}}class $e extends q{constructor(k){super(),this.config=k,this.pattern=new RegExp(`[^${E}]+|[${E}]+`,"gu")}pre_tokenize_text(k,W){return k.match(this.pattern)||[]}}class ye extends q{constructor(k){super(),this.config=k;const W=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(W,"gu")}pre_tokenize_text(k,W){return k.match(this.pattern)||[]}}class fe extends s.Callable{constructor(k){super(),this.config=k}static fromConfig(k){if(k===null)return null;switch(k.type){case"TemplateProcessing":return new Ae(k);case"ByteLevel":return new Oe(k);case"RobertaProcessing":return new ge(k);case"BertProcessing":return new Ee(k);case"Sequence":return new He(k);default:throw new Error(`Unknown PostProcessor type: ${k.type}`)}}post_process(k,...W){throw Error("post_process should be implemented in subclass.")}_call(k,...W){return this.post_process(k,...W)}}class Ee extends fe{constructor(k){super(k),this.cls=k.cls[0],this.sep=k.sep[0]}post_process(k,W=null,{add_special_tokens:ee=!0}={}){ee&&(k=(0,n.mergeArrays)([this.cls],k,[this.sep]));let se=new Array(k.length).fill(0);if(W!==null){const he=ee&&this instanceof ge?[this.sep]:[],Pe=ee?[this.sep]:[];k=(0,n.mergeArrays)(k,he,W,Pe),se=(0,n.mergeArrays)(se,new Array(W.length+he.length+Pe.length).fill(1))}return{tokens:k,token_type_ids:se}}}class ge extends Ee{}class Ae extends fe{constructor(k){super(k),this.single=k.single,this.pair=k.pair}post_process(k,W=null,{add_special_tokens:ee=!0}={}){const se=W===null?this.single:this.pair;let he=[],Pe=[];for(const qe of se)"SpecialToken"in qe?ee&&(he.push(qe.SpecialToken.id),Pe.push(qe.SpecialToken.type_id)):"Sequence"in qe&&(qe.Sequence.id==="A"?(he=(0,n.mergeArrays)(he,k),Pe=(0,n.mergeArrays)(Pe,new Array(k.length).fill(qe.Sequence.type_id))):qe.Sequence.id==="B"&&(he=(0,n.mergeArrays)(he,W),Pe=(0,n.mergeArrays)(Pe,new Array(W.length).fill(qe.Sequence.type_id))));return{tokens:he,token_type_ids:Pe}}}class Oe extends fe{post_process(k,W=null){return W&&(k=(0,n.mergeArrays)(k,W)),{tokens:k}}}class He extends fe{constructor(k){super(k),this.processors=k.processors.map(W=>fe.fromConfig(W))}post_process(k,W=null,ee={}){let se;for(const he of this.processors)if(he instanceof Oe)k=he.post_process(k).tokens,W&&(W=he.post_process(W).tokens);else{const Pe=he.post_process(k,W,ee);k=Pe.tokens,se=Pe.token_type_ids}return{tokens:k,token_type_ids:se}}}class Me extends s.Callable{constructor(k){super(),this.config=k,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=k.trim_offsets}static fromConfig(k){if(k===null)return null;switch(k.type){case"WordPiece":return new Xe(k);case"Metaspace":return new Gr(k);case"ByteLevel":return new Ye(k);case"Replace":return new rt(k);case"ByteFallback":return new Ne(k);case"Fuse":return new je(k);case"Strip":return new Ze(k);case"Sequence":return new Ct(k);case"CTC":return new et(k);case"BPEDecoder":return new It(k);default:throw new Error(`Unknown Decoder type: ${k.type}`)}}_call(k){return this.decode(k)}decode(k){return this.decode_chain(k).join("")}decode_chain(k){throw Error("`decode_chain` should be implemented in subclass.")}}class rt extends Me{decode_chain(k){const W=f(this.config.pattern);return W===null?k:k.map(ee=>ee.replaceAll(W,this.config.content))}}class Ne extends Me{constructor(k){super(k),this.text_decoder=new TextDecoder}decode_chain(k){const W=[];let ee=[];for(const se of k){let he=null;if(se.length===6&&se.startsWith("<0x")&&se.endsWith(">")){const Pe=parseInt(se.slice(3,5),16);isNaN(Pe)||(he=Pe)}if(he!==null)ee.push(he);else{if(ee.length>0){const Pe=this.text_decoder.decode(Uint8Array.from(ee));W.push(Pe),ee=[]}W.push(se)}}if(ee.length>0){const se=this.text_decoder.decode(Uint8Array.from(ee));W.push(se),ee=[]}return W}}class je extends Me{decode_chain(k){return[k.join("")]}}class Ze extends Me{constructor(k){super(k),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(k){return k.map(W=>{let ee=0;for(let he=0;he<this.start&&W[he]===this.content;++he){ee=he+1;continue}let se=W.length;for(let he=0;he<this.stop;++he){const Pe=W.length-he-1;if(W[Pe]===this.content){se=Pe;continue}else break}return W.slice(ee,se)})}}class Xe extends Me{constructor(k){super(k),this.cleanup=k.cleanup}decode_chain(k){return k.map((W,ee)=>(ee!==0&&(W.startsWith(this.config.prefix)?W=W.replace(this.config.prefix,""):W=" "+W),this.cleanup&&(W=I(W)),W))}}class Ye extends Me{constructor(k){super(k),this.byte_decoder=Q,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(k){const W=k.join(""),ee=new Uint8Array([...W].map(he=>this.byte_decoder[he]));return this.text_decoder.decode(ee)}decode_chain(k){const W=[];let ee=[];for(const se of k)this.added_tokens.find(he=>he.content===se)!==void 0?(ee.length>0&&(W.push(this.convert_tokens_to_string(ee)),ee=[]),W.push(se)):ee.push(se);return ee.length>0&&W.push(this.convert_tokens_to_string(ee)),W}}class et extends Me{constructor(k){super(k),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(k){if(k.length===0)return"";const W=[k[0]];for(let he=1;he<k.length;++he)k[he]!==W.at(-1)&&W.push(k[he]);let se=W.filter(he=>he!==this.pad_token).join("");return this.cleanup&&(se=I(se).replaceAll(this.word_delimiter_token," ").trim()),se}decode_chain(k){return[this.convert_tokens_to_string(k)]}}class Ct extends Me{constructor(k){super(k),this.decoders=k.decoders.map(W=>Me.fromConfig(W))}decode_chain(k){return this.decoders.reduce((W,ee)=>ee.decode_chain(W),k)}}class It extends Me{constructor(k){super(k),this.suffix=this.config.suffix}decode_chain(k){return k.map((W,ee)=>W.replaceAll(this.suffix,ee===k.length-1?"":" "))}}class ht extends Me{decode_chain(k){let W="";for(let ee=1;ee<k.length;ee+=2)W+=k[ee];return[W]}}class br extends q{constructor(k){super(),this.addPrefixSpace=k.add_prefix_space,this.replacement=k.replacement,this.strRep=k.str_rep||this.replacement,this.prepend_scheme=k.prepend_scheme??"always"}pre_tokenize_text(k,{section_index:W=void 0}={}){let ee=k.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!ee.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&W===0)&&(ee=this.strRep+ee),[ee]}}class Gr extends Me{constructor(k){super(k),this.addPrefixSpace=k.add_prefix_space,this.replacement=k.replacement}decode_chain(k){const W=[];for(let ee=0;ee<k.length;++ee){let se=k[ee].replaceAll(this.replacement," ");this.addPrefixSpace&&ee==0&&se.startsWith(" ")&&(se=se.substring(1)),W.push(se)}return W}}class Dr extends te{constructor(k){super(k),this.charsmap=k.precompiled_charsmap}normalize(k){return k=k.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),k=k.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),k.includes("～")?k=k.split("～").map(ee=>ee.normalize("NFKC")).join("～"):k=k.normalize("NFKC"),k}}class Lr extends q{constructor(k){super(),this.tokenizers=k.pretokenizers.map(W=>q.fromConfig(W))}pre_tokenize_text(k,W){return this.tokenizers.reduce((ee,se)=>se.pre_tokenize(ee,W),[k])}}class sr extends q{constructor(k){super()}pre_tokenize_text(k,W){return k.match(/\w+|[^\w\s]+/g)||[]}}class Ir extends q{constructor(k){super()}pre_tokenize_text(k,W){return T(k)}}class Us extends q{constructor(k){super(),this.config=k,this.pattern=f(this.config.pattern),this.content=this.config.content}pre_tokenize_text(k,W){return this.pattern===null?[k]:[k.replaceAll(this.pattern,this.config.content)]}}const Ws=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Os(ce,k,W,ee){for(const se of Object.keys(ce)){const he=k-ce[se].length,Pe=W(se),qe=new Array(he).fill(Pe);ce[se]=ee==="right"?(0,n.mergeArrays)(ce[se],qe):(0,n.mergeArrays)(qe,ce[se])}}function Qr(ce,k){for(const W of Object.keys(ce))ce[W].length=k}class pt extends s.Callable{return_token_type_ids=!1;padding_side="right";constructor(k,W){super(),this.config=W,this.normalizer=te.fromConfig(k.normalizer),this.pre_tokenizer=q.fromConfig(k.pre_tokenizer),this.model=H.fromConfig(k.model,W),this.post_processor=fe.fromConfig(k.post_processor),this.decoder=Me.fromConfig(k.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const ee of k.added_tokens){const se=new O(ee);this.added_tokens.push(se),this.model.tokens_to_ids.set(se.content,se.id),this.model.vocab[se.id]=se.content,se.special&&(this.special_tokens.push(se.content),this.all_special_ids.push(se.id))}if(this.additional_special_tokens=W.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new l.DictionarySplitter(this.added_tokens.map(ee=>ee.content)),this.added_tokens_map=new Map(this.added_tokens.map(ee=>[ee.content,ee])),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=W.model_max_length,this.remove_space=W.remove_space,this.clean_up_tokenization_spaces=W.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=W.do_lowercase_and_remove_accent??!1,W.padding_side&&(this.padding_side=W.padding_side),this.add_bos_token=W.add_bos_token,this.add_eos_token=W.add_eos_token,this.legacy=!1,this.chat_template=W.chat_template??null,Array.isArray(this.chat_template)){const ee=Object.create(null);for(const{name:se,template:he}of this.chat_template){if(typeof se!="string"||typeof he!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');ee[se]=he}this.chat_template=ee}this._compiled_template_cache=new Map}getToken(...k){for(const W of k){const ee=this.config[W];if(ee)if(typeof ee=="object"){if(ee.__type==="AddedToken")return ee.content;throw Error(`Unknown token: ${ee}`)}else return ee}return null}static async from_pretrained(k,{progress_callback:W=null,config:ee=null,cache_dir:se=null,local_files_only:he=!1,revision:Pe="main",legacy:qe=null}={}){const Qe=await d(k,{progress_callback:W,config:ee,cache_dir:se,local_files_only:he,revision:Pe,legacy:qe});return new this(...Qe)}_call(k,{text_pair:W=null,add_special_tokens:ee=!0,padding:se=!1,truncation:he=null,max_length:Pe=null,return_tensor:qe=!0,return_token_type_ids:Qe=null}={}){const Je=Array.isArray(k);let Ue;if(Je){if(k.length===0)throw Error("text array must be non-empty");if(W!==null){if(Array.isArray(W)){if(k.length!==W.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Ue=k.map((bt,tr)=>this._encode_plus(bt,{text_pair:W[tr],add_special_tokens:ee,return_token_type_ids:Qe}))}else Ue=k.map(bt=>this._encode_plus(bt,{add_special_tokens:ee,return_token_type_ids:Qe}))}else{if(k==null)throw Error("text may not be null or undefined");if(Array.isArray(W))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Ue=[this._encode_plus(k,{text_pair:W,add_special_tokens:ee,return_token_type_ids:Qe})]}if(Pe===null?Pe=this.model_max_length:he===null&&(se===!0?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),Pe=this.model_max_length):se===!1&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),he=!0)),se===!0&&(Pe=Math.min((0,a.max)(Ue.map(bt=>bt.input_ids.length))[0],Pe??1/0)),Pe=Math.min(Pe,this.model_max_length??1/0),se||he)for(let bt=0;bt<Ue.length;++bt)Ue[bt].input_ids.length!==Pe&&(Ue[bt].input_ids.length>Pe?he&&Qr(Ue[bt],Pe):se&&Os(Ue[bt],Pe,tr=>tr==="input_ids"?this.pad_token_id:0,this.padding_side));const Et={};if(qe){if(!(se&&he)&&Ue.some(tr=>{for(const _r of Object.keys(tr))if(tr[_r].length!==Ue[0][_r]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const bt=[Ue.length,Ue[0].input_ids.length];for(const tr of Object.keys(Ue[0]))Et[tr]=new i.Tensor("int64",BigInt64Array.from(Ue.flatMap(_r=>_r[tr]).map(BigInt)),bt)}else{for(const bt of Object.keys(Ue[0]))Et[bt]=Ue.map(tr=>tr[bt]);if(!Je)for(const bt of Object.keys(Et))Et[bt]=Et[bt][0]}return Et}_encode_text(k){if(k===null)return null;const W=this.added_tokens_splitter.split(k);for(let se=0;se<W.length;++se){const he=this.added_tokens_map.get(W[se]);he&&(he.lstrip&&se>0&&(W[se-1]=W[se-1].trimEnd()),he.rstrip&&se<W.length-1&&(W[se+1]=W[se+1].trimStart()))}return W.flatMap((se,he)=>{if(se.length===0)return[];if(this.added_tokens_map.has(se))return[se];if(this.remove_space===!0&&(se=se.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(se=y(se)),this.normalizer!==null&&(se=this.normalizer(se)),se.length===0)return[];const Pe=this.pre_tokenizer!==null?this.pre_tokenizer(se,{section_index:he}):[se];return this.model(Pe)})}_encode_plus(k,{text_pair:W=null,add_special_tokens:ee=!0,return_token_type_ids:se=null}={}){const{tokens:he,token_type_ids:Pe}=this._tokenize_helper(k,{pair:W,add_special_tokens:ee}),qe=this.model.convert_tokens_to_ids(he),Qe={input_ids:qe,attention_mask:new Array(qe.length).fill(1)};return(se??this.return_token_type_ids)&&Pe&&(Qe.token_type_ids=Pe),Qe}_tokenize_helper(k,{pair:W=null,add_special_tokens:ee=!1}={}){const se=this._encode_text(k),he=this._encode_text(W);return this.post_processor?this.post_processor(se,he,{add_special_tokens:ee}):{tokens:(0,n.mergeArrays)(se??[],he??[])}}tokenize(k,{pair:W=null,add_special_tokens:ee=!1}={}){return this._tokenize_helper(k,{pair:W,add_special_tokens:ee}).tokens}encode(k,{text_pair:W=null,add_special_tokens:ee=!0,return_token_type_ids:se=null}={}){return this._encode_plus(k,{text_pair:W,add_special_tokens:ee,return_token_type_ids:se}).input_ids}batch_decode(k,W={}){return k instanceof i.Tensor&&(k=k.tolist()),k.map(ee=>this.decode(ee,W))}decode(k,W={}){if(k instanceof i.Tensor&&(k=v(k)),!Array.isArray(k)||k.length===0||!(0,n.isIntegralNumber)(k[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(k,W)}decode_single(k,{skip_special_tokens:W=!1,clean_up_tokenization_spaces:ee=null}){let se=this.model.convert_ids_to_tokens(k);W&&(se=se.filter(Pe=>!this.special_tokens.includes(Pe)));let he=this.decoder?this.decoder(se):se.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(he=he.replaceAll(this.decoder.end_of_word_suffix," "),W&&(he=he.trim())),(ee??this.clean_up_tokenization_spaces)&&(he=I(he)),he}get_chat_template({chat_template:k=null,tools:W=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const ee=this.chat_template;if(k!==null&&Object.hasOwn(ee,k))k=ee[k];else if(k===null)if(W!==null&&"tool_use"in ee)k=ee.tool_use;else if("default"in ee)k=ee.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(ee).sort()}.`)}else if(k===null)if(this.chat_template)k=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return k}apply_chat_template(k,{tools:W=null,documents:ee=null,chat_template:se=null,add_generation_prompt:he=!1,tokenize:Pe=!0,padding:qe=!1,truncation:Qe=!1,max_length:Je=null,return_tensor:Ue=!0,return_dict:Et=!1,tokenizer_kwargs:bt={},...tr}={}){if(se=this.get_chat_template({chat_template:se,tools:W}),typeof se!="string")throw Error(`chat_template must be a string, but got ${typeof se}`);let _r=this._compiled_template_cache.get(se);_r===void 0&&(_r=new c.Template(se),this._compiled_template_cache.set(se,_r));const Qt=Object.create(null);for(const Vt of Ws){const qr=this.getToken(Vt);qr&&(Qt[Vt]=qr)}const rr=_r.render({messages:k,add_generation_prompt:he,tools:W,documents:ee,...Qt,...tr});if(Pe){const Vt=this._call(rr,{add_special_tokens:!1,padding:qe,truncation:Qe,max_length:Je,return_tensor:Ue,...bt});return Et?Vt:Vt.input_ids}return rr}}class Ps extends pt{return_token_type_ids=!0}class Ut extends pt{return_token_type_ids=!0}class Tt extends pt{return_token_type_ids=!0}class Cs extends pt{return_token_type_ids=!0}class C extends pt{return_token_type_ids=!0}class X extends pt{return_token_type_ids=!0}class V extends pt{return_token_type_ids=!0}class J extends pt{return_token_type_ids=!0}class ne extends pt{return_token_type_ids=!0}class me extends pt{}class Se extends pt{}class tt extends pt{return_token_type_ids=!0;constructor(k,W){super(k,W),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class lt extends pt{return_token_type_ids=!0}class We extends pt{}class St extends pt{}class $t extends pt{}class er extends pt{constructor(k,W){super(k,W),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(ee=>this.languageRegex.test(ee)),this.lang_to_token=ee=>ee}_build_translation_inputs(k,W,ee){return ur(this,k,W,ee)}}class Wt extends er{}class cr extends pt{}class Kr extends pt{}const Ht="▁";class hr extends pt{padding_side="left";constructor(k,W){super(k,W),this.legacy=W.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new br({replacement:Ht,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(k){if(k===null)return null;if(this.legacy||k.length===0)return super._encode_text(k);let W=super._encode_text(Ht+k.replaceAll(Ht," "));return W.length>1&&W[0]===Ht&&this.special_tokens.includes(W[1])&&(W=W.slice(1)),W}}class zr extends pt{}class Ar extends pt{}class us extends pt{}class ds extends pt{}class Br extends pt{}class Ss extends pt{}class Nr extends pt{}class yr extends pt{}class Hr extends pt{}function ur(ce,k,W,ee){if(!("language_codes"in ce)||!Array.isArray(ce.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in ce)||!(ce.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in ce)||typeof ce.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const se=ee.src_lang,he=ee.tgt_lang;if(!ce.language_codes.includes(he))throw new Error(`Target language code "${he}" is not valid. Must be one of: {${ce.language_codes.join(", ")}}`);if(se!==void 0){if(!ce.language_codes.includes(se))throw new Error(`Source language code "${se}" is not valid. Must be one of: {${ce.language_codes.join(", ")}}`);for(const Pe of ce.post_processor.config.single)if("SpecialToken"in Pe&&ce.languageRegex.test(Pe.SpecialToken.id)){Pe.SpecialToken.id=ce.lang_to_token(se);break}}return ee.forced_bos_token_id=ce.model.convert_tokens_to_ids([ce.lang_to_token(he)])[0],ce._call(k,W)}class vr extends pt{constructor(k,W){super(k,W),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(ee=>this.languageRegex.test(ee)),this.lang_to_token=ee=>ee}_build_translation_inputs(k,W,ee){return ur(this,k,W,ee)}}class ss extends pt{constructor(k,W){super(k,W),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(ee=>this.languageRegex.test(ee)).map(ee=>ee.slice(2,-2)),this.lang_to_token=ee=>`__${ee}__`}_build_translation_inputs(k,W,ee){return ur(this,k,W,ee)}}class Xr extends pt{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(k,{return_timestamps:W=!1,return_language:ee=!1,time_precision:se=null,force_full_sequences:he=!0}={}){if(se===null)throw Error("Must specify time_precision");let Pe=null;const qe=W==="word";function Qe(){return{language:Pe,timestamp:[null,null],text:""}}const Je=[];let Ue=Qe(),Et=0;const bt=this.timestamp_begin,_r=bt+1500;let Qt=[],rr=[],Vt=!1,qr=null;const ns=new Set(this.all_special_ids);for(const Jt of k){const dr=Jt.tokens,Cr=qe?Jt.token_timestamps:null;let Yr=null,ms=bt;if("stride"in Jt){const[gr,Yt,pr]=Jt.stride;if(Et-=Yt,qr=gr-pr,Yt&&(ms=Yt/se+bt),pr)for(let nr=dr.length-1;nr>=0;--nr){const Vr=Number(dr[nr]);if(Vr>=bt){if(Yr!==null&&(Vr-bt)*se<qr)break;Yr=Vr}}}let fr=[],os=[];for(let gr=0;gr<dr.length;++gr){const Yt=Number(dr[gr]);if(ns.has(Yt)){const pr=this.decode([Yt]),nr=p.WHISPER_LANGUAGE_MAPPING.get(pr.slice(2,-2));if(nr!==void 0){if(Pe!==null&&nr!==Pe&&!W){Qt.push(fr);const Vr=this.findLongestCommonSequence(Qt)[0],Gs=this.decode(Vr);Ue.text=Gs,Je.push(Ue),Qt=[],fr=[],Ue=Qe()}Pe=Ue.language=nr}}else if(Yt>=bt&&Yt<=_r){const pr=(Yt-bt)*se+Et,nr=(0,a.round)(pr,2);if(Yr!==null&&Yt>=Yr)Vt=!0;else if(Vt||Qt.length>0&&Yt<ms)Vt=!1;else if(Ue.timestamp[0]===null)Ue.timestamp[0]=nr;else if(nr!==Ue.timestamp[0]){Ue.timestamp[1]=nr,Qt.push(fr),qe&&rr.push(os);const[Vr,Gs]=this.findLongestCommonSequence(Qt,rr),Is=this.decode(Vr);Ue.text=Is,qe&&(Ue.words=this.collateWordTimestamps(Vr,Gs,Pe)),Je.push(Ue),Qt=[],fr=[],rr=[],os=[],Ue=Qe()}}else if(fr.push(Yt),qe){let pr=(0,a.round)(Cr[gr]+Et,2),nr;if(gr+1<Cr.length){nr=(0,a.round)(Cr[gr+1]+Et,2);const Vr=this.decode([Yt]);b.test(Vr)&&(nr=(0,a.round)(Math.min(pr+se,nr),2))}else nr=null;os.push([pr,nr])}}if("stride"in Jt){const[gr,Yt,pr]=Jt.stride;Et+=gr-pr}fr.length>0?(Qt.push(fr),qe&&rr.push(os)):Qt.every(gr=>gr.length===0)&&(Ue=Qe(),Qt=[],fr=[],rr=[],os=[])}if(Qt.length>0){if(he&&W)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[Jt,dr]=this.findLongestCommonSequence(Qt,rr),Cr=this.decode(Jt);Ue.text=Cr,qe&&(Ue.words=this.collateWordTimestamps(Jt,dr,Pe)),Je.push(Ue)}let xr=Object.create(null);const ps=Je.map(Jt=>Jt.text).join("");if(W||ee){for(let Jt=0;Jt<Je.length;++Jt){const dr=Je[Jt];W||delete dr.timestamp,ee||delete dr.language}if(qe){const Jt=[];for(const dr of Je)for(const Cr of dr.words)Jt.push(Cr);xr={chunks:Jt}}else xr={chunks:Je}}return[ps,xr]}findLongestCommonSequence(k,W=null){let ee=k[0],se=ee.length,he=[];const Pe=Array.isArray(W)&&W.length>0;let qe=Pe?[]:null,Qe=Pe?W[0]:null;for(let Je=1;Je<k.length;++Je){const Ue=k[Je];let Et=0,bt=[se,se,0,0];const tr=Ue.length;for(let xr=1;xr<se+tr;++xr){const ps=Math.max(0,se-xr),Jt=Math.min(se,se+tr-xr),dr=ee.slice(ps,Jt),Cr=Math.max(0,xr-se),Yr=Math.min(tr,xr),ms=Ue.slice(Cr,Yr);if(dr.length!==ms.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let fr;Pe?fr=dr.filter((Yt,pr)=>Yt===ms[pr]&&Qe[ps+pr]<=W[Je][Cr+pr]).length:fr=dr.filter((Yt,pr)=>Yt===ms[pr]).length;const os=xr/1e4,gr=fr/xr+os;fr>1&&gr>Et&&(Et=gr,bt=[ps,Jt,Cr,Yr])}const[_r,Qt,rr,Vt]=bt,qr=Math.floor((Qt+_r)/2),ns=Math.floor((Vt+rr)/2);he.push(...ee.slice(0,qr)),ee=Ue.slice(ns),se=ee.length,Pe&&(qe.push(...Qe.slice(0,qr)),Qe=W[Je].slice(ns))}return he.push(...ee),Pe?(qe.push(...Qe),[he,qe]):[he,[]]}collateWordTimestamps(k,W,ee){const[se,he,Pe]=this.combineTokensIntoWords(k,ee),qe=[];for(let Qe=0;Qe<se.length;++Qe){const Je=Pe[Qe];qe.push({text:se[Qe],timestamp:[W[Je.at(0)][0],W[Je.at(-1)][1]]})}return qe}combineTokensIntoWords(k,W,ee=`"'“¡¿([{-`,se=`"'.。,，!！?？:：”)]}、`){W=W??"english";let he,Pe,qe;return["chinese","japanese","thai","lao","myanmar"].includes(W)?[he,Pe,qe]=this.splitTokensOnUnicode(k):[he,Pe,qe]=this.splitTokensOnSpaces(k),this.mergePunctuations(he,Pe,qe,ee,se)}decode(k,W){let ee;return W?.decode_with_timestamps?(k instanceof i.Tensor&&(k=v(k)),ee=this.decodeWithTimestamps(k,W)):ee=super.decode(k,W),ee}decodeWithTimestamps(k,W){const ee=W?.time_precision??.02,se=Array.from(this.all_special_ids).at(-1)+1;let he=[[]];for(let Pe of k)if(Pe=Number(Pe),Pe>=se){const qe=((Pe-se)*ee).toFixed(2);he.push(`<|${qe}|>`),he.push([])}else he[he.length-1].push(Pe);return he=he.map(Pe=>typeof Pe=="string"?Pe:super.decode(Pe,W)),he.join("")}splitTokensOnUnicode(k){const W=this.decode(k,{decode_with_timestamps:!0}),ee="�",se=[],he=[],Pe=[];let qe=[],Qe=[],Je=0;for(let Ue=0;Ue<k.length;++Ue){const Et=k[Ue];qe.push(Et),Qe.push(Ue);const bt=this.decode(qe,{decode_with_timestamps:!0});(!bt.includes(ee)||W[Je+bt.indexOf(ee)]===ee)&&(se.push(bt),he.push(qe),Pe.push(Qe),qe=[],Qe=[],Je+=bt.length)}return[se,he,Pe]}splitTokensOnSpaces(k){const[W,ee,se]=this.splitTokensOnUnicode(k),he=[],Pe=[],qe=[],Qe=new RegExp(`^[${E}]$`,"gu");for(let Je=0;Je<W.length;++Je){const Ue=W[Je],Et=ee[Je],bt=se[Je],tr=Et[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),_r=Ue.startsWith(" "),Qt=Ue.trim(),rr=Qe.test(Qt);if(tr||_r||rr||he.length===0)he.push(Ue),Pe.push(Et),qe.push(bt);else{const Vt=he.length-1;he[Vt]+=Ue,Pe[Vt].push(...Et),qe[Vt].push(...bt)}}return[he,Pe,qe]}mergePunctuations(k,W,ee,se,he){const Pe=structuredClone(k),qe=structuredClone(W),Qe=structuredClone(ee);let Je=Pe.length-2,Ue=Pe.length-1;for(;Je>=0;)Pe[Je].startsWith(" ")&&se.includes(Pe[Je].trim())?(Pe[Ue]=Pe[Je]+Pe[Ue],qe[Ue]=(0,n.mergeArrays)(qe[Je],qe[Ue]),Qe[Ue]=(0,n.mergeArrays)(Qe[Je],Qe[Ue]),Pe[Je]="",qe[Je]=[],Qe[Je]=[]):Ue=Je,--Je;for(Je=0,Ue=1;Ue<Pe.length;)!Pe[Je].endsWith(" ")&&he.includes(Pe[Ue])?(Pe[Je]+=Pe[Ue],qe[Je]=(0,n.mergeArrays)(qe[Je],qe[Ue]),Qe[Je]=(0,n.mergeArrays)(Qe[Je],Qe[Ue]),Pe[Ue]="",qe[Ue]=[],Qe[Ue]=[]):Je=Ue,++Ue;return[Pe.filter(Et=>Et),qe.filter(Et=>Et.length>0),Qe.filter(Et=>Et.length>0)]}}class $s extends pt{}class Ds extends pt{}class Rr extends pt{}class Le extends pt{constructor(k,W){super(k,W),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(ee=>this.languageRegex.test(ee)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(k){if(k===null)return null;const[W,...ee]=k.trim().split(this.languageRegex);if(ee.length===0)return super._encode_text(W);if(ee.length===2){const[se,he]=ee;return this.supported_language_codes.includes(se)||console.warn(`Unsupported language code "${se}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,n.mergeArrays)([se],super._encode_text(he))}}}class Be extends pt{}class st extends pt{}class qt extends pt{}class Ls extends pt{}class ks extends pt{}class Jr extends pt{constructor(k,W){super(k,W),this.decoder=new ht({})}}class sn extends pt{}class nn extends pt{}class on extends pt{}class $n{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:We,DistilBertTokenizer:me,CamembertTokenizer:Se,DebertaTokenizer:C,DebertaV2Tokenizer:X,BertTokenizer:Ps,HerbertTokenizer:V,ConvBertTokenizer:J,RoFormerTokenizer:ne,XLMTokenizer:tt,ElectraTokenizer:lt,MobileBertTokenizer:Tt,SqueezeBertTokenizer:Cs,AlbertTokenizer:Ut,GPT2Tokenizer:St,BartTokenizer:$t,MBartTokenizer:er,MBart50Tokenizer:Wt,RobertaTokenizer:cr,WhisperTokenizer:Xr,CodeGenTokenizer:$s,CLIPTokenizer:Ds,SiglipTokenizer:Rr,MarianTokenizer:Le,BloomTokenizer:Kr,NllbTokenizer:vr,M2M100Tokenizer:ss,LlamaTokenizer:hr,CodeLlamaTokenizer:zr,XLMRobertaTokenizer:Ar,MPNetTokenizer:us,FalconTokenizer:ds,GPTNeoXTokenizer:Br,EsmTokenizer:Ss,Wav2Vec2CTCTokenizer:Be,BlenderbotTokenizer:st,BlenderbotSmallTokenizer:qt,SpeechT5Tokenizer:Ls,NougatTokenizer:ks,VitsTokenizer:Jr,Qwen2Tokenizer:Nr,GemmaTokenizer:yr,Grok1Tokenizer:Hr,CohereTokenizer:sn,MgpstrTokenizer:nn,Ernie4_5_Tokenizer:on,PreTrainedTokenizer:pt};static async from_pretrained(k,{progress_callback:W=null,config:ee=null,cache_dir:se=null,local_files_only:he=!1,revision:Pe="main",legacy:qe=null}={}){const[Qe,Je]=await d(k,{progress_callback:W,config:ee,cache_dir:se,local_files_only:he,revision:Pe,legacy:qe}),Ue=Je.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let Et=this.TOKENIZER_CLASS_MAPPING[Ue];return Et||(console.warn(`Unknown tokenizer class "${Ue}", attempting to construct from base class.`),Et=pt),new Et(Qe,Je)}}}),"./src/utils/audio.js":((e,r,t)=>{t.r(r),t.d(r,{RawAudio:()=>G,hamming:()=>u,hanning:()=>d,mel_filter_bank:()=>$,read_audio:()=>c,spectrogram:()=>S,window_function:()=>D});var s=t("./src/utils/hub.js"),n=t("./src/utils/maths.js"),o=t("./src/utils/core.js"),a=t("./src/env.js"),i=t("./src/utils/tensor.js"),l=t("?7992");async function c(z,Z){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const Q=await(await(0,s.getFile)(z)).arrayBuffer(),Y=new AudioContext({sampleRate:Z});typeof Z>"u"&&console.warn(`No sampling rate provided, using default of ${Y.sampleRate}Hz.`);const re=await Y.decodeAudioData(Q);let te;if(re.numberOfChannels===2){const le=Math.sqrt(2),ue=re.getChannelData(0),B=re.getChannelData(1);te=new Float32Array(ue.length);for(let F=0;F<re.length;++F)te[F]=le*(ue[F]+B[F])/2}else te=re.getChannelData(0);return te}function p(z,Z){if(z<1)return new Float64Array;if(z===1)return new Float64Array([1]);const Q=1-Z,Y=2*Math.PI/(z-1),re=new Float64Array(z);for(let te=0;te<z;++te)re[te]=Z-Q*Math.cos(te*Y);return re}function d(z){return p(z,.5)}function u(z){return p(z,.54)}const f={htk:z=>2595*Math.log10(1+z/700),kaldi:z=>1127*Math.log(1+z/700),slaney:(z,Z=1e3,Q=15,Y=27/Math.log(6.4))=>z>=Z?Q+Math.log(z/Z)*Y:3*z/200};function _(z,Z="htk"){const Q=f[Z];if(!Q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof z=="number"?Q(z):z.map(Y=>Q(Y))}const v={htk:z=>700*(10**(z/2595)-1),kaldi:z=>700*(Math.exp(z/1127)-1),slaney:(z,Z=1e3,Q=15,Y=Math.log(6.4)/27)=>z>=Q?Z*Math.exp(Y*(z-Q)):200*z/3};function I(z,Z="htk"){const Q=v[Z];if(!Q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof z=="number"?Q(z):z.map(Y=>Q(Y))}function M(z,Z){const Q=Float64Array.from({length:Z.length-1},(le,ue)=>Z[ue+1]-Z[ue]),Y=Array.from({length:z.length},()=>new Array(Z.length));for(let le=0;le<z.length;++le){const ue=Y[le];for(let B=0;B<Z.length;++B)ue[B]=Z[B]-z[le]}const re=Z.length-2,te=Array.from({length:re},()=>new Array(z.length));for(let le=0;le<z.length;++le){const ue=Y[le];for(let B=0;B<re;++B){const F=-ue[B]/Q[B],K=ue[B+2]/Q[B+1];te[B][le]=Math.max(0,Math.min(F,K))}}return te}function y(z,Z,Q){const Y=(Z-z)/(Q-1);return Float64Array.from({length:Q},(re,te)=>z+Y*te)}function $(z,Z,Q,Y,re,te=null,le="htk",ue=!1){if(te!==null&&te!=="slaney")throw new Error('norm must be one of null or "slaney"');if(z<2)throw new Error(`Require num_frequency_bins: ${z} >= 2`);if(Q>Y)throw new Error(`Require min_frequency: ${Q} <= max_frequency: ${Y}`);const B=_(Q,le),F=_(Y,le),K=y(B,F,Z+2);let j=I(K,le),ie;if(ue){const be=re/((z-1)*2);ie=_(Float64Array.from({length:z},(Fe,Ke)=>Ke*be),le),j=K}else ie=y(0,Math.floor(re/2),z);const ke=M(ie,j);if(te!==null&&te==="slaney")for(let be=0;be<Z;++be){const Fe=ke[be],Ke=2/(j[be+2]-j[be]);for(let ve=0;ve<z;++ve)Fe[ve]*=Ke}return ke}function x(z,Z,Q){const Y=new z.constructor(z.length+Z+Q),re=z.length-1;for(let te=0;te<z.length;++te)Y[Z+te]=z[te];for(let te=1;te<=Z;++te)Y[Z-te]=z[(0,o.calculateReflectOffset)(te,re)];for(let te=1;te<=Q;++te)Y[re+Z+te]=z[(0,o.calculateReflectOffset)(re-te,re)];return Y}function T(z,Z,Q,Y,re){if(Q<=0)throw new Error("reference must be greater than zero");if(Y<=0)throw new Error("min_value must be greater than zero");Q=Math.max(Y,Q);const te=Math.log10(Q);for(let le=0;le<z.length;++le)z[le]=Z*Math.log10(Math.max(Y,z[le])-te);if(re!==null){if(re<=0)throw new Error("db_range must be greater than zero");const le=(0,n.max)(z)[0]-re;for(let ue=0;ue<z.length;++ue)z[ue]=Math.max(z[ue],le)}return z}function E(z,Z=1,Q=1e-5,Y=null){return T(z,20,Z,Q,Y)}function b(z,Z=1,Q=1e-10,Y=null){return T(z,10,Z,Q,Y)}async function S(z,Z,Q,Y,{fft_length:re=null,power:te=1,center:le=!0,pad_mode:ue="reflect",onesided:B=!0,preemphasis:F=null,preemphasis_htk_flavor:K=!0,mel_filters:j=null,mel_floor:ie=1e-10,log_mel:ke=null,reference:be=1,min_value:Fe=1e-10,db_range:Ke=null,remove_dc_offset:ve=null,min_num_frames:q=null,max_num_frames:N=null,do_pad:de=!0,transpose:xe=!1}={}){const $e=Z.length;if(re===null&&(re=Q),Q>re)throw Error(`frame_length (${Q}) may not be larger than fft_length (${re})`);if($e!==Q)throw new Error(`Length of the window (${$e}) must equal frame_length (${Q})`);if(Y<=0)throw new Error("hop_length must be greater than zero");if(te===null&&j!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(!K)throw new Error("`preemphasis_htk_flavor=false` is not currently supported.");if(le){if(ue!=="reflect")throw new Error(`pad_mode="${ue}" not implemented yet.`);const Ze=Math.floor((re-1)/2)+1;z=x(z,Ze,Ze)}let ye=Math.floor(1+Math.floor((z.length-Q)/Y));q!==null&&ye<q&&(ye=q);const fe=B?Math.floor(re/2)+1:re;let Ee=ye,ge=ye;N!==null&&(N>ye?de&&(ge=N):ge=Ee=N);const Ae=new n.FFT(re),Oe=new Float64Array(re),He=new Float64Array(Ae.outputBufferSize),Me=new Float32Array(fe*ge);for(let Ze=0;Ze<Ee;++Ze){const Xe=Ze*Y,Ye=Math.min(z.length-Xe,Q);Ye!==Q&&Oe.fill(0,0,Q);for(let et=0;et<Ye;++et)Oe[et]=z[Xe+et];if(ve){let et=0;for(let It=0;It<Ye;++It)et+=Oe[It];const Ct=et/Ye;for(let It=0;It<Ye;++It)Oe[It]-=Ct}if(F!==null){for(let et=Ye-1;et>=1;--et)Oe[et]-=F*Oe[et-1];Oe[0]*=1-F}for(let et=0;et<Z.length;++et)Oe[et]*=Z[et];Ae.realTransform(He,Oe);for(let et=0;et<fe;++et){const Ct=et<<1;Me[et*ge+Ze]=He[Ct]**2+He[Ct+1]**2}}if(te!==null&&te!==2){const Ze=te/2;for(let Xe=0;Xe<Me.length;++Xe)Me[Xe]**=Ze}const rt=j.length;let Ne=await(0,i.matmul)(new i.Tensor("float32",j.flat(),[rt,fe]),new i.Tensor("float32",Me,[fe,ge]));xe&&(Ne=Ne.transpose(1,0));const je=Ne.data;for(let Ze=0;Ze<je.length;++Ze)je[Ze]=Math.max(ie,je[Ze]);if(te!==null&&ke!==null){const Ze=Math.min(je.length,Ee*rt);switch(ke){case"log":for(let Xe=0;Xe<Ze;++Xe)je[Xe]=Math.log(je[Xe]);break;case"log10":for(let Xe=0;Xe<Ze;++Xe)je[Xe]=Math.log10(je[Xe]);break;case"dB":if(te===1)E(je,be,Fe,Ke);else if(te===2)b(je,be,Fe,Ke);else throw new Error(`Cannot use log_mel option '${ke}' with power ${te}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${ke}'`)}}return Ne}function D(z,Z,{periodic:Q=!0,frame_length:Y=null,center:re=!0}={}){const te=Q?z+1:z;let le;switch(Z){case"boxcar":le=new Float64Array(te).fill(1);break;case"hann":case"hann_window":le=d(te);break;case"hamming":le=u(te);break;case"povey":le=d(te).map(ue=>Math.pow(ue,.85));break;default:throw new Error(`Unknown window type ${Z}.`)}if(Q&&(le=le.subarray(0,z)),Y===null)return le;if(z>Y)throw new Error(`Length of the window (${z}) may not be larger than frame_length (${Y})`);return le}function O(z,Z){let Q=44;const Y=new ArrayBuffer(Q+z.length*4),re=new DataView(Y);H(re,0,"RIFF"),re.setUint32(4,36+z.length*4,!0),H(re,8,"WAVE"),H(re,12,"fmt "),re.setUint32(16,16,!0),re.setUint16(20,3,!0),re.setUint16(22,1,!0),re.setUint32(24,Z,!0),re.setUint32(28,Z*4,!0),re.setUint16(32,4,!0),re.setUint16(34,32,!0),H(re,36,"data"),re.setUint32(40,z.length*4,!0);for(let te=0;te<z.length;++te,Q+=4)re.setFloat32(Q,z[te],!0);return Y}function H(z,Z,Q){for(let Y=0;Y<Q.length;++Y)z.setUint8(Z+Y,Q.charCodeAt(Y))}class G{constructor(Z,Q){this.audio=Z,this.sampling_rate=Q}toWav(){return O(this.audio,this.sampling_rate)}toBlob(){const Z=this.toWav();return new Blob([Z],{type:"audio/wav"})}async save(Z){let Q;if(a.apis.IS_BROWSER_ENV){if(a.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");Q=o.saveBlob}else if(a.apis.IS_FS_AVAILABLE)Q=async(Y,re)=>{let te=await re.arrayBuffer();l.writeFileSync(Y,Buffer.from(te))};else throw new Error("Unable to save because filesystem is disabled in this environment.");await Q(Z,this.toBlob())}}}),"./src/utils/constants.js":((e,r,t)=>{t.r(r),t.d(r,{CHAT_TEMPLATE_NAME:()=>l,CONFIG_NAME:()=>n,FEATURE_EXTRACTOR_NAME:()=>o,GENERATION_CONFIG_NAME:()=>c,GITHUB_ISSUE_URL:()=>s,IMAGE_PROCESSOR_NAME:()=>a,PROCESSOR_NAME:()=>i});const s="https://github.com/huggingface/transformers.js/issues/new/choose",n="config.json",o="preprocessor_config.json",a=o,i="processor_config.json",l="chat_template.jinja",c="generation_config.json"}),"./src/utils/core.js":((e,r,t)=>{t.r(r),t.d(r,{calculateDimensions:()=>c,calculateReflectOffset:()=>f,count:()=>M,dispatchCallback:()=>s,escapeRegExp:()=>o,isIntegralNumber:()=>i,isNullishDimension:()=>l,isTypedArray:()=>a,len:()=>I,mergeArrays:()=>d,pick:()=>v,pop:()=>p,product:()=>u,reverseDictionary:()=>n,saveBlob:()=>_});function s(y,$){y&&y($)}function n(y){return Object.fromEntries(Object.entries(y).map(([$,x])=>[x,$]))}function o(y){return y.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function a(y){return y?.prototype?.__proto__?.constructor?.name==="TypedArray"}function i(y){return Number.isInteger(y)||typeof y=="bigint"}function l(y){return y==null||y===-1}function c(y){const $=[];let x=y;for(;Array.isArray(x);)$.push(x.length),x=x[0];return $}function p(y,$,x=void 0){const T=y[$];if(T!==void 0)return delete y[$],T;if(x===void 0)throw Error(`Key ${$} does not exist in object.`);return x}function d(...y){return Array.prototype.concat.apply([],y)}function u(...y){return y.reduce(($,x)=>$.flatMap(T=>x.map(E=>[T,E])))}function f(y,$){return Math.abs((y+$)%(2*$)-$)}function _(y,$){const x=URL.createObjectURL($),T=document.createElement("a");T.href=x,T.download=y,T.click(),T.remove(),URL.revokeObjectURL(x)}function v(y,$){return Object.assign({},...$.map(x=>{if(y[x]!==void 0)return{[x]:y[x]}}))}function I(y){let $=0;for(const x of y)++$;return $}function M(y,$){let x=0;for(const T of y)T===$&&++x;return x}}),"./src/utils/data-structures.js":((e,r,t)=>{t.r(r),t.d(r,{CharTrie:()=>n,DictionarySplitter:()=>l,LRUCache:()=>c,PriorityQueue:()=>s,TokenLattice:()=>a});class s{constructor(d=(f,_)=>f>_,u=1/0){this._heap=[],this._comparator=d,this._maxSize=u}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...d){return this.extend(d)}extend(d){for(const u of d)if(this.size<this._maxSize)this._heap.push(u),this._siftUp();else{const f=this._smallest();this._comparator(u,this._heap[f])&&(this._heap[f]=u,this._siftUpFrom(f))}return this.size}pop(){const d=this.peek(),u=this.size-1;return u>0&&this._swap(0,u),this._heap.pop(),this._siftDown(),d}replace(d){const u=this.peek();return this._heap[0]=d,this._siftDown(),u}_parent(d){return(d+1>>>1)-1}_left(d){return(d<<1)+1}_right(d){return d+1<<1}_greater(d,u){return this._comparator(this._heap[d],this._heap[u])}_swap(d,u){const f=this._heap[d];this._heap[d]=this._heap[u],this._heap[u]=f}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(d){for(;d>0&&this._greater(d,this._parent(d));)this._swap(d,this._parent(d)),d=this._parent(d)}_siftDown(){let d=0;for(;this._left(d)<this.size&&this._greater(this._left(d),d)||this._right(d)<this.size&&this._greater(this._right(d),d);){const u=this._right(d)<this.size&&this._greater(this._right(d),this._left(d))?this._right(d):this._left(d);this._swap(d,u),d=u}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class n{constructor(){this.root=o.default()}extend(d){for(const u of d)this.push(u)}push(d){let u=this.root;for(const f of d){let _=u.children.get(f);_===void 0&&(_=o.default(),u.children.set(f,_)),u=_}u.isLeaf=!0}*commonPrefixSearch(d){let u=this.root;if(u===void 0)return;let f="";for(const _ of d){if(f+=_,u=u.children.get(_),u===void 0)return;u.isLeaf&&(yield f)}}}class o{constructor(d,u){this.isLeaf=d,this.children=u}static default(){return new o(!1,new Map)}}class a{constructor(d,u,f){this.chars=Array.from(d),this.len=this.chars.length,this.bosTokenId=u,this.eosTokenId=f,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const _=new i(this.bosTokenId,0,0,0,0),v=new i(this.eosTokenId,1,this.len,0,0);this.nodes.push(_.clone()),this.nodes.push(v.clone()),this.beginNodes[this.len].push(v),this.endNodes[0].push(_)}insert(d,u,f,_){const v=this.nodes.length,I=new i(_,v,d,u,f);this.beginNodes[d].push(I),this.endNodes[d+u].push(I),this.nodes.push(I)}viterbi(){const d=this.len;let u=0;for(;u<=d;){if(this.beginNodes[u].length==0)return[];for(let M of this.beginNodes[u]){M.prev=null;let y=0,$=null;for(let x of this.endNodes[u]){const T=x.backtraceScore+M.score;($===null||T>y)&&($=x.clone(),y=T)}if($!==null)M.prev=$,M.backtraceScore=y;else return[]}++u}const f=[],v=this.beginNodes[d][0].prev;if(v===null)return[];let I=v.clone();for(;I.prev!==null;)f.push(I.clone()),I=I.clone().prev.clone();return f.reverse(),f}piece(d){return this.chars.slice(d.pos,d.pos+d.length).join("")}tokens(){return this.viterbi().map(u=>this.piece(u))}tokenIds(){return this.viterbi().map(u=>u.tokenId)}}class i{constructor(d,u,f,_,v){this.tokenId=d,this.nodeId=u,this.pos=f,this.length=_,this.score=v,this.prev=null,this.backtraceScore=0}clone(){const d=new i(this.tokenId,this.nodeId,this.pos,this.length,this.score);return d.prev=this.prev,d.backtraceScore=this.backtraceScore,d}}class l{constructor(d){this.trie=this._buildTrie(d)}_buildTrie(d){const u=Object.create(null);for(const f of d){let _=u;for(let v=0;v<f.length;++v)_=_[f[v]]??=Object.create(null);_.end=f}return u}split(d){const u=[],f=d.length;let _=0,v=0;for(;v<f;){let I=this.trie,M=null,y=v;for(;y<f&&(I=I[d[y]]);)I.end&&(M=I.end),++y;M?(v>_&&u.push(d.slice(_,v)),u.push(M),v+=M.length,_=v):++v}return _<f&&u.push(d.slice(_)),u}}class c{constructor(d){this.capacity=d,this.cache=new Map}get(d){if(!this.cache.has(d))return;const u=this.cache.get(d);return this.cache.delete(d),this.cache.set(d,u),u}put(d,u){this.cache.has(d)&&this.cache.delete(d),this.cache.set(d,u),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}}),"./src/utils/devices.js":((e,r,t)=>{t.r(r),t.d(r,{DEVICE_TYPES:()=>s});const s=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})}),"./src/utils/dtypes.js":((e,r,t)=>{t.r(r),t.d(r,{DATA_TYPES:()=>a,DEFAULT_DEVICE_DTYPE_MAPPING:()=>i,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>l,isWebGpuFp16Supported:()=>o});var s=t("./src/env.js"),n=t("./src/utils/devices.js");const o=(function(){let c;return async function(){if(c===void 0)if(!s.apis.IS_WEBGPU_AVAILABLE)c=!1;else try{c=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{c=!1}return c}})(),a=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),i=Object.freeze({[n.DEVICE_TYPES.wasm]:a.q8}),l=Object.freeze({[a.fp32]:"",[a.fp16]:"_fp16",[a.int8]:"_int8",[a.uint8]:"_uint8",[a.q8]:"_quantized",[a.q4]:"_q4",[a.q4f16]:"_q4f16",[a.bnb4]:"_bnb4"})}),"./src/utils/generic.js":((e,r,t)=>{t.r(r),t.d(r,{Callable:()=>s});const s=class{constructor(){let n=function(...o){return n._call(...o)};return Object.setPrototypeOf(n,new.target.prototype)}_call(...n){throw Error("Must implement _call method in subclass")}}}),"./src/utils/hub.js":((e,r,t)=>{t.r(r),t.d(r,{MAX_EXTERNAL_DATA_CHUNKS:()=>i,getFile:()=>f,getModelFile:()=>y,getModelJSON:()=>x,getModelText:()=>$});var s=t("?7992"),n=t("?5af5"),o=t("./src/env.js"),a=t("./src/utils/core.js");const i=100,l={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class c{constructor(S){if(this.filePath=S,this.headers=new Headers,this.exists=s.existsSync(S),this.exists){this.status=200,this.statusText="OK";let D=s.statSync(S);this.headers.set("content-length",D.size.toString()),this.updateContentType();const O=s.createReadStream(S);this.body=new ReadableStream({start(H){O.on("data",G=>H.enqueue(G)),O.on("end",()=>H.close()),O.on("error",G=>H.error(G))},cancel(){O.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const S=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",l[S]??"application/octet-stream")}clone(){let S=new c(this.filePath);return S.exists=this.exists,S.status=this.status,S.statusText=this.statusText,S.headers=new Headers(this.headers),S}async arrayBuffer(){return(await s.promises.readFile(this.filePath)).buffer}async blob(){const S=await s.promises.readFile(this.filePath);return new Blob([S],{type:this.headers.get("content-type")})}async text(){return await s.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function p(b,S=null,D=null){let O;try{O=new URL(b)}catch{return!1}return!(S&&!S.includes(O.protocol)||D&&!D.includes(O.hostname))}const d=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function u(b){return!(!d.test(b)||b.includes("..")||b.includes("--")||b.endsWith(".git")||b.endsWith(".ipynb"))}async function f(b){if(o.env.useFS&&!p(b,["http:","https:","blob:"]))return new c(b instanceof URL?b.protocol==="file:"?b.pathname:b.toString():b);if(typeof process<"u"&&process?.release?.name==="node"){const S=!!Ac?.TESTING_REMOTELY,D=o.env.version,O=new Headers;if(O.set("User-Agent",`transformers.js/${D}; is_ci/${S};`),p(b,["http:","https:"],["huggingface.co","hf.co"])){const G=Ac?.HF_TOKEN??Ac?.HF_ACCESS_TOKEN;G&&O.set("Authorization",`Bearer ${G}`)}return fetch(b,{headers:O})}else return fetch(b)}const _={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function v(b,S,D){if(!D)return null;const O=_[b]??`Error (${b}) occurred while trying to load file`;throw Error(`${O}: "${S}".`)}class I{constructor(S){this.path=S}async match(S){let D=n.join(this.path,S),O=new c(D);if(O.exists)return O}async put(S,D,O=void 0){let H=n.join(this.path,S);try{const G=D.headers.get("Content-Length"),z=parseInt(G??"0");let Z=0;await s.promises.mkdir(n.dirname(H),{recursive:!0});const Q=s.createWriteStream(H),Y=D.body.getReader();for(;;){const{done:re,value:te}=await Y.read();if(re)break;await new Promise((ue,B)=>{Q.write(te,F=>{if(F){B(F);return}ue()})}),Z+=te.length;const le=z?Z/z*100:0;O?.({progress:le,loaded:Z,total:z})}Q.close()}catch(G){try{await s.promises.unlink(H)}catch{}throw G}}}async function M(b,...S){for(let D of S)try{let O=await b.match(D);if(O)return O}catch{continue}}async function y(b,S,D=!0,O={},H=!1){if(!o.env.allowLocalModels){if(O.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!o.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,a.dispatchCallback)(O.progress_callback,{status:"initiate",name:b,file:S});let G;if(!G&&o.env.useCustomCache){if(!o.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!o.env.customCache.match||!o.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");G=o.env.customCache}if(!G&&o.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{G=await caches.open("transformers-cache")}catch(ie){console.warn("An error occurred while opening the browser cache:",ie)}}if(!G&&o.env.useFSCache){if(!o.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");G=new I(O.cache_dir??o.env.cacheDir)}const z=O.revision??"main",Z=E(b,S),Q=u(b),Y=Q?E(o.env.localModelPath,Z):Z,re=E(o.env.remoteHost,o.env.remotePathTemplate.replaceAll("{model}",b).replaceAll("{revision}",encodeURIComponent(z)),S);let te;const le=G instanceof I?z==="main"?Z:E(b,z,S):re;let ue=!1,B;G&&(B=await M(G,Y,le));const F=B!==void 0;if(B===void 0){if(o.env.allowLocalModels)if(p(Z,["http:","https:"])){if(O.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${Z}.`);if(!o.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${Z}.`)}else try{B=await f(Y),te=Y}catch(ke){console.warn(`Unable to load from local path "${Y}": "${ke}"`)}if(B===void 0||B.status===404){if(O.local_files_only||!o.env.allowRemoteModels){if(D)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${Y}".`);return null}if(!Q)throw Error(`Local file missing at "${Y}" and download aborted due to invalid model ID "${b}".`);if(B=await f(re),B.status!==200)return v(B.status,re,D);te=le}ue=G&&typeof Response<"u"&&B instanceof Response&&B.status===200}(0,a.dispatchCallback)(O.progress_callback,{status:"download",name:b,file:S});let K;if(!(o.apis.IS_NODE_ENV&&H)){let ie;O.progress_callback?F&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(ie=new Uint8Array(await B.arrayBuffer()),(0,a.dispatchCallback)(O.progress_callback,{status:"progress",name:b,file:S,progress:100,loaded:ie.length,total:ie.length})):ie=await T(B,ke=>{(0,a.dispatchCallback)(O.progress_callback,{status:"progress",name:b,file:S,...ke})}):ie=new Uint8Array(await B.arrayBuffer()),K=ie}if(ue&&te&&await G.match(te)===void 0)if(K)await G.put(te,new Response(K,{headers:B.headers})).catch(ie=>{console.warn(`Unable to add response to browser cache: ${ie}.`)});else{const ie=O.progress_callback?ke=>(0,a.dispatchCallback)(O.progress_callback,{status:"progress",name:b,file:S,...ke}):void 0;await G.put(te,B,ie)}if((0,a.dispatchCallback)(O.progress_callback,{status:"done",name:b,file:S}),K){if(!o.apis.IS_NODE_ENV&&H)throw new Error("Cannot return path in a browser environment.");return K}if(B instanceof c)return B.filePath;const j=await G?.match(te);if(j instanceof c)return j.filePath;if(j instanceof Response)return new Uint8Array(await j.arrayBuffer());if(typeof j=="string")return j;throw new Error("Unable to get model file path or buffer.")}async function $(b,S,D=!0,O={}){const H=await y(b,S,D,O,!1);return H===null?null:new TextDecoder("utf-8").decode(H)}async function x(b,S,D=!0,O={}){const H=await $(b,S,D,O);return H===null?{}:JSON.parse(H)}async function T(b,S){const D=b.headers.get("Content-Length");D===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let O=parseInt(D??"0"),H=new Uint8Array(O),G=0;const z=b.body.getReader();async function Z(){const{done:Q,value:Y}=await z.read();if(Q)return;const re=G+Y.length;if(re>O){O=re;const le=new Uint8Array(O);le.set(H),H=le}H.set(Y,G),G=re;const te=G/O*100;return S({progress:te,loaded:G,total:O}),Z()}return await Z(),H}function E(...b){return b=b.map((S,D)=>(D&&(S=S.replace(new RegExp("^/"),"")),D!==b.length-1&&(S=S.replace(new RegExp("/$"),"")),S)),b.join("/")}}),"./src/utils/image.js":((e,r,t)=>{t.r(r),t.d(r,{RawImage:()=>_,load_image:()=>v});var s=t("./src/utils/core.js"),n=t("./src/utils/hub.js"),o=t("./src/env.js"),a=t("./src/utils/tensor.js"),i=t("?2b25");let l,c,p;const d=o.apis.IS_BROWSER_ENV||o.apis.IS_WEBWORKER_ENV;if(d)l=(I,M)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(I,M)},p=self.createImageBitmap,c=self.ImageData;else if(i)p=async I=>{const y=(await I.metadata()).channels,{data:$,info:x}=await I.rotate().raw().toBuffer({resolveWithObject:!0}),T=new _(new Uint8ClampedArray($),x.width,x.height,x.channels);return y!==void 0&&y!==x.channels&&T.convert(y),T};else throw new Error("Unable to load image processing library.");const u={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},f=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class _{constructor(M,y,$,x){this.data=M,this.width=y,this.height=$,this.channels=x}get size(){return[this.width,this.height]}static async read(M){if(M instanceof _)return M;if(typeof M=="string"||M instanceof URL)return await this.fromURL(M);if(M instanceof Blob)return await this.fromBlob(M);if(typeof HTMLCanvasElement<"u"&&M instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&M instanceof OffscreenCanvas)return this.fromCanvas(M);throw new Error(`Unsupported input type: ${typeof M}`)}static fromCanvas(M){if(!d)throw new Error("fromCanvas() is only supported in browser environments.");const $=M.getContext("2d").getImageData(0,0,M.width,M.height).data;return new _($,M.width,M.height,4)}static async fromURL(M){const y=await(0,n.getFile)(M);if(y.status!==200)throw new Error(`Unable to read image from "${M}" (${y.status} ${y.statusText})`);const $=await y.blob();return this.fromBlob($)}static async fromBlob(M){if(d){const y=await p(M),$=l(y.width,y.height).getContext("2d");return $.drawImage(y,0,0),new this($.getImageData(0,0,y.width,y.height).data,y.width,y.height,4)}else{const y=i(await M.arrayBuffer());return await p(y)}}static fromTensor(M,y="CHW"){if(M.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${M.dims.length} dimensions.`);if(y==="CHW")M=M.transpose(1,2,0);else if(y!=="HWC")throw new Error(`Unsupported channel format: ${y}`);if(!(M.data instanceof Uint8ClampedArray||M.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${M.type}`);switch(M.dims[2]){case 1:case 2:case 3:case 4:return new _(M.data,M.dims[1],M.dims[0],M.dims[2]);default:throw new Error(`Unsupported number of channels: ${M.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const M=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let y=0,$=0;y<this.data.length;y+=this.channels){const x=this.data[y],T=this.data[y+1],E=this.data[y+2];M[$++]=Math.round(.2989*x+.587*T+.114*E)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(M,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const M=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let y=0,$=0;y<this.data.length;++y)M[$++]=this.data[y],M[$++]=this.data[y],M[$++]=this.data[y];break;case 4:for(let y=0,$=0;y<this.data.length;y+=4)M[$++]=this.data[y],M[$++]=this.data[y+1],M[$++]=this.data[y+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(M,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const M=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let y=0,$=0;y<this.data.length;++y)M[$++]=this.data[y],M[$++]=this.data[y],M[$++]=this.data[y],M[$++]=255;break;case 3:for(let y=0,$=0;y<this.data.length;y+=3)M[$++]=this.data[y],M[$++]=this.data[y+1],M[$++]=this.data[y+2],M[$++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(M,this.width,this.height,4)}putAlpha(M){if(M.width!==this.width||M.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${M.width}x${M.height}`);if(M.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${M.channels}`);const y=this.data,$=M.data,x=this.width*this.height;if(this.channels===3){const T=new Uint8ClampedArray(x*4);for(let E=0,b=0,S=0;E<x;++E)T[S++]=y[b++],T[S++]=y[b++],T[S++]=y[b++],T[S++]=$[E];return this._update(T,this.width,this.height,4)}else if(this.channels===4){for(let T=0;T<x;++T)y[4*T+3]=$[T];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(M,y,{resample:$=2}={}){if(this.width===M&&this.height===y)return this;let x=u[$]??$;const T=(0,s.isNullishDimension)(M),E=(0,s.isNullishDimension)(y);if(T&&E)return this;if(T?M=y/this.height*this.width:E&&(y=M/this.width*this.height),d){const b=this.channels,S=this.toCanvas(),D=l(M,y).getContext("2d");return D.drawImage(S,0,0,M,y),new _(D.getImageData(0,0,M,y).data,M,y,4).convert(b)}else{let b=this.toSharp();switch(x){case"box":case"hamming":(x==="box"||x==="hamming")&&(console.warn(`Resampling method ${x} is not yet supported. Using bilinear instead.`),x="bilinear");case"nearest":case"bilinear":case"bicubic":b=b.affine([M/this.width,0,0,y/this.height],{interpolator:x});break;case"lanczos":b=b.resize({width:M,height:y,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${x} is not supported.`)}return await p(b)}}async pad([M,y,$,x]){if(M=Math.max(M,0),y=Math.max(y,0),$=Math.max($,0),x=Math.max(x,0),M===0&&y===0&&$===0&&x===0)return this;if(d){const T=this.channels,E=this.toCanvas(),b=this.width+M+y,S=this.height+$+x,D=l(b,S).getContext("2d");return D.drawImage(E,0,0,this.width,this.height,M,$,this.width,this.height),new _(D.getImageData(0,0,b,S).data,b,S,4).convert(T)}else{const T=this.toSharp().extend({left:M,right:y,top:$,bottom:x});return await p(T)}}async crop([M,y,$,x]){if(M=Math.max(M,0),y=Math.max(y,0),$=Math.min($,this.width-1),x=Math.min(x,this.height-1),M===0&&y===0&&$===this.width-1&&x===this.height-1)return this;const T=$-M+1,E=x-y+1;if(d){const b=this.channels,S=this.toCanvas(),D=l(T,E).getContext("2d");return D.drawImage(S,M,y,T,E,0,0,T,E),new _(D.getImageData(0,0,T,E).data,T,E,4).convert(b)}else{const b=this.toSharp().extract({left:M,top:y,width:T,height:E});return await p(b)}}async center_crop(M,y){if(this.width===M&&this.height===y)return this;const $=(this.width-M)/2,x=(this.height-y)/2;if(d){const T=this.channels,E=this.toCanvas(),b=l(M,y).getContext("2d");let S=0,D=0,O=0,H=0;return $>=0?S=$:O=-$,x>=0?D=x:H=-x,b.drawImage(E,S,D,M,y,O,H,M,y),new _(b.getImageData(0,0,M,y).data,M,y,4).convert(T)}else{let T=this.toSharp();if($>=0&&x>=0)T=T.extract({left:Math.floor($),top:Math.floor(x),width:M,height:y});else if($<=0&&x<=0){const E=Math.floor(-x),b=Math.floor(-$);T=T.extend({top:E,left:b,right:M-this.width-b,bottom:y-this.height-E})}else{let E=[0,0],b=0;x<0?(E[0]=Math.floor(-x),E[1]=y-this.height-E[0]):b=Math.floor(x);let S=[0,0],D=0;$<0?(S[0]=Math.floor(-$),S[1]=M-this.width-S[0]):D=Math.floor($),T=T.extend({top:E[0],bottom:E[1],left:S[0],right:S[1]}).extract({left:D,top:b,width:M,height:y})}return await p(T)}}async toBlob(M="image/png",y=1){if(!d)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:M,quality:y})}toTensor(M="CHW"){let y=new a.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(M!=="HWC")if(M==="CHW")y=y.permute(2,0,1);else throw new Error(`Unsupported channel format: ${M}`);return y}toCanvas(){if(!d)throw new Error("toCanvas() is only supported in browser environments.");const M=this.clone().rgba(),y=l(M.width,M.height),$=new c(M.data,M.width,M.height);return y.getContext("2d").putImageData($,0,0),y}split(){const{data:M,width:y,height:$,channels:x}=this,T=M.constructor,E=M.length/x,b=Array.from({length:x},()=>new T(E));for(let S=0;S<E;++S){const D=x*S;for(let O=0;O<x;++O)b[O][S]=M[D+O]}return b.map(S=>new _(S,y,$,1))}_update(M,y,$,x=null){return this.data=M,this.width=y,this.height=$,x!==null&&(this.channels=x),this}clone(){return new _(this.data.slice(),this.width,this.height,this.channels)}convert(M){if(this.channels===M)return this;switch(M){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(M){if(d){if(o.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const y=M.split(".").pop().toLowerCase(),$=f.get(y)??"image/png",x=await this.toBlob($);(0,s.saveBlob)(M,x)}else{if(o.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(M);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(d)throw new Error("toSharp() is only supported in server-side environments.");return i(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const v=_.read.bind(_)}),"./src/utils/maths.js":((e,r,t)=>{t.r(r),t.d(r,{FFT:()=>v,bankers_round:()=>y,cos_sim:()=>l,dot:()=>i,dynamic_time_warping:()=>$,interpolate_data:()=>s,log_softmax:()=>a,magnitude:()=>c,max:()=>d,medianFilter:()=>I,min:()=>p,permute_data:()=>n,round:()=>M,softmax:()=>o});function s(x,[T,E,b],[S,D],O="bilinear",H=!1){const G=D/b,z=S/E,Z=new x.constructor(S*D*T),Q=E*b,Y=S*D;for(let re=0;re<S;++re)for(let te=0;te<D;++te){const le=re*D+te,ue=(te+.5)/G-.5,B=(re+.5)/z-.5;let F=Math.floor(ue),K=Math.floor(B);const j=Math.min(F+1,b-1),ie=Math.min(K+1,E-1);F=Math.max(F,0),K=Math.max(K,0);const ke=ue-F,be=B-K,Fe=(1-ke)*(1-be),Ke=ke*(1-be),ve=(1-ke)*be,q=ke*be,N=K*b,de=ie*b,xe=N+F,$e=N+j,ye=de+F,fe=de+j;for(let Ee=0;Ee<T;++Ee){const ge=Ee*Q;Z[Ee*Y+le]=Fe*x[ge+xe]+Ke*x[ge+$e]+ve*x[ge+ye]+q*x[ge+fe]}}return Z}function n(x,T,E){const b=new Array(E.length),S=new Array(E.length);for(let H=E.length-1,G=1;H>=0;--H)S[H]=G,b[H]=T[E[H]],G*=b[H];const D=E.map((H,G)=>S[E.indexOf(G)]),O=new x.constructor(x.length);for(let H=0;H<x.length;++H){let G=0;for(let z=T.length-1,Z=H;z>=0;--z)G+=Z%T[z]*D[z],Z=Math.floor(Z/T[z]);O[G]=x[H]}return[O,b]}function o(x){const T=d(x)[0],E=x.map(D=>Math.exp(D-T)),b=E.reduce((D,O)=>D+O,0);return E.map(D=>D/b)}function a(x){const T=d(x)[0];let E=0;for(let D=0;D<x.length;++D)E+=Math.exp(x[D]-T);const b=Math.log(E);return x.map(D=>D-T-b)}function i(x,T){let E=0;for(let b=0;b<x.length;++b)E+=x[b]*T[b];return E}function l(x,T){const E=i(x,T),b=c(x),S=c(T);return E/(b*S)}function c(x){return Math.sqrt(x.reduce((T,E)=>T+E*E,0))}function p(x){if(x.length===0)throw Error("Array must not be empty");let T=x[0],E=0;for(let b=1;b<x.length;++b)x[b]<T&&(T=x[b],E=b);return[T,E]}function d(x){if(x.length===0)throw Error("Array must not be empty");let T=x[0],E=0;for(let b=1;b<x.length;++b)x[b]>T&&(T=x[b],E=b);return[T,E]}function u(x){return x>0&&(x&x-1)===0}class f{constructor(T){if(this.size=T|0,this.size<=1||!u(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=T<<1,this.table=new Float64Array(this.size*2);for(let b=0;b<this.table.length;b+=2){const S=Math.PI*b/this.size;this.table[b]=Math.cos(S),this.table[b+1]=-Math.sin(S)}let E=0;for(let b=1;this.size>b;b<<=1)++E;this._width=E%2===0?E-1:E,this._bitrev=new Int32Array(1<<this._width);for(let b=0;b<this._bitrev.length;++b){this._bitrev[b]=0;for(let S=0;S<this._width;S+=2){const D=this._width-S-2;this._bitrev[b]|=(b>>>S&3)<<D}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(T,E){const b=E||new Array(T.length>>>1);for(let S=0;S<T.length;S+=2)b[S>>>1]=T[S];return b}toComplexArray(T,E){const b=E||this.createComplexArray();for(let S=0;S<b.length;S+=2)b[S]=T[S>>>1],b[S+1]=0;return b}transform(T,E){if(T===E)throw new Error("Input and output buffers must be different");this._transform4(T,E,1)}realTransform(T,E){if(T===E)throw new Error("Input and output buffers must be different");this._realTransform4(T,E,1)}inverseTransform(T,E){if(T===E)throw new Error("Input and output buffers must be different");this._transform4(T,E,-1);for(let b=0;b<T.length;++b)T[b]/=this.size}_transform4(T,E,b){const S=this._csize;let O=1<<this._width,H=S/O<<1,G,z;const Z=this._bitrev;if(H===4)for(G=0,z=0;G<S;G+=H,++z){const Y=Z[z];this._singleTransform2(E,T,G,Y,O)}else for(G=0,z=0;G<S;G+=H,++z){const Y=Z[z];this._singleTransform4(E,T,G,Y,O,b)}const Q=this.table;for(O>>=2;O>=2;O>>=2){H=S/O<<1;const Y=H>>>2;for(G=0;G<S;G+=H){const re=G+Y-1;for(let te=G,le=0;te<re;te+=2,le+=O){const ue=te,B=ue+Y,F=B+Y,K=F+Y,j=T[ue],ie=T[ue+1],ke=T[B],be=T[B+1],Fe=T[F],Ke=T[F+1],ve=T[K],q=T[K+1],N=Q[le],de=b*Q[le+1],xe=ke*N-be*de,$e=ke*de+be*N,ye=Q[2*le],fe=b*Q[2*le+1],Ee=Fe*ye-Ke*fe,ge=Fe*fe+Ke*ye,Ae=Q[3*le],Oe=b*Q[3*le+1],He=ve*Ae-q*Oe,Me=ve*Oe+q*Ae,rt=j+Ee,Ne=ie+ge,je=j-Ee,Ze=ie-ge,Xe=xe+He,Ye=$e+Me,et=b*(xe-He),Ct=b*($e-Me);T[ue]=rt+Xe,T[ue+1]=Ne+Ye,T[B]=je+Ct,T[B+1]=Ze-et,T[F]=rt-Xe,T[F+1]=Ne-Ye,T[K]=je-Ct,T[K+1]=Ze+et}}}}_singleTransform2(T,E,b,S,D){const O=T[S],H=T[S+1],G=T[S+D],z=T[S+D+1];E[b]=O+G,E[b+1]=H+z,E[b+2]=O-G,E[b+3]=H-z}_singleTransform4(T,E,b,S,D,O){const H=D*2,G=D*3,z=T[S],Z=T[S+1],Q=T[S+D],Y=T[S+D+1],re=T[S+H],te=T[S+H+1],le=T[S+G],ue=T[S+G+1],B=z+re,F=Z+te,K=z-re,j=Z-te,ie=Q+le,ke=Y+ue,be=O*(Q-le),Fe=O*(Y-ue);E[b]=B+ie,E[b+1]=F+ke,E[b+2]=K+Fe,E[b+3]=j-be,E[b+4]=B-ie,E[b+5]=F-ke,E[b+6]=K-Fe,E[b+7]=j+be}_realTransform4(T,E,b){const S=this._csize;let O=1<<this._width,H=S/O<<1,G,z;const Z=this._bitrev;if(H===4)for(G=0,z=0;G<S;G+=H,++z){const re=Z[z];this._singleRealTransform2(E,T,G,re>>>1,O>>>1)}else for(G=0,z=0;G<S;G+=H,++z){const re=Z[z];this._singleRealTransform4(E,T,G,re>>>1,O>>>1,b)}const Q=this.table;for(O>>=2;O>=2;O>>=2){H=S/O<<1;const re=H>>>1,te=re>>>1,le=te>>>1;for(G=0;G<S;G+=H)for(let ue=0,B=0;ue<=le;ue+=2,B+=O){const F=G+ue,K=F+te,j=K+te,ie=j+te,ke=T[F],be=T[F+1],Fe=T[K],Ke=T[K+1],ve=T[j],q=T[j+1],N=T[ie],de=T[ie+1],xe=ke,$e=be,ye=Q[B],fe=b*Q[B+1],Ee=Fe*ye-Ke*fe,ge=Fe*fe+Ke*ye,Ae=Q[2*B],Oe=b*Q[2*B+1],He=ve*Ae-q*Oe,Me=ve*Oe+q*Ae,rt=Q[3*B],Ne=b*Q[3*B+1],je=N*rt-de*Ne,Ze=N*Ne+de*rt,Xe=xe+He,Ye=$e+Me,et=xe-He,Ct=$e-Me,It=Ee+je,ht=ge+Ze,br=b*(Ee-je),Gr=b*(ge-Ze);if(T[F]=Xe+It,T[F+1]=Ye+ht,T[K]=et+Gr,T[K+1]=Ct-br,ue===0){T[j]=Xe-It,T[j+1]=Ye-ht;continue}if(ue===le)continue;const Dr=G+te-ue,Lr=G+re-ue;T[Dr]=et-b*Gr,T[Dr+1]=-Ct-b*br,T[Lr]=Xe-b*It,T[Lr+1]=-Ye+b*ht}}const Y=S>>>1;for(let re=2;re<Y;re+=2)T[S-re]=T[re],T[S-re+1]=-T[re+1]}_singleRealTransform2(T,E,b,S,D){const O=T[S],H=T[S+D];E[b]=O+H,E[b+1]=0,E[b+2]=O-H,E[b+3]=0}_singleRealTransform4(T,E,b,S,D,O){const H=D*2,G=D*3,z=T[S],Z=T[S+D],Q=T[S+H],Y=T[S+G],re=z+Q,te=z-Q,le=Z+Y,ue=O*(Z-Y);E[b]=re+le,E[b+1]=0,E[b+2]=te,E[b+3]=-ue,E[b+4]=re-le,E[b+5]=0,E[b+6]=te,E[b+7]=ue}}class _{constructor(T){const E=2*(T-1),b=2*(2*T-1),S=2**Math.ceil(Math.log2(b));this.bufferSize=S,this._a=E;const D=new Float64Array(b),O=new Float64Array(S);this._chirpBuffer=new Float64Array(S),this._buffer1=new Float64Array(S),this._buffer2=new Float64Array(S),this._outBuffer1=new Float64Array(S),this._outBuffer2=new Float64Array(S);const H=-2*Math.PI/T,G=Math.cos(H),z=Math.sin(H);for(let Z=0;Z<b>>1;++Z){const Q=(Z+1-T)**2/2,Y=Math.sqrt(G**2+z**2)**Q,re=Q*Math.atan2(z,G),te=2*Z;D[te]=Y*Math.cos(re),D[te+1]=Y*Math.sin(re),O[te]=D[te],O[te+1]=-D[te+1]}this._slicedChirpBuffer=D.subarray(E,b),this._f=new f(S>>1),this._f.transform(this._chirpBuffer,O)}_transform(T,E,b){const S=this._buffer1,D=this._buffer2,O=this._outBuffer1,H=this._outBuffer2,G=this._chirpBuffer,z=this._slicedChirpBuffer,Z=this._a;if(b)for(let Q=0;Q<z.length;Q+=2){const Y=Q+1,re=Q>>1,te=E[re];S[Q]=te*z[Q],S[Y]=te*z[Y]}else for(let Q=0;Q<z.length;Q+=2){const Y=Q+1;S[Q]=E[Q]*z[Q]-E[Y]*z[Y],S[Y]=E[Q]*z[Y]+E[Y]*z[Q]}this._f.transform(O,S);for(let Q=0;Q<G.length;Q+=2){const Y=Q+1;D[Q]=O[Q]*G[Q]-O[Y]*G[Y],D[Y]=O[Q]*G[Y]+O[Y]*G[Q]}this._f.inverseTransform(H,D);for(let Q=0;Q<H.length;Q+=2){const Y=H[Q+Z],re=H[Q+Z+1],te=z[Q],le=z[Q+1];T[Q]=Y*te-re*le,T[Q+1]=Y*le+re*te}}transform(T,E){this._transform(T,E,!1)}realTransform(T,E){this._transform(T,E,!0)}}class v{constructor(T){this.fft_length=T,this.isPowerOfTwo=u(T),this.isPowerOfTwo?(this.fft=new f(T),this.outputBufferSize=2*T):(this.fft=new _(T),this.outputBufferSize=this.fft.bufferSize)}realTransform(T,E){this.fft.realTransform(T,E)}transform(T,E){this.fft.transform(T,E)}}function I(x,T){if(T%2===0||T<=0)throw new Error("Window size must be a positive odd number");const E=new x.constructor(x.length),b=new x.constructor(T),S=Math.floor(T/2);for(let D=0;D<x.length;++D){let O=0;for(let H=-S;H<=S;++H){let G=D+H;G<0?G=Math.abs(G):G>=x.length&&(G=2*(x.length-1)-G),b[O++]=x[G]}b.sort(),E[D]=b[S]}return E}function M(x,T){const E=Math.pow(10,T);return Math.round(x*E)/E}function y(x){const T=Math.round(x);return Math.abs(x)%1===.5?T%2===0?T:T-1:T}function $(x){const T=x.length,E=x[0].length,b=[T+1,E+1],S=Array.from({length:b[0]},()=>Array(b[1]).fill(1/0));S[0][0]=0;const D=Array.from({length:b[0]},()=>Array(b[1]).fill(-1));for(let Z=1;Z<b[1];++Z)for(let Q=1;Q<b[0];++Q){const Y=S[Q-1][Z-1],re=S[Q-1][Z],te=S[Q][Z-1];let le,ue;Y<re&&Y<te?(le=Y,ue=0):re<Y&&re<te?(le=re,ue=1):(le=te,ue=2),S[Q][Z]=x[Q-1][Z-1]+le,D[Q][Z]=ue}for(let Z=0;Z<b[1];++Z)D[0][Z]=2;for(let Z=0;Z<b[0];++Z)D[Z][0]=1;let O=T,H=E,G=[],z=[];for(;O>0||H>0;)switch(G.push(O-1),z.push(H-1),D[O][H]){case 0:--O,--H;break;case 1:--O;break;case 2:--H;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${O}, ${H}]. Please file a bug report.`)}return G.reverse(),z.reverse(),[G,z]}}),"./src/utils/tensor.js":((e,r,t)=>{t.r(r),t.d(r,{DataTypeMap:()=>a,Tensor:()=>i,cat:()=>E,full:()=>z,full_like:()=>Z,interpolate:()=>p,interpolate_4d:()=>d,layer_norm:()=>y,matmul:()=>u,mean:()=>O,mean_pooling:()=>M,ones:()=>Q,ones_like:()=>Y,permute:()=>c,quantize_embeddings:()=>ue,rand:()=>le,rfft:()=>f,slice:()=>I,stack:()=>b,std_mean:()=>D,topk:()=>_,zeros:()=>re,zeros_like:()=>te});var s=t("./src/utils/maths.js"),n=t("./src/backends/onnx.js"),o=t("./src/ops/registry.js");const a=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class i{get dims(){return this.ort_tensor.dims}set dims(F){this.ort_tensor.dims=F}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...F){return(0,n.isONNXTensor)(F[0])?this.ort_tensor=F[0]:this.ort_tensor=new n.Tensor(F[0],F[1],F[2]),new Proxy(this,{get:(K,j)=>{if(typeof j=="string"){let ie=Number(j);if(Number.isInteger(ie))return K._getitem(ie)}return K[j]},set:(K,j,ie)=>K[j]=ie})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[F,...K]=this.dims;if(K.length>0){const j=K.reduce((ie,ke)=>ie*ke);for(let ie=0;ie<F;++ie)yield this._subarray(ie,j,K)}else yield*this.data}_getitem(F){const[K,...j]=this.dims;if(F=T(F,K),j.length>0){const ie=j.reduce((ke,be)=>ke*be);return this._subarray(F,ie,j)}else return new i(this.type,[this.data[F]],j)}indexOf(F){const K=this.data;for(let j=0;j<K.length;++j)if(K[j]==F)return j;return-1}_subarray(F,K,j){const ie=F*K,ke=(F+1)*K,be="subarray"in this.data?this.data.subarray(ie,ke):this.data.slice(ie,ke);return new i(this.type,be,j)}item(){const F=this.data;if(F.length!==1)throw new Error(`a Tensor with ${F.length} elements cannot be converted to Scalar`);return F[0]}tolist(){return l(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const F=this.data;for(let K=0;K<F.length;++K)F[K]=1/(1+Math.exp(-F[K]));return this}map(F){return this.clone().map_(F)}map_(F){const K=this.data;for(let j=0;j<K.length;++j)K[j]=F(K[j],j,K);return this}mul(F){return this.clone().mul_(F)}mul_(F){const K=this.data;for(let j=0;j<K.length;++j)K[j]*=F;return this}div(F){return this.clone().div_(F)}div_(F){const K=this.data;for(let j=0;j<K.length;++j)K[j]/=F;return this}add(F){return this.clone().add_(F)}add_(F){const K=this.data;for(let j=0;j<K.length;++j)K[j]+=F;return this}sub(F){return this.clone().sub_(F)}sub_(F){const K=this.data;for(let j=0;j<K.length;++j)K[j]-=F;return this}clone(){return new i(this.type,this.data.slice(),this.dims.slice())}slice(...F){const K=[],j=[];for(let q=0;q<this.dims.length;++q){let N=F[q];if(N==null)j.push([0,this.dims[q]]),K.push(this.dims[q]);else if(typeof N=="number")N=T(N,this.dims[q],q),j.push([N,N+1]);else if(Array.isArray(N)&&N.length===2){let[de,xe]=N;if(de=de===null?0:T(de,this.dims[q],q,!1),xe=xe===null?this.dims[q]:T(xe,this.dims[q],q,!1),de>xe)throw new Error(`Invalid slice: ${N}`);const $e=[Math.max(de,0),Math.min(xe,this.dims[q])];j.push($e),K.push($e[1]-$e[0])}else throw new Error(`Invalid slice: ${N}`)}const ie=j.map(([q,N])=>N-q),ke=ie.reduce((q,N)=>q*N),be=this.data,Fe=new be.constructor(ke),Ke=this.stride();let ve=!0;for(let q=1;q<ie.length;++q)if(j[q][0]!==0||j[q][1]!==this.dims[q]){ve=!1;break}if(ve){const q=j[0][0]*Ke[0],N=j[0][1]*Ke[0];if(ArrayBuffer.isView(be))Fe.set(be.subarray(q,N));else if(Array.isArray(be)){const de=be.slice(q,N);for(let xe=0;xe<de.length;++xe)Fe[xe]=de[xe]}else throw new Error("Unsupported data type for slicing")}else for(let q=0;q<ke;++q){let N=0;for(let de=ie.length-1,xe=q;de>=0;--de){const $e=ie[de];N+=(xe%$e+j[de][0])*Ke[de],xe=Math.floor(xe/$e)}Fe[q]=be[N]}return new i(this.type,Fe,K)}permute(...F){return c(this,F)}transpose(...F){return this.permute(...F)}sum(F=null,K=!1){return this.norm(1,F,K)}norm(F="fro",K=null,j=!1){if(F==="fro")F=2;else if(typeof F=="string")throw Error(`Unsupported norm: ${F}`);const ie=this.data,ke=(ve,q)=>ve+q**F;if(K===null){const ve=ie.reduce(ke,0)**(1/F);return new i(this.type,[ve],[])}const[be,Fe,Ke]=S(ke,this,K,j);if(F!==1)for(let ve=0;ve<Fe.length;++ve)Fe[ve]=Fe[ve]**(1/F);return new i(be,Fe,Ke)}normalize_(F=2,K=1){K=T(K,this.dims.length);const j=this.norm(F,K,!0),ie=this.data,ke=j.data;for(let be=0;be<ie.length;++be){let Fe=0;for(let Ke=this.dims.length-1,ve=be,q=1;Ke>=0;--Ke){const N=this.dims[Ke];if(Ke!==K){const de=ve%N;Fe+=de*q,q*=this.dims[Ke]}ve=Math.floor(ve/N)}ie[be]/=ke[Fe]}return this}normalize(F=2,K=1){return this.clone().normalize_(F,K)}stride(){return H(this.dims)}squeeze(F=null){return new i(this.type,this.data,$(this.dims,F))}squeeze_(F=null){return this.dims=$(this.dims,F),this}unsqueeze(F=null){return new i(this.type,this.data,x(this.dims,F))}unsqueeze_(F=null){return this.dims=x(this.dims,F),this}flatten_(F=0,K=-1){K=(K+this.dims.length)%this.dims.length;let j=this.dims.slice(0,F),ie=this.dims.slice(F,K+1),ke=this.dims.slice(K+1);return this.dims=[...j,ie.reduce((be,Fe)=>be*Fe,1),...ke],this}flatten(F=0,K=-1){return this.clone().flatten_(F,K)}view(...F){let K=-1;for(let ie=0;ie<F.length;++ie)if(F[ie]===-1){if(K!==-1)throw new Error("Only one dimension can be inferred");K=ie}const j=this.data;if(K!==-1){const ie=F.reduce((ke,be,Fe)=>Fe!==K?ke*be:ke,1);F[K]=j.length/ie}return new i(this.type,j,F)}neg_(){const F=this.data;for(let K=0;K<F.length;++K)F[K]=-F[K];return this}neg(){return this.clone().neg_()}gt(F){const K=new Uint8Array(this.data.length),j=this.data;for(let ie=0;ie<j.length;++ie)K[ie]=j[ie]>F?1:0;return new i("bool",K,this.dims)}lt(F){const K=new Uint8Array(this.data.length),j=this.data;for(let ie=0;ie<j.length;++ie)K[ie]=j[ie]<F?1:0;return new i("bool",K,this.dims)}clamp_(F,K){const j=this.data;for(let ie=0;ie<j.length;++ie)j[ie]=Math.min(Math.max(j[ie],F),K);return this}clamp(F,K){return this.clone().clamp_(F,K)}round_(){const F=this.data;for(let K=0;K<F.length;++K)F[K]=Math.round(F[K]);return this}round(){return this.clone().round_()}mean(F=null,K=!1){return O(this,F,K)}min(F=null,K=!1){if(F===null){const be=(0,s.min)(this.data)[0];return new i(this.type,[be],[])}const[j,ie,ke]=S((be,Fe)=>Math.min(be,Fe),this,F,K,1/0);return new i(j,ie,ke)}max(F=null,K=!1){if(F===null){const be=(0,s.max)(this.data)[0];return new i(this.type,[be],[])}const[j,ie,ke]=S((be,Fe)=>Math.max(be,Fe),this,F,K,-1/0);return new i(j,ie,ke)}argmin(F=null,K=!1){if(F!==null)throw new Error("`dim !== null` not yet implemented.");const j=(0,s.min)(this.data)[1];return new i("int64",[BigInt(j)],[])}argmax(F=null,K=!1){if(F!==null)throw new Error("`dim !== null` not yet implemented.");const j=(0,s.max)(this.data)[1];return new i("int64",[BigInt(j)],[])}to(F){if(this.type===F)return this;if(!a.hasOwnProperty(F))throw new Error(`Unsupported type: ${F}`);let K;const j=["int64","uint64"].includes(this.type),ie=["int64","uint64"].includes(F);return j&&!ie?K=Number:!j&&ie&&(K=BigInt),new i(F,a[F].from(this.data,K),this.dims)}}function l(B,F){const K=B.length,j=F.reduce((ke,be)=>ke*be);if(K!==j)throw Error(`cannot reshape array of size ${K} into shape (${F})`);let ie=B;for(let ke=F.length-1;ke>=0;ke--)ie=ie.reduce((be,Fe)=>{let Ke=be[be.length-1];return Ke.length<F[ke]?Ke.push(Fe):be.push([Fe]),be},[[]]);return ie[0]}function c(B,F){const[K,j]=(0,s.permute_data)(B.data,B.dims,F);return new i(B.type,K,j)}function p(B,[F,K],j="bilinear",ie=!1){const ke=B.dims.at(-3)??1,be=B.dims.at(-2),Fe=B.dims.at(-1);let Ke=(0,s.interpolate_data)(B.data,[ke,be,Fe],[F,K],j,ie);return new i(B.type,Ke,[ke,F,K])}async function d(B,{size:F=null,mode:K="bilinear"}={}){if(B.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!F)throw new Error("`interpolate_4d` requires a `size` argument.");let j;if(F.length===2)j=[...B.dims.slice(0,2),...F];else if(F.length===3)j=[B.dims[0],...F];else if(F.length===4)j=F;else throw new Error("`size` must be of length 2, 3, or 4.");let ie;if(K==="nearest")ie=await o.TensorOpRegistry.nearest_interpolate_4d;else if(K==="bilinear")ie=await o.TensorOpRegistry.bilinear_interpolate_4d;else if(K==="bicubic")ie=await o.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${K}`);const ke=new i("int64",new BigInt64Array(j.map(BigInt)),[j.length]);return await ie({x:B,s:ke})}async function u(B,F){return await(await o.TensorOpRegistry.matmul)({a:B,b:F})}async function f(B,F){return await(await o.TensorOpRegistry.rfft)({x:B,a:F})}async function _(B,F){const K=await o.TensorOpRegistry.top_k;return F==null?F=B.dims.at(-1):F=Math.min(F,B.dims.at(-1)),await K({x:B,k:new i("int64",[BigInt(F)],[1])})}const v=B=>new i("int64",B,[B.length]);async function I(B,F,K,j,ie){return await(await o.TensorOpRegistry.slice)({x:B,s:v(F),e:v(K),a:v(j),t:v(ie??new Array(j.length).fill(1))})}function M(B,F){const K=B.data,j=F.data,ie=[B.dims[0],B.dims[2]],ke=new K.constructor(ie[0]*ie[1]),[be,Fe,Ke]=B.dims;let ve=0;for(let q=0;q<be;++q){const N=q*Ke*Fe;for(let de=0;de<Ke;++de){let xe=0,$e=0;const ye=q*Fe,fe=N+de;for(let ge=0;ge<Fe;++ge){const Ae=Number(j[ye+ge]);$e+=Ae,xe+=K[fe+ge*Ke]*Ae}const Ee=xe/$e;ke[ve++]=Ee}}return new i(B.type,ke,ie)}function y(B,F,{eps:K=1e-5}={}){if(B.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[j,ie]=B.dims;if(F.length!==1&&F[0]!==ie)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[ke,be]=D(B,1,0,!0),Fe=ke.data,Ke=be.data,ve=B.data,q=new ve.constructor(ve.length);for(let N=0;N<j;++N){const de=N*ie;for(let xe=0;xe<ie;++xe){const $e=de+xe;q[$e]=(ve[$e]-Ke[N])/(Fe[N]+K)}}return new i(B.type,q,B.dims)}function $(B,F){return B=B.slice(),F===null?B=B.filter(K=>K!==1):typeof F=="number"?B[F]===1&&B.splice(F,1):Array.isArray(F)&&(B=B.filter((K,j)=>K!==1||!F.includes(j))),B}function x(B,F){return F=T(F,B.length+1),B=B.slice(),B.splice(F,0,1),B}function T(B,F,K=null,j=!0){if(B<-F||B>=F){if(j)throw new Error(`IndexError: index ${B} is out of bounds for dimension${K===null?"":" "+K} with size ${F}`);return B<-F?0:F}return B<0&&(B=(B%F+F)%F),B}function E(B,F=0){F=T(F,B[0].dims.length);const K=B[0].dims.slice();K[F]=B.reduce((be,Fe)=>be+Fe.dims[F],0);const j=K.reduce((be,Fe)=>be*Fe,1),ie=new B[0].data.constructor(j),ke=B[0].type;if(F===0){let be=0;for(const Fe of B){const Ke=Fe.data;ie.set(Ke,be),be+=Ke.length}}else{let be=0;for(let Fe=0;Fe<B.length;++Fe){const{data:Ke,dims:ve}=B[Fe];for(let q=0;q<Ke.length;++q){let N=0;for(let de=ve.length-1,xe=q,$e=1;de>=0;--de){const ye=ve[de];let fe=xe%ye;de===F&&(fe+=be),N+=fe*$e,$e*=K[de],xe=Math.floor(xe/ye)}ie[N]=Ke[q]}be+=ve[F]}}return new i(ke,ie,K)}function b(B,F=0){return E(B.map(K=>K.unsqueeze(F)),F)}function S(B,F,K=null,j=!1,ie=null){const ke=F.data,be=F.dims;K=T(K,be.length);const Fe=be.slice();Fe[K]=1;const Ke=new ke.constructor(ke.length/be[K]);ie!==null&&Ke.fill(ie);for(let ve=0;ve<ke.length;++ve){let q=0;for(let N=be.length-1,de=ve,xe=1;N>=0;--N){const $e=be[N];if(N!==K){const ye=de%$e;q+=ye*xe,xe*=Fe[N]}de=Math.floor(de/$e)}Ke[q]=B(Ke[q],ke[ve],ve,q)}return j||Fe.splice(K,1),[F.type,Ke,Fe]}function D(B,F=null,K=1,j=!1){const ie=B.data,ke=B.dims;if(F===null){const xe=ie.reduce((Ee,ge)=>Ee+ge,0)/ie.length,$e=Math.sqrt(ie.reduce((Ee,ge)=>Ee+(ge-xe)**2,0)/(ie.length-K)),ye=new i(B.type,[xe],[]);return[new i(B.type,[$e],[]),ye]}F=T(F,ke.length);const be=O(B,F,j),Fe=be.data,[Ke,ve,q]=S((de,xe,$e,ye)=>de+(xe-Fe[ye])**2,B,F,j);for(let de=0;de<ve.length;++de)ve[de]=Math.sqrt(ve[de]/(ke[F]-K));return[new i(Ke,ve,q),be]}function O(B,F=null,K=!1){const j=B.dims,ie=B.data;if(F===null){const Ke=ie.reduce((ve,q)=>ve+q,0);return new i(B.type,[Ke/ie.length],[])}F=T(F,j.length);const[ke,be,Fe]=S((Ke,ve)=>Ke+ve,B,F,K);if(j[F]!==1)for(let Ke=0;Ke<be.length;++Ke)be[Ke]/=j[F];return new i(ke,be,Fe)}function H(B){const F=new Array(B.length);for(let K=B.length-1,j=1;K>=0;--K)F[K]=j,j*=B[K];return F}function G(B,F,K,j){const ie=B.reduce((ke,be)=>ke*be,1);return new i(K,new j(ie).fill(F),B)}function z(B,F){let K,j;if(typeof F=="number")K="float32",j=Float32Array;else if(typeof F=="bigint")K="int64",j=BigInt64Array;else if(typeof F=="boolean")K="bool",j=Uint8Array;else throw new Error(`Unsupported data type: ${typeof F}`);return G(B,F,K,j)}function Z(B,F){return z(B.dims,F)}function Q(B){return G(B,1n,"int64",BigInt64Array)}function Y(B){return Q(B.dims)}function re(B){return G(B,0n,"int64",BigInt64Array)}function te(B){return re(B.dims)}function le(B){const F=B.reduce((K,j)=>K*j,1);return new i("float32",Float32Array.from({length:F},()=>Math.random()),B)}function ue(B,F){if(B.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(B.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(F))throw new Error("The precision must be either 'binary' or 'ubinary'");const K=F==="binary",j=K?"int8":"uint8",ie=K?Int8Array:Uint8Array,ke=B.data,be=new ie(ke.length/8);for(let Fe=0;Fe<ke.length;++Fe){const Ke=ke[Fe]>0?1:0,ve=Math.floor(Fe/8),q=Fe%8;be[ve]|=Ke<<7-q,K&&q===0&&(be[ve]-=128)}return new i(j,be,[B.dims[0],B.dims[1]/8])}}),"./src/utils/video.js":((e,r,t)=>{t.r(r),t.d(r,{RawVideo:()=>a,RawVideoFrame:()=>o,load_video:()=>i});var s=t("./src/utils/image.js"),n=t("./src/env.js");class o{constructor(c,p){this.image=c,this.timestamp=p}}class a{constructor(c,p){c.length>0&&c[0]instanceof s.RawImage&&(c=c.map((d,u)=>new o(d,(u+1)/(c.length+1)*p))),this.frames=c,this.duration=p}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function i(l,{num_frames:c=null,fps:p=null}={}){if(!n.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(c==null&&p==null)throw new Error("Either num_frames or fps must be provided.");const d=[],u=document.createElement("video");if(u.crossOrigin="anonymous",u.muted=!0,typeof l=="string")u.src=l;else if(l instanceof Blob)u.src=URL.createObjectURL(l);else if(l instanceof HTMLVideoElement)u.src=l.src;else throw new Error("Invalid URL or video element provided.");if(await new Promise($=>u.onloadedmetadata=$),u.seekable.start(0)===u.seekable.end(0)){const x=await(await fetch(u.src)).blob();u.src=URL.createObjectURL(x),await new Promise(T=>u.onloadedmetadata=T)}const f=u.duration;let _,v;c!=null?(_=c,v=c===1?0:f/(c-1)):(v=1/p,_=Math.floor(f/v));let I=[];for(let $=0;$<_;++$)I.push(c===1?f/2:$*v);const M=document.createElement("canvas");M.width=u.videoWidth,M.height=u.videoHeight;const y=M.getContext("2d",{willReadFrequently:!0});for(const $ of I){u.currentTime=$,await new Promise(b=>{u.onseeked=b}),y.drawImage(u,0,0,M.width,M.height);const x=y.getImageData(0,0,M.width,M.height),T=new s.RawImage(x.data,M.width,M.height,4),E=new o(T,$);d.push(E)}return u.remove(),new a(d,f)}})},tM={};function zt(e){var r=tM[e];if(r!==void 0)return r.exports;var t=tM[e]={exports:{}};return TT[e](t,t.exports,zt),t.exports}(()=>{var e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,r;zt.t=function(t,s){if(s&1&&(t=this(t)),s&8||typeof t=="object"&&t&&(s&4&&t.__esModule||s&16&&typeof t.then=="function"))return t;var n=Object.create(null);zt.r(n);var o={};r=r||[null,e({}),e([]),e(e)];for(var a=s&2&&t;typeof a=="object"&&!~r.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach(i=>o[i]=()=>t[i]);return o.default=()=>t,zt.d(n,o),n}})();zt.d=(e,r)=>{for(var t in r)zt.o(r,t)&&!zt.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})};zt.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r);zt.r=e=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var h={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/zt.r(h),zt.d(h,{ASTFeatureExtractor:()=>d.ASTFeatureExtractor,ASTForAudioClassification:()=>t.ASTForAudioClassification,ASTModel:()=>t.ASTModel,ASTPreTrainedModel:()=>t.ASTPreTrainedModel,AlbertForMaskedLM:()=>t.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>t.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>t.AlbertForSequenceClassification,AlbertModel:()=>t.AlbertModel,AlbertPreTrainedModel:()=>t.AlbertPreTrainedModel,AlbertTokenizer:()=>s.AlbertTokenizer,ArceeForCausalLM:()=>t.ArceeForCausalLM,ArceeModel:()=>t.ArceeModel,ArceePreTrainedModel:()=>t.ArceePreTrainedModel,AudioClassificationPipeline:()=>r.AudioClassificationPipeline,AutoConfig:()=>n.AutoConfig,AutoFeatureExtractor:()=>u.AutoFeatureExtractor,AutoImageProcessor:()=>v.AutoImageProcessor,AutoModel:()=>t.AutoModel,AutoModelForAudioClassification:()=>t.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>t.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>t.AutoModelForAudioTextToText,AutoModelForCTC:()=>t.AutoModelForCTC,AutoModelForCausalLM:()=>t.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>t.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>t.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>t.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>t.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>t.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>t.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>t.AutoModelForImageTextToText,AutoModelForImageToImage:()=>t.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>t.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>t.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>t.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>t.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>t.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>t.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>t.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>t.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>t.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>t.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>t.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>t.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>t.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>t.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>t.AutoModelForVision2Seq,AutoModelForXVector:()=>t.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>t.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>y.AutoProcessor,AutoTokenizer:()=>s.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>r.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>r.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>t.BartForConditionalGeneration,BartForSequenceClassification:()=>t.BartForSequenceClassification,BartModel:()=>t.BartModel,BartPretrainedModel:()=>t.BartPretrainedModel,BartTokenizer:()=>s.BartTokenizer,BaseModelOutput:()=>t.BaseModelOutput,BaseStreamer:()=>$.BaseStreamer,BeitFeatureExtractor:()=>_.BeitFeatureExtractor,BeitForImageClassification:()=>t.BeitForImageClassification,BeitModel:()=>t.BeitModel,BeitPreTrainedModel:()=>t.BeitPreTrainedModel,BertForMaskedLM:()=>t.BertForMaskedLM,BertForQuestionAnswering:()=>t.BertForQuestionAnswering,BertForSequenceClassification:()=>t.BertForSequenceClassification,BertForTokenClassification:()=>t.BertForTokenClassification,BertModel:()=>t.BertModel,BertPreTrainedModel:()=>t.BertPreTrainedModel,BertTokenizer:()=>s.BertTokenizer,BitImageProcessor:()=>_.BitImageProcessor,BlenderbotForConditionalGeneration:()=>t.BlenderbotForConditionalGeneration,BlenderbotModel:()=>t.BlenderbotModel,BlenderbotPreTrainedModel:()=>t.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>t.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>t.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>t.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>s.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>s.BlenderbotTokenizer,BloomForCausalLM:()=>t.BloomForCausalLM,BloomModel:()=>t.BloomModel,BloomPreTrainedModel:()=>t.BloomPreTrainedModel,BloomTokenizer:()=>s.BloomTokenizer,CLIPFeatureExtractor:()=>_.CLIPFeatureExtractor,CLIPImageProcessor:()=>_.CLIPImageProcessor,CLIPModel:()=>t.CLIPModel,CLIPPreTrainedModel:()=>t.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>t.CLIPSegForImageSegmentation,CLIPSegModel:()=>t.CLIPSegModel,CLIPSegPreTrainedModel:()=>t.CLIPSegPreTrainedModel,CLIPTextModel:()=>t.CLIPTextModel,CLIPTextModelWithProjection:()=>t.CLIPTextModelWithProjection,CLIPTokenizer:()=>s.CLIPTokenizer,CLIPVisionModel:()=>t.CLIPVisionModel,CLIPVisionModelWithProjection:()=>t.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>t.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>t.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>t.CamembertForSequenceClassification,CamembertForTokenClassification:()=>t.CamembertForTokenClassification,CamembertModel:()=>t.CamembertModel,CamembertPreTrainedModel:()=>t.CamembertPreTrainedModel,CamembertTokenizer:()=>s.CamembertTokenizer,CausalLMOutput:()=>t.CausalLMOutput,CausalLMOutputWithPast:()=>t.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>_.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>t.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>t.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>t.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>d.ClapFeatureExtractor,ClapModel:()=>t.ClapModel,ClapPreTrainedModel:()=>t.ClapPreTrainedModel,ClapTextModelWithProjection:()=>t.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>T.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>t.CodeGenForCausalLM,CodeGenModel:()=>t.CodeGenModel,CodeGenPreTrainedModel:()=>t.CodeGenPreTrainedModel,CodeGenTokenizer:()=>s.CodeGenTokenizer,CodeLlamaTokenizer:()=>s.CodeLlamaTokenizer,CohereForCausalLM:()=>t.CohereForCausalLM,CohereModel:()=>t.CohereModel,CoherePreTrainedModel:()=>t.CoherePreTrainedModel,CohereTokenizer:()=>s.CohereTokenizer,ConvBertForMaskedLM:()=>t.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>t.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>t.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>t.ConvBertForTokenClassification,ConvBertModel:()=>t.ConvBertModel,ConvBertPreTrainedModel:()=>t.ConvBertPreTrainedModel,ConvBertTokenizer:()=>s.ConvBertTokenizer,ConvNextFeatureExtractor:()=>_.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>t.ConvNextForImageClassification,ConvNextImageProcessor:()=>_.ConvNextImageProcessor,ConvNextModel:()=>t.ConvNextModel,ConvNextPreTrainedModel:()=>t.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>t.ConvNextV2ForImageClassification,ConvNextV2Model:()=>t.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>t.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>t.DFineForObjectDetection,DFineModel:()=>t.DFineModel,DFinePreTrainedModel:()=>t.DFinePreTrainedModel,DINOv3ConvNextModel:()=>t.DINOv3ConvNextModel,DINOv3ConvNextPreTrainedModel:()=>t.DINOv3ConvNextPreTrainedModel,DINOv3ViTImageProcessor:()=>_.DINOv3ViTImageProcessor,DINOv3ViTModel:()=>t.DINOv3ViTModel,DINOv3ViTPreTrainedModel:()=>t.DINOv3ViTPreTrainedModel,DPTFeatureExtractor:()=>_.DPTFeatureExtractor,DPTForDepthEstimation:()=>t.DPTForDepthEstimation,DPTImageProcessor:()=>_.DPTImageProcessor,DPTModel:()=>t.DPTModel,DPTPreTrainedModel:()=>t.DPTPreTrainedModel,DacDecoderModel:()=>t.DacDecoderModel,DacDecoderOutput:()=>t.DacDecoderOutput,DacEncoderModel:()=>t.DacEncoderModel,DacEncoderOutput:()=>t.DacEncoderOutput,DacFeatureExtractor:()=>d.DacFeatureExtractor,DacModel:()=>t.DacModel,DacPreTrainedModel:()=>t.DacPreTrainedModel,DataTypeMap:()=>l.DataTypeMap,DebertaForMaskedLM:()=>t.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>t.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>t.DebertaForSequenceClassification,DebertaForTokenClassification:()=>t.DebertaForTokenClassification,DebertaModel:()=>t.DebertaModel,DebertaPreTrainedModel:()=>t.DebertaPreTrainedModel,DebertaTokenizer:()=>s.DebertaTokenizer,DebertaV2ForMaskedLM:()=>t.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>t.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>t.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>t.DebertaV2ForTokenClassification,DebertaV2Model:()=>t.DebertaV2Model,DebertaV2PreTrainedModel:()=>t.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>s.DebertaV2Tokenizer,DecisionTransformerModel:()=>t.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>t.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>_.DeiTFeatureExtractor,DeiTForImageClassification:()=>t.DeiTForImageClassification,DeiTImageProcessor:()=>_.DeiTImageProcessor,DeiTModel:()=>t.DeiTModel,DeiTPreTrainedModel:()=>t.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>t.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>t.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>r.DepthEstimationPipeline,DepthProForDepthEstimation:()=>t.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>t.DepthProPreTrainedModel,DetrFeatureExtractor:()=>_.DetrFeatureExtractor,DetrForObjectDetection:()=>t.DetrForObjectDetection,DetrForSegmentation:()=>t.DetrForSegmentation,DetrImageProcessor:()=>_.DetrImageProcessor,DetrModel:()=>t.DetrModel,DetrObjectDetectionOutput:()=>t.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>t.DetrPreTrainedModel,DetrSegmentationOutput:()=>t.DetrSegmentationOutput,Dinov2ForImageClassification:()=>t.Dinov2ForImageClassification,Dinov2Model:()=>t.Dinov2Model,Dinov2PreTrainedModel:()=>t.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>t.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>t.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>t.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>t.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>t.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>t.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>t.DistilBertForTokenClassification,DistilBertModel:()=>t.DistilBertModel,DistilBertPreTrainedModel:()=>t.DistilBertPreTrainedModel,DistilBertTokenizer:()=>s.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>r.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>_.DonutFeatureExtractor,DonutImageProcessor:()=>_.DonutImageProcessor,DonutSwinModel:()=>t.DonutSwinModel,DonutSwinPreTrainedModel:()=>t.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>t.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>_.EfficientNetImageProcessor,EfficientNetModel:()=>t.EfficientNetModel,EfficientNetPreTrainedModel:()=>t.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>t.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>t.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>t.ElectraForSequenceClassification,ElectraForTokenClassification:()=>t.ElectraForTokenClassification,ElectraModel:()=>t.ElectraModel,ElectraPreTrainedModel:()=>t.ElectraPreTrainedModel,ElectraTokenizer:()=>s.ElectraTokenizer,EncodecFeatureExtractor:()=>d.EncodecFeatureExtractor,EosTokenCriteria:()=>x.EosTokenCriteria,Ernie4_5_ForCausalLM:()=>t.Ernie4_5_ForCausalLM,Ernie4_5_Model:()=>t.Ernie4_5_Model,Ernie4_5_PretrainedModel:()=>t.Ernie4_5_PretrainedModel,Ernie4_5_Tokenizer:()=>s.Ernie4_5_Tokenizer,EsmForMaskedLM:()=>t.EsmForMaskedLM,EsmForSequenceClassification:()=>t.EsmForSequenceClassification,EsmForTokenClassification:()=>t.EsmForTokenClassification,EsmModel:()=>t.EsmModel,EsmPreTrainedModel:()=>t.EsmPreTrainedModel,EsmTokenizer:()=>s.EsmTokenizer,ExaoneForCausalLM:()=>t.ExaoneForCausalLM,ExaoneModel:()=>t.ExaoneModel,ExaonePreTrainedModel:()=>t.ExaonePreTrainedModel,FFT:()=>c.FFT,FalconForCausalLM:()=>t.FalconForCausalLM,FalconModel:()=>t.FalconModel,FalconPreTrainedModel:()=>t.FalconPreTrainedModel,FalconTokenizer:()=>s.FalconTokenizer,FastViTForImageClassification:()=>t.FastViTForImageClassification,FastViTModel:()=>t.FastViTModel,FastViTPreTrainedModel:()=>t.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>r.FeatureExtractionPipeline,FeatureExtractor:()=>p.FeatureExtractor,FillMaskPipeline:()=>r.FillMaskPipeline,Florence2ForConditionalGeneration:()=>t.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>t.Florence2PreTrainedModel,Florence2Processor:()=>M.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>T.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>T.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>_.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>t.GLPNForDepthEstimation,GLPNModel:()=>t.GLPNModel,GLPNPreTrainedModel:()=>t.GLPNPreTrainedModel,GPT2LMHeadModel:()=>t.GPT2LMHeadModel,GPT2Model:()=>t.GPT2Model,GPT2PreTrainedModel:()=>t.GPT2PreTrainedModel,GPT2Tokenizer:()=>s.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>t.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>t.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>t.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>t.GPTJForCausalLM,GPTJModel:()=>t.GPTJModel,GPTJPreTrainedModel:()=>t.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>t.GPTNeoForCausalLM,GPTNeoModel:()=>t.GPTNeoModel,GPTNeoPreTrainedModel:()=>t.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>t.GPTNeoXForCausalLM,GPTNeoXModel:()=>t.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>t.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>s.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>t.Gemma2ForCausalLM,Gemma2Model:()=>t.Gemma2Model,Gemma2PreTrainedModel:()=>t.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>t.Gemma3ForCausalLM,Gemma3Model:()=>t.Gemma3Model,Gemma3PreTrainedModel:()=>t.Gemma3PreTrainedModel,Gemma3nAudioFeatureExtractor:()=>d.Gemma3nAudioFeatureExtractor,Gemma3nForConditionalGeneration:()=>t.Gemma3nForConditionalGeneration,Gemma3nPreTrainedModel:()=>t.Gemma3nPreTrainedModel,Gemma3nProcessor:()=>M.Gemma3nProcessor,GemmaForCausalLM:()=>t.GemmaForCausalLM,GemmaModel:()=>t.GemmaModel,GemmaPreTrainedModel:()=>t.GemmaPreTrainedModel,GemmaTokenizer:()=>s.GemmaTokenizer,GlmForCausalLM:()=>t.GlmForCausalLM,GlmModel:()=>t.GlmModel,GlmPreTrainedModel:()=>t.GlmPreTrainedModel,GraniteForCausalLM:()=>t.GraniteForCausalLM,GraniteModel:()=>t.GraniteModel,GranitePreTrainedModel:()=>t.GranitePreTrainedModel,Grok1Tokenizer:()=>s.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>t.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>_.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>t.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>M.GroundingDinoProcessor,GroupViTModel:()=>t.GroupViTModel,GroupViTPreTrainedModel:()=>t.GroupViTPreTrainedModel,HeliumForCausalLM:()=>t.HeliumForCausalLM,HeliumModel:()=>t.HeliumModel,HeliumPreTrainedModel:()=>t.HeliumPreTrainedModel,HerbertTokenizer:()=>s.HerbertTokenizer,HieraForImageClassification:()=>t.HieraForImageClassification,HieraModel:()=>t.HieraModel,HieraPreTrainedModel:()=>t.HieraPreTrainedModel,HubertForCTC:()=>t.HubertForCTC,HubertForSequenceClassification:()=>t.HubertForSequenceClassification,HubertModel:()=>t.HubertModel,HubertPreTrainedModel:()=>t.HubertPreTrainedModel,IJepaForImageClassification:()=>t.IJepaForImageClassification,IJepaModel:()=>t.IJepaModel,IJepaPreTrainedModel:()=>t.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>t.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>_.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>t.Idefics3PreTrainedModel,Idefics3Processor:()=>M.Idefics3Processor,ImageClassificationPipeline:()=>r.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>r.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>d.ImageFeatureExtractor,ImageMattingOutput:()=>t.ImageMattingOutput,ImageProcessor:()=>f.ImageProcessor,ImageSegmentationPipeline:()=>r.ImageSegmentationPipeline,ImageToImagePipeline:()=>r.ImageToImagePipeline,ImageToTextPipeline:()=>r.ImageToTextPipeline,InterruptableStoppingCriteria:()=>x.InterruptableStoppingCriteria,JAISLMHeadModel:()=>t.JAISLMHeadModel,JAISModel:()=>t.JAISModel,JAISPreTrainedModel:()=>t.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>_.JinaCLIPImageProcessor,JinaCLIPModel:()=>t.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>t.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>M.JinaCLIPProcessor,JinaCLIPTextModel:()=>t.JinaCLIPTextModel,JinaCLIPVisionModel:()=>t.JinaCLIPVisionModel,Lfm2ForCausalLM:()=>t.Lfm2ForCausalLM,Lfm2Model:()=>t.Lfm2Model,Lfm2PreTrainedModel:()=>t.Lfm2PreTrainedModel,LiteWhisperForConditionalGeneration:()=>t.LiteWhisperForConditionalGeneration,Llama4ForCausalLM:()=>t.Llama4ForCausalLM,Llama4PreTrainedModel:()=>t.Llama4PreTrainedModel,LlamaForCausalLM:()=>t.LlamaForCausalLM,LlamaModel:()=>t.LlamaModel,LlamaPreTrainedModel:()=>t.LlamaPreTrainedModel,LlamaTokenizer:()=>s.LlamaTokenizer,LlavaForConditionalGeneration:()=>t.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>t.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>_.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>t.LlavaPreTrainedModel,LlavaProcessor:()=>M.LlavaProcessor,LlavaQwen2ForCausalLM:()=>t.LlavaQwen2ForCausalLM,LogitsProcessor:()=>T.LogitsProcessor,LogitsProcessorList:()=>T.LogitsProcessorList,LogitsWarper:()=>T.LogitsWarper,LongT5ForConditionalGeneration:()=>t.LongT5ForConditionalGeneration,LongT5Model:()=>t.LongT5Model,LongT5PreTrainedModel:()=>t.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>t.M2M100ForConditionalGeneration,M2M100Model:()=>t.M2M100Model,M2M100PreTrainedModel:()=>t.M2M100PreTrainedModel,M2M100Tokenizer:()=>s.M2M100Tokenizer,MBart50Tokenizer:()=>s.MBart50Tokenizer,MBartForCausalLM:()=>t.MBartForCausalLM,MBartForConditionalGeneration:()=>t.MBartForConditionalGeneration,MBartForSequenceClassification:()=>t.MBartForSequenceClassification,MBartModel:()=>t.MBartModel,MBartPreTrainedModel:()=>t.MBartPreTrainedModel,MBartTokenizer:()=>s.MBartTokenizer,MPNetForMaskedLM:()=>t.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>t.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>t.MPNetForSequenceClassification,MPNetForTokenClassification:()=>t.MPNetForTokenClassification,MPNetModel:()=>t.MPNetModel,MPNetPreTrainedModel:()=>t.MPNetPreTrainedModel,MPNetTokenizer:()=>s.MPNetTokenizer,MT5ForConditionalGeneration:()=>t.MT5ForConditionalGeneration,MT5Model:()=>t.MT5Model,MT5PreTrainedModel:()=>t.MT5PreTrainedModel,MarianMTModel:()=>t.MarianMTModel,MarianModel:()=>t.MarianModel,MarianPreTrainedModel:()=>t.MarianPreTrainedModel,MarianTokenizer:()=>s.MarianTokenizer,Mask2FormerImageProcessor:()=>_.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>_.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>t.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>_.MaskFormerImageProcessor,MaskFormerModel:()=>t.MaskFormerModel,MaskFormerPreTrainedModel:()=>t.MaskFormerPreTrainedModel,MaskedLMOutput:()=>t.MaskedLMOutput,MaxLengthCriteria:()=>x.MaxLengthCriteria,Metric3DForDepthEstimation:()=>t.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>t.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>t.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>t.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>t.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>t.MgpstrModelOutput,MgpstrPreTrainedModel:()=>t.MgpstrPreTrainedModel,MgpstrProcessor:()=>M.MgpstrProcessor,MgpstrTokenizer:()=>s.MgpstrTokenizer,MimiDecoderModel:()=>t.MimiDecoderModel,MimiDecoderOutput:()=>t.MimiDecoderOutput,MimiEncoderModel:()=>t.MimiEncoderModel,MimiEncoderOutput:()=>t.MimiEncoderOutput,MimiModel:()=>t.MimiModel,MimiPreTrainedModel:()=>t.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>T.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>T.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>t.MistralForCausalLM,MistralModel:()=>t.MistralModel,MistralPreTrainedModel:()=>t.MistralPreTrainedModel,MobileBertForMaskedLM:()=>t.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>t.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>t.MobileBertForSequenceClassification,MobileBertModel:()=>t.MobileBertModel,MobileBertPreTrainedModel:()=>t.MobileBertPreTrainedModel,MobileBertTokenizer:()=>s.MobileBertTokenizer,MobileLLMForCausalLM:()=>t.MobileLLMForCausalLM,MobileLLMModel:()=>t.MobileLLMModel,MobileLLMPreTrainedModel:()=>t.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>_.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>t.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>t.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>_.MobileNetV1ImageProcessor,MobileNetV1Model:()=>t.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>t.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>_.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>t.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>t.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>_.MobileNetV2ImageProcessor,MobileNetV2Model:()=>t.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>t.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>_.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>t.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>t.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>_.MobileNetV3ImageProcessor,MobileNetV3Model:()=>t.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>t.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>_.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>t.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>t.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>_.MobileNetV4ImageProcessor,MobileNetV4Model:()=>t.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>t.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>_.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>t.MobileViTForImageClassification,MobileViTImageProcessor:()=>_.MobileViTImageProcessor,MobileViTModel:()=>t.MobileViTModel,MobileViTPreTrainedModel:()=>t.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>t.MobileViTV2ForImageClassification,MobileViTV2Model:()=>t.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>t.MobileViTV2PreTrainedModel,ModelOutput:()=>t.ModelOutput,ModernBertDecoderForCausalLM:()=>t.ModernBertDecoderForCausalLM,ModernBertDecoderModel:()=>t.ModernBertDecoderModel,ModernBertDecoderPreTrainedModel:()=>t.ModernBertDecoderPreTrainedModel,ModernBertForMaskedLM:()=>t.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>t.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>t.ModernBertForTokenClassification,ModernBertModel:()=>t.ModernBertModel,ModernBertPreTrainedModel:()=>t.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>t.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>d.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>t.MoonshineForConditionalGeneration,MoonshineModel:()=>t.MoonshineModel,MoonshinePreTrainedModel:()=>t.MoonshinePreTrainedModel,MoonshineProcessor:()=>M.MoonshineProcessor,MptForCausalLM:()=>t.MptForCausalLM,MptModel:()=>t.MptModel,MptPreTrainedModel:()=>t.MptPreTrainedModel,MultiModalityCausalLM:()=>t.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>t.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>t.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>t.MusicgenForConditionalGeneration,MusicgenModel:()=>t.MusicgenModel,MusicgenPreTrainedModel:()=>t.MusicgenPreTrainedModel,NeoBertForMaskedLM:()=>t.NeoBertForMaskedLM,NeoBertForQuestionAnswering:()=>t.NeoBertForQuestionAnswering,NeoBertForSequenceClassification:()=>t.NeoBertForSequenceClassification,NeoBertForTokenClassification:()=>t.NeoBertForTokenClassification,NeoBertModel:()=>t.NeoBertModel,NeoBertPreTrainedModel:()=>t.NeoBertPreTrainedModel,NllbTokenizer:()=>s.NllbTokenizer,NoBadWordsLogitsProcessor:()=>T.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>T.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>t.NomicBertModel,NomicBertPreTrainedModel:()=>t.NomicBertPreTrainedModel,NougatImageProcessor:()=>_.NougatImageProcessor,NougatTokenizer:()=>s.NougatTokenizer,OPTForCausalLM:()=>t.OPTForCausalLM,OPTModel:()=>t.OPTModel,OPTPreTrainedModel:()=>t.OPTPreTrainedModel,ObjectDetectionPipeline:()=>r.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>t.Olmo2ForCausalLM,Olmo2Model:()=>t.Olmo2Model,Olmo2PreTrainedModel:()=>t.Olmo2PreTrainedModel,OlmoForCausalLM:()=>t.OlmoForCausalLM,OlmoModel:()=>t.OlmoModel,OlmoPreTrainedModel:()=>t.OlmoPreTrainedModel,OpenELMForCausalLM:()=>t.OpenELMForCausalLM,OpenELMModel:()=>t.OpenELMModel,OpenELMPreTrainedModel:()=>t.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>_.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>t.OwlViTForObjectDetection,OwlViTImageProcessor:()=>_.OwlViTImageProcessor,OwlViTModel:()=>t.OwlViTModel,OwlViTPreTrainedModel:()=>t.OwlViTPreTrainedModel,OwlViTProcessor:()=>M.OwlViTProcessor,Owlv2ForObjectDetection:()=>t.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>_.Owlv2ImageProcessor,Owlv2Model:()=>t.Owlv2Model,Owlv2PreTrainedModel:()=>t.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>t.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>t.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>M.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>t.PatchTSMixerForPrediction,PatchTSMixerModel:()=>t.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>t.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>t.PatchTSTForPrediction,PatchTSTModel:()=>t.PatchTSTModel,PatchTSTPreTrainedModel:()=>t.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>t.Phi3ForCausalLM,Phi3Model:()=>t.Phi3Model,Phi3PreTrainedModel:()=>t.Phi3PreTrainedModel,Phi3VForCausalLM:()=>t.Phi3VForCausalLM,Phi3VImageProcessor:()=>_.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>t.Phi3VPreTrainedModel,Phi3VProcessor:()=>M.Phi3VProcessor,PhiForCausalLM:()=>t.PhiForCausalLM,PhiModel:()=>t.PhiModel,PhiPreTrainedModel:()=>t.PhiPreTrainedModel,Pipeline:()=>r.Pipeline,PreTrainedModel:()=>t.PreTrainedModel,PreTrainedTokenizer:()=>s.PreTrainedTokenizer,PretrainedConfig:()=>n.PretrainedConfig,PretrainedMixin:()=>t.PretrainedMixin,Processor:()=>I.Processor,PvtForImageClassification:()=>t.PvtForImageClassification,PvtImageProcessor:()=>_.PvtImageProcessor,PvtModel:()=>t.PvtModel,PvtPreTrainedModel:()=>t.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>d.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>t.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>t.PyAnnoteModel,PyAnnotePreTrainedModel:()=>t.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>M.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>t.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>r.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>t.Qwen2ForCausalLM,Qwen2Model:()=>t.Qwen2Model,Qwen2PreTrainedModel:()=>t.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>s.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>t.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>_.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>t.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>M.Qwen2VLProcessor,Qwen3ForCausalLM:()=>t.Qwen3ForCausalLM,Qwen3Model:()=>t.Qwen3Model,Qwen3PreTrainedModel:()=>t.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>t.RFDetrForObjectDetection,RFDetrModel:()=>t.RFDetrModel,RFDetrObjectDetectionOutput:()=>t.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>t.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>t.RTDetrForObjectDetection,RTDetrImageProcessor:()=>_.RTDetrImageProcessor,RTDetrModel:()=>t.RTDetrModel,RTDetrObjectDetectionOutput:()=>t.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>t.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>t.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>t.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>t.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>t.RTDetrV2PreTrainedModel,RawAudio:()=>o.RawAudio,RawImage:()=>a.RawImage,RawVideo:()=>i.RawVideo,RawVideoFrame:()=>i.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>T.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>t.ResNetForImageClassification,ResNetModel:()=>t.ResNetModel,ResNetPreTrainedModel:()=>t.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>t.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>t.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>t.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>t.RoFormerForTokenClassification,RoFormerModel:()=>t.RoFormerModel,RoFormerPreTrainedModel:()=>t.RoFormerPreTrainedModel,RoFormerTokenizer:()=>s.RoFormerTokenizer,RobertaForMaskedLM:()=>t.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>t.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>t.RobertaForSequenceClassification,RobertaForTokenClassification:()=>t.RobertaForTokenClassification,RobertaModel:()=>t.RobertaModel,RobertaPreTrainedModel:()=>t.RobertaPreTrainedModel,RobertaTokenizer:()=>s.RobertaTokenizer,SamImageProcessor:()=>_.SamImageProcessor,SamImageSegmentationOutput:()=>t.SamImageSegmentationOutput,SamModel:()=>t.SamModel,SamPreTrainedModel:()=>t.SamPreTrainedModel,SamProcessor:()=>M.SamProcessor,SapiensForDepthEstimation:()=>t.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>t.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>t.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>t.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>d.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>_.SegformerFeatureExtractor,SegformerForImageClassification:()=>t.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>t.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>_.SegformerImageProcessor,SegformerModel:()=>t.SegformerModel,SegformerPreTrainedModel:()=>t.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>t.Seq2SeqLMOutput,SequenceClassifierOutput:()=>t.SequenceClassifierOutput,SiglipImageProcessor:()=>_.SiglipImageProcessor,SiglipModel:()=>t.SiglipModel,SiglipPreTrainedModel:()=>t.SiglipPreTrainedModel,SiglipTextModel:()=>t.SiglipTextModel,SiglipTokenizer:()=>s.SiglipTokenizer,SiglipVisionModel:()=>t.SiglipVisionModel,SmolLM3ForCausalLM:()=>t.SmolLM3ForCausalLM,SmolLM3Model:()=>t.SmolLM3Model,SmolLM3PreTrainedModel:()=>t.SmolLM3PreTrainedModel,SmolVLMForConditionalGeneration:()=>t.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>_.SmolVLMImageProcessor,SmolVLMProcessor:()=>M.SmolVLMProcessor,SnacDecoderModel:()=>t.SnacDecoderModel,SnacEncoderModel:()=>t.SnacEncoderModel,SnacFeatureExtractor:()=>d.SnacFeatureExtractor,SnacModel:()=>t.SnacModel,SnacPreTrainedModel:()=>t.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>d.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>t.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>t.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>t.SpeechT5HifiGan,SpeechT5Model:()=>t.SpeechT5Model,SpeechT5PreTrainedModel:()=>t.SpeechT5PreTrainedModel,SpeechT5Processor:()=>M.SpeechT5Processor,SpeechT5Tokenizer:()=>s.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>t.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>t.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>t.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>t.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>t.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>s.SqueezeBertTokenizer,StableLmForCausalLM:()=>t.StableLmForCausalLM,StableLmModel:()=>t.StableLmModel,StableLmPreTrainedModel:()=>t.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>t.Starcoder2ForCausalLM,Starcoder2Model:()=>t.Starcoder2Model,Starcoder2PreTrainedModel:()=>t.Starcoder2PreTrainedModel,StoppingCriteria:()=>x.StoppingCriteria,StoppingCriteriaList:()=>x.StoppingCriteriaList,StyleTextToSpeech2Model:()=>t.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>t.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>r.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>T.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>t.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>_.Swin2SRImageProcessor,Swin2SRModel:()=>t.Swin2SRModel,Swin2SRPreTrainedModel:()=>t.Swin2SRPreTrainedModel,SwinForImageClassification:()=>t.SwinForImageClassification,SwinForSemanticSegmentation:()=>t.SwinForSemanticSegmentation,SwinModel:()=>t.SwinModel,SwinPreTrainedModel:()=>t.SwinPreTrainedModel,T5ForConditionalGeneration:()=>t.T5ForConditionalGeneration,T5Model:()=>t.T5Model,T5PreTrainedModel:()=>t.T5PreTrainedModel,T5Tokenizer:()=>s.T5Tokenizer,TableTransformerForObjectDetection:()=>t.TableTransformerForObjectDetection,TableTransformerModel:()=>t.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>t.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>t.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>T.TemperatureLogitsWarper,Tensor:()=>l.Tensor,Text2TextGenerationPipeline:()=>r.Text2TextGenerationPipeline,TextClassificationPipeline:()=>r.TextClassificationPipeline,TextGenerationPipeline:()=>r.TextGenerationPipeline,TextStreamer:()=>$.TextStreamer,TextToAudioPipeline:()=>r.TextToAudioPipeline,TokenClassificationPipeline:()=>r.TokenClassificationPipeline,TokenClassifierOutput:()=>t.TokenClassifierOutput,TokenizerModel:()=>s.TokenizerModel,TopKLogitsWarper:()=>T.TopKLogitsWarper,TopPLogitsWarper:()=>T.TopPLogitsWarper,TrOCRForCausalLM:()=>t.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>t.TrOCRPreTrainedModel,TranslationPipeline:()=>r.TranslationPipeline,UltravoxModel:()=>t.UltravoxModel,UltravoxPreTrainedModel:()=>t.UltravoxPreTrainedModel,UltravoxProcessor:()=>M.UltravoxProcessor,UniSpeechForCTC:()=>t.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>t.UniSpeechForSequenceClassification,UniSpeechModel:()=>t.UniSpeechModel,UniSpeechPreTrainedModel:()=>t.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>t.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>t.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>t.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>t.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>t.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>M.VLChatProcessor,VLMImageProcessor:()=>_.VLMImageProcessor,VaultGemmaForCausalLM:()=>t.VaultGemmaForCausalLM,VaultGemmaModel:()=>t.VaultGemmaModel,VaultGemmaPreTrainedModel:()=>t.VaultGemmaPreTrainedModel,ViTFeatureExtractor:()=>_.ViTFeatureExtractor,ViTForImageClassification:()=>t.ViTForImageClassification,ViTImageProcessor:()=>_.ViTImageProcessor,ViTMAEModel:()=>t.ViTMAEModel,ViTMAEPreTrainedModel:()=>t.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>t.ViTMSNForImageClassification,ViTMSNModel:()=>t.ViTMSNModel,ViTMSNPreTrainedModel:()=>t.ViTMSNPreTrainedModel,ViTModel:()=>t.ViTModel,ViTPreTrainedModel:()=>t.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>t.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>t.VitMatteForImageMatting,VitMatteImageProcessor:()=>_.VitMatteImageProcessor,VitMattePreTrainedModel:()=>t.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>t.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>_.VitPoseImageProcessor,VitPosePreTrainedModel:()=>t.VitPosePreTrainedModel,VitsModel:()=>t.VitsModel,VitsModelOutput:()=>t.VitsModelOutput,VitsPreTrainedModel:()=>t.VitsPreTrainedModel,VitsTokenizer:()=>s.VitsTokenizer,VoxtralForConditionalGeneration:()=>t.VoxtralForConditionalGeneration,VoxtralProcessor:()=>M.VoxtralProcessor,Wav2Vec2BertForCTC:()=>t.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>t.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>t.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>t.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>s.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>d.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>t.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>t.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>t.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>t.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>t.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>M.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>M.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>t.WavLMForAudioFrameClassification,WavLMForCTC:()=>t.WavLMForCTC,WavLMForSequenceClassification:()=>t.WavLMForSequenceClassification,WavLMForXVector:()=>t.WavLMForXVector,WavLMModel:()=>t.WavLMModel,WavLMPreTrainedModel:()=>t.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>d.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>t.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>t.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>d.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>t.WhisperForConditionalGeneration,WhisperModel:()=>t.WhisperModel,WhisperPreTrainedModel:()=>t.WhisperPreTrainedModel,WhisperProcessor:()=>M.WhisperProcessor,WhisperTextStreamer:()=>$.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>T.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>s.WhisperTokenizer,XLMForQuestionAnswering:()=>t.XLMForQuestionAnswering,XLMForSequenceClassification:()=>t.XLMForSequenceClassification,XLMForTokenClassification:()=>t.XLMForTokenClassification,XLMModel:()=>t.XLMModel,XLMPreTrainedModel:()=>t.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>t.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>t.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>t.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>t.XLMRobertaForTokenClassification,XLMRobertaModel:()=>t.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>t.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>s.XLMRobertaTokenizer,XLMTokenizer:()=>s.XLMTokenizer,XLMWithLMHeadModel:()=>t.XLMWithLMHeadModel,XVectorOutput:()=>t.XVectorOutput,YolosFeatureExtractor:()=>_.YolosFeatureExtractor,YolosForObjectDetection:()=>t.YolosForObjectDetection,YolosImageProcessor:()=>_.YolosImageProcessor,YolosModel:()=>t.YolosModel,YolosObjectDetectionOutput:()=>t.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>t.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>r.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>r.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>r.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>r.ZeroShotObjectDetectionPipeline,bankers_round:()=>c.bankers_round,cat:()=>l.cat,cos_sim:()=>c.cos_sim,dot:()=>c.dot,dynamic_time_warping:()=>c.dynamic_time_warping,env:()=>e.env,full:()=>l.full,full_like:()=>l.full_like,getCacheShapes:()=>n.getCacheShapes,hamming:()=>o.hamming,hanning:()=>o.hanning,interpolate:()=>l.interpolate,interpolate_4d:()=>l.interpolate_4d,interpolate_data:()=>c.interpolate_data,is_chinese_char:()=>s.is_chinese_char,layer_norm:()=>l.layer_norm,load_image:()=>a.load_image,load_video:()=>i.load_video,log_softmax:()=>c.log_softmax,magnitude:()=>c.magnitude,matmul:()=>l.matmul,max:()=>c.max,mean:()=>l.mean,mean_pooling:()=>l.mean_pooling,medianFilter:()=>c.medianFilter,mel_filter_bank:()=>o.mel_filter_bank,min:()=>c.min,ones:()=>l.ones,ones_like:()=>l.ones_like,permute:()=>l.permute,permute_data:()=>c.permute_data,pipeline:()=>r.pipeline,quantize_embeddings:()=>l.quantize_embeddings,rand:()=>l.rand,read_audio:()=>o.read_audio,rfft:()=>l.rfft,round:()=>c.round,slice:()=>l.slice,softmax:()=>c.softmax,spectrogram:()=>o.spectrogram,stack:()=>l.stack,std_mean:()=>l.std_mean,topk:()=>l.topk,window_function:()=>o.window_function,zeros:()=>l.zeros,zeros_like:()=>l.zeros_like});var e=zt("./src/env.js"),r=zt("./src/pipelines.js"),t=zt("./src/models.js"),s=zt("./src/tokenizers.js"),n=zt("./src/configs.js"),o=zt("./src/utils/audio.js"),a=zt("./src/utils/image.js"),i=zt("./src/utils/video.js"),l=zt("./src/utils/tensor.js"),c=zt("./src/utils/maths.js"),p=zt("./src/base/feature_extraction_utils.js"),d=zt("./src/models/feature_extractors.js"),u=zt("./src/models/auto/feature_extraction_auto.js"),f=zt("./src/base/image_processors_utils.js"),_=zt("./src/models/image_processors.js"),v=zt("./src/models/auto/image_processing_auto.js"),I=zt("./src/base/processing_utils.js"),M=zt("./src/models/processors.js"),y=zt("./src/models/auto/processing_auto.js"),$=zt("./src/generation/streamers.js"),x=zt("./src/generation/stopping_criteria.js"),T=zt("./src/generation/logits_process.js")})();h.ASTFeatureExtractor;h.ASTForAudioClassification;h.ASTModel;h.ASTPreTrainedModel;h.AlbertForMaskedLM;h.AlbertForQuestionAnswering;h.AlbertForSequenceClassification;h.AlbertModel;h.AlbertPreTrainedModel;h.AlbertTokenizer;h.ArceeForCausalLM;h.ArceeModel;h.ArceePreTrainedModel;h.AudioClassificationPipeline;h.AutoConfig;h.AutoFeatureExtractor;h.AutoImageProcessor;h.AutoModel;h.AutoModelForAudioClassification;h.AutoModelForAudioFrameClassification;h.AutoModelForAudioTextToText;h.AutoModelForCTC;h.AutoModelForCausalLM;h.AutoModelForDepthEstimation;h.AutoModelForDocumentQuestionAnswering;h.AutoModelForImageClassification;h.AutoModelForImageFeatureExtraction;h.AutoModelForImageMatting;h.AutoModelForImageSegmentation;h.AutoModelForImageTextToText;h.AutoModelForImageToImage;h.AutoModelForMaskGeneration;h.AutoModelForMaskedLM;h.AutoModelForNormalEstimation;h.AutoModelForObjectDetection;h.AutoModelForPoseEstimation;h.AutoModelForQuestionAnswering;h.AutoModelForSemanticSegmentation;h.AutoModelForSeq2SeqLM;h.AutoModelForSequenceClassification;h.AutoModelForSpeechSeq2Seq;h.AutoModelForTextToSpectrogram;h.AutoModelForTextToWaveform;h.AutoModelForTokenClassification;h.AutoModelForUniversalSegmentation;h.AutoModelForVision2Seq;h.AutoModelForXVector;h.AutoModelForZeroShotObjectDetection;h.AutoProcessor;h.AutoTokenizer;h.AutomaticSpeechRecognitionPipeline;h.BackgroundRemovalPipeline;h.BartForConditionalGeneration;h.BartForSequenceClassification;h.BartModel;h.BartPretrainedModel;h.BartTokenizer;h.BaseModelOutput;h.BaseStreamer;h.BeitFeatureExtractor;h.BeitForImageClassification;h.BeitModel;h.BeitPreTrainedModel;h.BertForMaskedLM;h.BertForQuestionAnswering;h.BertForSequenceClassification;h.BertForTokenClassification;h.BertModel;h.BertPreTrainedModel;h.BertTokenizer;h.BitImageProcessor;h.BlenderbotForConditionalGeneration;h.BlenderbotModel;h.BlenderbotPreTrainedModel;h.BlenderbotSmallForConditionalGeneration;h.BlenderbotSmallModel;h.BlenderbotSmallPreTrainedModel;h.BlenderbotSmallTokenizer;h.BlenderbotTokenizer;h.BloomForCausalLM;h.BloomModel;h.BloomPreTrainedModel;h.BloomTokenizer;h.CLIPFeatureExtractor;h.CLIPImageProcessor;h.CLIPModel;h.CLIPPreTrainedModel;h.CLIPSegForImageSegmentation;h.CLIPSegModel;h.CLIPSegPreTrainedModel;h.CLIPTextModel;h.CLIPTextModelWithProjection;h.CLIPTokenizer;h.CLIPVisionModel;h.CLIPVisionModelWithProjection;h.CamembertForMaskedLM;h.CamembertForQuestionAnswering;h.CamembertForSequenceClassification;h.CamembertForTokenClassification;h.CamembertModel;h.CamembertPreTrainedModel;h.CamembertTokenizer;h.CausalLMOutput;h.CausalLMOutputWithPast;h.ChineseCLIPFeatureExtractor;h.ChineseCLIPModel;h.ChineseCLIPPreTrainedModel;h.ClapAudioModelWithProjection;h.ClapFeatureExtractor;h.ClapModel;h.ClapPreTrainedModel;h.ClapTextModelWithProjection;h.ClassifierFreeGuidanceLogitsProcessor;h.CodeGenForCausalLM;h.CodeGenModel;h.CodeGenPreTrainedModel;h.CodeGenTokenizer;h.CodeLlamaTokenizer;h.CohereForCausalLM;h.CohereModel;h.CoherePreTrainedModel;h.CohereTokenizer;h.ConvBertForMaskedLM;h.ConvBertForQuestionAnswering;h.ConvBertForSequenceClassification;h.ConvBertForTokenClassification;h.ConvBertModel;h.ConvBertPreTrainedModel;h.ConvBertTokenizer;h.ConvNextFeatureExtractor;h.ConvNextForImageClassification;h.ConvNextImageProcessor;h.ConvNextModel;h.ConvNextPreTrainedModel;h.ConvNextV2ForImageClassification;h.ConvNextV2Model;h.ConvNextV2PreTrainedModel;h.DFineForObjectDetection;h.DFineModel;h.DFinePreTrainedModel;h.DINOv3ConvNextModel;h.DINOv3ConvNextPreTrainedModel;h.DINOv3ViTImageProcessor;h.DINOv3ViTModel;h.DINOv3ViTPreTrainedModel;h.DPTFeatureExtractor;h.DPTForDepthEstimation;h.DPTImageProcessor;h.DPTModel;h.DPTPreTrainedModel;h.DacDecoderModel;h.DacDecoderOutput;h.DacEncoderModel;h.DacEncoderOutput;h.DacFeatureExtractor;h.DacModel;h.DacPreTrainedModel;h.DataTypeMap;h.DebertaForMaskedLM;h.DebertaForQuestionAnswering;h.DebertaForSequenceClassification;h.DebertaForTokenClassification;h.DebertaModel;h.DebertaPreTrainedModel;h.DebertaTokenizer;h.DebertaV2ForMaskedLM;h.DebertaV2ForQuestionAnswering;h.DebertaV2ForSequenceClassification;h.DebertaV2ForTokenClassification;h.DebertaV2Model;h.DebertaV2PreTrainedModel;h.DebertaV2Tokenizer;h.DecisionTransformerModel;h.DecisionTransformerPreTrainedModel;h.DeiTFeatureExtractor;h.DeiTForImageClassification;h.DeiTImageProcessor;h.DeiTModel;h.DeiTPreTrainedModel;h.DepthAnythingForDepthEstimation;h.DepthAnythingPreTrainedModel;h.DepthEstimationPipeline;h.DepthProForDepthEstimation;h.DepthProPreTrainedModel;h.DetrFeatureExtractor;h.DetrForObjectDetection;h.DetrForSegmentation;h.DetrImageProcessor;h.DetrModel;h.DetrObjectDetectionOutput;h.DetrPreTrainedModel;h.DetrSegmentationOutput;h.Dinov2ForImageClassification;h.Dinov2Model;h.Dinov2PreTrainedModel;h.Dinov2WithRegistersForImageClassification;h.Dinov2WithRegistersModel;h.Dinov2WithRegistersPreTrainedModel;h.DistilBertForMaskedLM;h.DistilBertForQuestionAnswering;h.DistilBertForSequenceClassification;h.DistilBertForTokenClassification;h.DistilBertModel;h.DistilBertPreTrainedModel;h.DistilBertTokenizer;h.DocumentQuestionAnsweringPipeline;h.DonutFeatureExtractor;h.DonutImageProcessor;h.DonutSwinModel;h.DonutSwinPreTrainedModel;h.EfficientNetForImageClassification;h.EfficientNetImageProcessor;h.EfficientNetModel;h.EfficientNetPreTrainedModel;h.ElectraForMaskedLM;h.ElectraForQuestionAnswering;h.ElectraForSequenceClassification;h.ElectraForTokenClassification;h.ElectraModel;h.ElectraPreTrainedModel;h.ElectraTokenizer;h.EncodecFeatureExtractor;h.EosTokenCriteria;h.Ernie4_5_ForCausalLM;h.Ernie4_5_Model;h.Ernie4_5_PretrainedModel;h.Ernie4_5_Tokenizer;h.EsmForMaskedLM;h.EsmForSequenceClassification;h.EsmForTokenClassification;h.EsmModel;h.EsmPreTrainedModel;h.EsmTokenizer;h.ExaoneForCausalLM;h.ExaoneModel;h.ExaonePreTrainedModel;h.FFT;h.FalconForCausalLM;h.FalconModel;h.FalconPreTrainedModel;h.FalconTokenizer;h.FastViTForImageClassification;h.FastViTModel;h.FastViTPreTrainedModel;h.FeatureExtractionPipeline;h.FeatureExtractor;h.FillMaskPipeline;h.Florence2ForConditionalGeneration;h.Florence2PreTrainedModel;h.Florence2Processor;h.ForcedBOSTokenLogitsProcessor;h.ForcedEOSTokenLogitsProcessor;h.GLPNFeatureExtractor;h.GLPNForDepthEstimation;h.GLPNModel;h.GLPNPreTrainedModel;h.GPT2LMHeadModel;h.GPT2Model;h.GPT2PreTrainedModel;h.GPT2Tokenizer;h.GPTBigCodeForCausalLM;h.GPTBigCodeModel;h.GPTBigCodePreTrainedModel;h.GPTJForCausalLM;h.GPTJModel;h.GPTJPreTrainedModel;h.GPTNeoForCausalLM;h.GPTNeoModel;h.GPTNeoPreTrainedModel;h.GPTNeoXForCausalLM;h.GPTNeoXModel;h.GPTNeoXPreTrainedModel;h.GPTNeoXTokenizer;h.Gemma2ForCausalLM;h.Gemma2Model;h.Gemma2PreTrainedModel;h.Gemma3ForCausalLM;h.Gemma3Model;h.Gemma3PreTrainedModel;h.Gemma3nAudioFeatureExtractor;h.Gemma3nForConditionalGeneration;h.Gemma3nPreTrainedModel;h.Gemma3nProcessor;h.GemmaForCausalLM;h.GemmaModel;h.GemmaPreTrainedModel;h.GemmaTokenizer;h.GlmForCausalLM;h.GlmModel;h.GlmPreTrainedModel;h.GraniteForCausalLM;h.GraniteModel;h.GranitePreTrainedModel;h.Grok1Tokenizer;h.GroundingDinoForObjectDetection;h.GroundingDinoImageProcessor;h.GroundingDinoPreTrainedModel;h.GroundingDinoProcessor;h.GroupViTModel;h.GroupViTPreTrainedModel;h.HeliumForCausalLM;h.HeliumModel;h.HeliumPreTrainedModel;h.HerbertTokenizer;h.HieraForImageClassification;h.HieraModel;h.HieraPreTrainedModel;h.HubertForCTC;h.HubertForSequenceClassification;h.HubertModel;h.HubertPreTrainedModel;h.IJepaForImageClassification;h.IJepaModel;h.IJepaPreTrainedModel;h.Idefics3ForConditionalGeneration;h.Idefics3ImageProcessor;h.Idefics3PreTrainedModel;h.Idefics3Processor;h.ImageClassificationPipeline;h.ImageFeatureExtractionPipeline;h.ImageFeatureExtractor;h.ImageMattingOutput;h.ImageProcessor;h.ImageSegmentationPipeline;h.ImageToImagePipeline;h.ImageToTextPipeline;h.InterruptableStoppingCriteria;h.JAISLMHeadModel;h.JAISModel;h.JAISPreTrainedModel;h.JinaCLIPImageProcessor;h.JinaCLIPModel;h.JinaCLIPPreTrainedModel;h.JinaCLIPProcessor;h.JinaCLIPTextModel;h.JinaCLIPVisionModel;h.Lfm2ForCausalLM;h.Lfm2Model;h.Lfm2PreTrainedModel;h.LiteWhisperForConditionalGeneration;h.Llama4ForCausalLM;h.Llama4PreTrainedModel;h.LlamaForCausalLM;h.LlamaModel;h.LlamaPreTrainedModel;h.LlamaTokenizer;h.LlavaForConditionalGeneration;h.LlavaOnevisionForConditionalGeneration;h.LlavaOnevisionImageProcessor;h.LlavaPreTrainedModel;h.LlavaProcessor;h.LlavaQwen2ForCausalLM;h.LogitsProcessor;h.LogitsProcessorList;h.LogitsWarper;h.LongT5ForConditionalGeneration;h.LongT5Model;h.LongT5PreTrainedModel;h.M2M100ForConditionalGeneration;h.M2M100Model;h.M2M100PreTrainedModel;h.M2M100Tokenizer;h.MBart50Tokenizer;h.MBartForCausalLM;h.MBartForConditionalGeneration;h.MBartForSequenceClassification;h.MBartModel;h.MBartPreTrainedModel;h.MBartTokenizer;h.MPNetForMaskedLM;h.MPNetForQuestionAnswering;h.MPNetForSequenceClassification;h.MPNetForTokenClassification;h.MPNetModel;h.MPNetPreTrainedModel;h.MPNetTokenizer;h.MT5ForConditionalGeneration;h.MT5Model;h.MT5PreTrainedModel;h.MarianMTModel;h.MarianModel;h.MarianPreTrainedModel;h.MarianTokenizer;h.Mask2FormerImageProcessor;h.MaskFormerFeatureExtractor;h.MaskFormerForInstanceSegmentation;h.MaskFormerImageProcessor;h.MaskFormerModel;h.MaskFormerPreTrainedModel;h.MaskedLMOutput;h.MaxLengthCriteria;h.Metric3DForDepthEstimation;h.Metric3DPreTrainedModel;h.Metric3Dv2ForDepthEstimation;h.Metric3Dv2PreTrainedModel;h.MgpstrForSceneTextRecognition;h.MgpstrModelOutput;h.MgpstrPreTrainedModel;h.MgpstrProcessor;h.MgpstrTokenizer;h.MimiDecoderModel;h.MimiDecoderOutput;h.MimiEncoderModel;h.MimiEncoderOutput;h.MimiModel;h.MimiPreTrainedModel;h.MinLengthLogitsProcessor;h.MinNewTokensLengthLogitsProcessor;h.MistralForCausalLM;h.MistralModel;h.MistralPreTrainedModel;h.MobileBertForMaskedLM;h.MobileBertForQuestionAnswering;h.MobileBertForSequenceClassification;h.MobileBertModel;h.MobileBertPreTrainedModel;h.MobileBertTokenizer;h.MobileLLMForCausalLM;h.MobileLLMModel;h.MobileLLMPreTrainedModel;h.MobileNetV1FeatureExtractor;h.MobileNetV1ForImageClassification;h.MobileNetV1ForSemanticSegmentation;h.MobileNetV1ImageProcessor;h.MobileNetV1Model;h.MobileNetV1PreTrainedModel;h.MobileNetV2FeatureExtractor;h.MobileNetV2ForImageClassification;h.MobileNetV2ForSemanticSegmentation;h.MobileNetV2ImageProcessor;h.MobileNetV2Model;h.MobileNetV2PreTrainedModel;h.MobileNetV3FeatureExtractor;h.MobileNetV3ForImageClassification;h.MobileNetV3ForSemanticSegmentation;h.MobileNetV3ImageProcessor;h.MobileNetV3Model;h.MobileNetV3PreTrainedModel;h.MobileNetV4FeatureExtractor;h.MobileNetV4ForImageClassification;h.MobileNetV4ForSemanticSegmentation;h.MobileNetV4ImageProcessor;h.MobileNetV4Model;h.MobileNetV4PreTrainedModel;h.MobileViTFeatureExtractor;h.MobileViTForImageClassification;h.MobileViTImageProcessor;h.MobileViTModel;h.MobileViTPreTrainedModel;h.MobileViTV2ForImageClassification;h.MobileViTV2Model;h.MobileViTV2PreTrainedModel;h.ModelOutput;h.ModernBertDecoderForCausalLM;h.ModernBertDecoderModel;h.ModernBertDecoderPreTrainedModel;h.ModernBertForMaskedLM;h.ModernBertForSequenceClassification;h.ModernBertForTokenClassification;h.ModernBertModel;h.ModernBertPreTrainedModel;h.Moondream1ForConditionalGeneration;h.MoonshineFeatureExtractor;h.MoonshineForConditionalGeneration;h.MoonshineModel;h.MoonshinePreTrainedModel;h.MoonshineProcessor;h.MptForCausalLM;h.MptModel;h.MptPreTrainedModel;h.MultiModalityCausalLM;h.MultiModalityPreTrainedModel;h.MusicgenForCausalLM;h.MusicgenForConditionalGeneration;h.MusicgenModel;h.MusicgenPreTrainedModel;h.NeoBertForMaskedLM;h.NeoBertForQuestionAnswering;h.NeoBertForSequenceClassification;h.NeoBertForTokenClassification;h.NeoBertModel;h.NeoBertPreTrainedModel;h.NllbTokenizer;h.NoBadWordsLogitsProcessor;h.NoRepeatNGramLogitsProcessor;h.NomicBertModel;h.NomicBertPreTrainedModel;h.NougatImageProcessor;h.NougatTokenizer;h.OPTForCausalLM;h.OPTModel;h.OPTPreTrainedModel;h.ObjectDetectionPipeline;h.Olmo2ForCausalLM;h.Olmo2Model;h.Olmo2PreTrainedModel;h.OlmoForCausalLM;h.OlmoModel;h.OlmoPreTrainedModel;h.OpenELMForCausalLM;h.OpenELMModel;h.OpenELMPreTrainedModel;h.OwlViTFeatureExtractor;h.OwlViTForObjectDetection;h.OwlViTImageProcessor;h.OwlViTModel;h.OwlViTPreTrainedModel;h.OwlViTProcessor;h.Owlv2ForObjectDetection;h.Owlv2ImageProcessor;h.Owlv2Model;h.Owlv2PreTrainedModel;h.PaliGemmaForConditionalGeneration;h.PaliGemmaPreTrainedModel;h.PaliGemmaProcessor;h.PatchTSMixerForPrediction;h.PatchTSMixerModel;h.PatchTSMixerPreTrainedModel;h.PatchTSTForPrediction;h.PatchTSTModel;h.PatchTSTPreTrainedModel;h.Phi3ForCausalLM;h.Phi3Model;h.Phi3PreTrainedModel;h.Phi3VForCausalLM;h.Phi3VImageProcessor;h.Phi3VPreTrainedModel;h.Phi3VProcessor;h.PhiForCausalLM;h.PhiModel;h.PhiPreTrainedModel;h.Pipeline;h.PreTrainedModel;h.PreTrainedTokenizer;h.PretrainedConfig;h.PretrainedMixin;h.Processor;h.PvtForImageClassification;h.PvtImageProcessor;h.PvtModel;h.PvtPreTrainedModel;h.PyAnnoteFeatureExtractor;h.PyAnnoteForAudioFrameClassification;h.PyAnnoteModel;h.PyAnnotePreTrainedModel;h.PyAnnoteProcessor;h.QuestionAnsweringModelOutput;h.QuestionAnsweringPipeline;h.Qwen2ForCausalLM;h.Qwen2Model;h.Qwen2PreTrainedModel;h.Qwen2Tokenizer;h.Qwen2VLForConditionalGeneration;h.Qwen2VLImageProcessor;h.Qwen2VLPreTrainedModel;h.Qwen2VLProcessor;h.Qwen3ForCausalLM;h.Qwen3Model;h.Qwen3PreTrainedModel;h.RFDetrForObjectDetection;h.RFDetrModel;h.RFDetrObjectDetectionOutput;h.RFDetrPreTrainedModel;h.RTDetrForObjectDetection;h.RTDetrImageProcessor;h.RTDetrModel;h.RTDetrObjectDetectionOutput;h.RTDetrPreTrainedModel;h.RTDetrV2ForObjectDetection;h.RTDetrV2Model;h.RTDetrV2ObjectDetectionOutput;h.RTDetrV2PreTrainedModel;h.RawAudio;h.RawImage;h.RawVideo;h.RawVideoFrame;h.RepetitionPenaltyLogitsProcessor;h.ResNetForImageClassification;h.ResNetModel;h.ResNetPreTrainedModel;h.RoFormerForMaskedLM;h.RoFormerForQuestionAnswering;h.RoFormerForSequenceClassification;h.RoFormerForTokenClassification;h.RoFormerModel;h.RoFormerPreTrainedModel;h.RoFormerTokenizer;h.RobertaForMaskedLM;h.RobertaForQuestionAnswering;h.RobertaForSequenceClassification;h.RobertaForTokenClassification;h.RobertaModel;h.RobertaPreTrainedModel;h.RobertaTokenizer;h.SamImageProcessor;h.SamImageSegmentationOutput;h.SamModel;h.SamPreTrainedModel;h.SamProcessor;h.SapiensForDepthEstimation;h.SapiensForNormalEstimation;h.SapiensForSemanticSegmentation;h.SapiensPreTrainedModel;h.SeamlessM4TFeatureExtractor;h.SegformerFeatureExtractor;h.SegformerForImageClassification;h.SegformerForSemanticSegmentation;h.SegformerImageProcessor;h.SegformerModel;h.SegformerPreTrainedModel;h.Seq2SeqLMOutput;h.SequenceClassifierOutput;h.SiglipImageProcessor;h.SiglipModel;h.SiglipPreTrainedModel;h.SiglipTextModel;h.SiglipTokenizer;h.SiglipVisionModel;h.SmolLM3ForCausalLM;h.SmolLM3Model;h.SmolLM3PreTrainedModel;h.SmolVLMForConditionalGeneration;h.SmolVLMImageProcessor;h.SmolVLMProcessor;h.SnacDecoderModel;h.SnacEncoderModel;h.SnacFeatureExtractor;h.SnacModel;h.SnacPreTrainedModel;h.SpeechT5FeatureExtractor;h.SpeechT5ForSpeechToText;h.SpeechT5ForTextToSpeech;h.SpeechT5HifiGan;h.SpeechT5Model;h.SpeechT5PreTrainedModel;h.SpeechT5Processor;h.SpeechT5Tokenizer;h.SqueezeBertForMaskedLM;h.SqueezeBertForQuestionAnswering;h.SqueezeBertForSequenceClassification;h.SqueezeBertModel;h.SqueezeBertPreTrainedModel;h.SqueezeBertTokenizer;h.StableLmForCausalLM;h.StableLmModel;h.StableLmPreTrainedModel;h.Starcoder2ForCausalLM;h.Starcoder2Model;h.Starcoder2PreTrainedModel;h.StoppingCriteria;h.StoppingCriteriaList;h.StyleTextToSpeech2Model;h.StyleTextToSpeech2PreTrainedModel;h.SummarizationPipeline;h.SuppressTokensAtBeginLogitsProcessor;h.Swin2SRForImageSuperResolution;h.Swin2SRImageProcessor;h.Swin2SRModel;h.Swin2SRPreTrainedModel;h.SwinForImageClassification;h.SwinForSemanticSegmentation;h.SwinModel;h.SwinPreTrainedModel;h.T5ForConditionalGeneration;h.T5Model;h.T5PreTrainedModel;h.T5Tokenizer;h.TableTransformerForObjectDetection;h.TableTransformerModel;h.TableTransformerObjectDetectionOutput;h.TableTransformerPreTrainedModel;h.TemperatureLogitsWarper;h.Tensor;h.Text2TextGenerationPipeline;h.TextClassificationPipeline;h.TextGenerationPipeline;h.TextStreamer;h.TextToAudioPipeline;h.TokenClassificationPipeline;h.TokenClassifierOutput;h.TokenizerModel;h.TopKLogitsWarper;h.TopPLogitsWarper;h.TrOCRForCausalLM;h.TrOCRPreTrainedModel;h.TranslationPipeline;h.UltravoxModel;h.UltravoxPreTrainedModel;h.UltravoxProcessor;h.UniSpeechForCTC;h.UniSpeechForSequenceClassification;h.UniSpeechModel;h.UniSpeechPreTrainedModel;h.UniSpeechSatForAudioFrameClassification;h.UniSpeechSatForCTC;h.UniSpeechSatForSequenceClassification;h.UniSpeechSatModel;h.UniSpeechSatPreTrainedModel;h.VLChatProcessor;h.VLMImageProcessor;h.VaultGemmaForCausalLM;h.VaultGemmaModel;h.VaultGemmaPreTrainedModel;h.ViTFeatureExtractor;h.ViTForImageClassification;h.ViTImageProcessor;h.ViTMAEModel;h.ViTMAEPreTrainedModel;h.ViTMSNForImageClassification;h.ViTMSNModel;h.ViTMSNPreTrainedModel;h.ViTModel;h.ViTPreTrainedModel;h.VisionEncoderDecoderModel;h.VitMatteForImageMatting;h.VitMatteImageProcessor;h.VitMattePreTrainedModel;h.VitPoseForPoseEstimation;h.VitPoseImageProcessor;h.VitPosePreTrainedModel;h.VitsModel;h.VitsModelOutput;h.VitsPreTrainedModel;h.VitsTokenizer;h.VoxtralForConditionalGeneration;h.VoxtralProcessor;h.Wav2Vec2BertForCTC;h.Wav2Vec2BertForSequenceClassification;h.Wav2Vec2BertModel;h.Wav2Vec2BertPreTrainedModel;h.Wav2Vec2CTCTokenizer;h.Wav2Vec2FeatureExtractor;h.Wav2Vec2ForAudioFrameClassification;h.Wav2Vec2ForCTC;h.Wav2Vec2ForSequenceClassification;h.Wav2Vec2Model;h.Wav2Vec2PreTrainedModel;h.Wav2Vec2Processor;h.Wav2Vec2ProcessorWithLM;h.WavLMForAudioFrameClassification;h.WavLMForCTC;h.WavLMForSequenceClassification;h.WavLMForXVector;h.WavLMModel;h.WavLMPreTrainedModel;h.WeSpeakerFeatureExtractor;h.WeSpeakerResNetModel;h.WeSpeakerResNetPreTrainedModel;h.WhisperFeatureExtractor;h.WhisperForConditionalGeneration;h.WhisperModel;h.WhisperPreTrainedModel;h.WhisperProcessor;h.WhisperTextStreamer;h.WhisperTimeStampLogitsProcessor;h.WhisperTokenizer;h.XLMForQuestionAnswering;h.XLMForSequenceClassification;h.XLMForTokenClassification;h.XLMModel;h.XLMPreTrainedModel;h.XLMRobertaForMaskedLM;h.XLMRobertaForQuestionAnswering;h.XLMRobertaForSequenceClassification;h.XLMRobertaForTokenClassification;h.XLMRobertaModel;h.XLMRobertaPreTrainedModel;h.XLMRobertaTokenizer;h.XLMTokenizer;h.XLMWithLMHeadModel;h.XVectorOutput;h.YolosFeatureExtractor;h.YolosForObjectDetection;h.YolosImageProcessor;h.YolosModel;h.YolosObjectDetectionOutput;h.YolosPreTrainedModel;h.ZeroShotAudioClassificationPipeline;h.ZeroShotClassificationPipeline;h.ZeroShotImageClassificationPipeline;h.ZeroShotObjectDetectionPipeline;h.bankers_round;h.cat;h.cos_sim;h.dot;h.dynamic_time_warping;h.env;h.full;h.full_like;h.getCacheShapes;h.hamming;h.hanning;h.interpolate;h.interpolate_4d;h.interpolate_data;h.is_chinese_char;h.layer_norm;h.load_image;h.load_video;h.log_softmax;h.magnitude;h.matmul;h.max;h.mean;h.mean_pooling;h.medianFilter;h.mel_filter_bank;h.min;h.ones;h.ones_like;h.permute;h.permute_data;var PT=h.pipeline;h.quantize_embeddings;h.rand;h.read_audio;h.rfft;h.round;h.slice;h.softmax;h.spectrogram;h.stack;h.std_mean;h.topk;h.window_function;h.zeros;h.zeros_like;export{PT as _};
